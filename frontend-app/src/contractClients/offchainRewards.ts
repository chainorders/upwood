// This file was generated by the build script. Do not edit it manually.
/* eslint-disable no-mixed-spaces-and-tabs */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* tslint:disable:no-unused-variable */
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
import { ContractEvent, ContractName, EntrypointName, ModuleReference } from "@concordium/web-sdk";
import { InitMethod, ReceiveMethod } from "../GenericContract";
export const CONTRACT_NAME = "offchain_rewards";
export type initRequest = {
	treasury: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
};
export const initRequestSchemaBase64 =
	"FAABAAAACAAAAHRyZWFzdXJ5FQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADA==";
export const initErrorSchemaBase64 =
	"FQoAAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDAAAAFVuYXV0aG9yaXplZAIOAAAASW52YWxpZEFkZHJlc3MCGAAAAFVuYXV0aG9yaXplZEludmFsaWRBZ2VudAIOAAAAQ2hlY2tTaWduYXR1cmUCEAAAAEludmFsaWRTaWduYXR1cmUCDAAAAEludmFsaWROb25jZQIWAAAASW52YWxpZENvbnRyYWN0QWRkcmVzcwIOAAAASW52b2tlQ29udHJhY3QC";
export type AddAgentError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { InvalidAddress: Record<string, never> }
	| { UnauthorizedInvalidAgent: Record<string, never> }
	| { CheckSignature: Record<string, never> }
	| { InvalidSignature: Record<string, never> }
	| { InvalidNonce: Record<string, never> }
	| { InvalidContractAddress: Record<string, never> }
	| { InvokeContract: Record<string, never> };
export const addAgentErrorSchemaBase64 =
	"FQoAAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDAAAAFVuYXV0aG9yaXplZAIOAAAASW52YWxpZEFkZHJlc3MCGAAAAFVuYXV0aG9yaXplZEludmFsaWRBZ2VudAIOAAAAQ2hlY2tTaWduYXR1cmUCEAAAAEludmFsaWRTaWduYXR1cmUCDAAAAEludmFsaWROb25jZQIWAAAASW52YWxpZENvbnRyYWN0QWRkcmVzcwIOAAAASW52b2tlQ29udHJhY3QC";
export type AddAgentRequest = {
	address: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
};
export const addAgentRequestSchemaBase64 =
	"FAABAAAABwAAAGFkZHJlc3MVAgAAAAcAAABBY2NvdW50AQEAAAALCAAAAENvbnRyYWN0AQEAAAAM";
export type ClaimRewardError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { InvalidAddress: Record<string, never> }
	| { UnauthorizedInvalidAgent: Record<string, never> }
	| { CheckSignature: Record<string, never> }
	| { InvalidSignature: Record<string, never> }
	| { InvalidNonce: Record<string, never> }
	| { InvalidContractAddress: Record<string, never> }
	| { InvokeContract: Record<string, never> };
export const claimRewardErrorSchemaBase64 =
	"FQoAAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDAAAAFVuYXV0aG9yaXplZAIOAAAASW52YWxpZEFkZHJlc3MCGAAAAFVuYXV0aG9yaXplZEludmFsaWRBZ2VudAIOAAAAQ2hlY2tTaWduYXR1cmUCEAAAAEludmFsaWRTaWduYXR1cmUCDAAAAEludmFsaWROb25jZQIWAAAASW52YWxpZENvbnRyYWN0QWRkcmVzcwIOAAAASW52b2tlQ29udHJhY3QC";
export type ClaimRewardRequest = {
	claim: {
		contract_address: { index: number; subindex: number };
		account: string;
		account_nonce: bigint;
		reward_id: Array<number>;
		reward_token_id: string;
		reward_token_contract: { index: number; subindex: number };
		reward_amount: string;
	};
	signer: string;
	signature: [number, [number, { Ed25519: [string] }][]][];
};
export const claimRewardRequestSchemaBase64 =
	"FAADAAAABQAAAGNsYWltFAAHAAAAEAAAAGNvbnRyYWN0X2FkZHJlc3MMBwAAAGFjY291bnQLDQAAAGFjY291bnRfbm9uY2UFCQAAAHJld2FyZF9pZBACAg8AAAByZXdhcmRfdG9rZW5faWQdABUAAAByZXdhcmRfdG9rZW5fY29udHJhY3QMDQAAAHJld2FyZF9hbW91bnQbJQAAAAYAAABzaWduZXILCQAAAHNpZ25hdHVyZRIAAhIAAhUBAAAABwAAAEVkMjU1MTkBAQAAAB5AAAAA";
export type IsAgentError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { InvalidAddress: Record<string, never> }
	| { UnauthorizedInvalidAgent: Record<string, never> }
	| { CheckSignature: Record<string, never> }
	| { InvalidSignature: Record<string, never> }
	| { InvalidNonce: Record<string, never> }
	| { InvalidContractAddress: Record<string, never> }
	| { InvokeContract: Record<string, never> };
export const isAgentErrorSchemaBase64 =
	"FQoAAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDAAAAFVuYXV0aG9yaXplZAIOAAAASW52YWxpZEFkZHJlc3MCGAAAAFVuYXV0aG9yaXplZEludmFsaWRBZ2VudAIOAAAAQ2hlY2tTaWduYXR1cmUCEAAAAEludmFsaWRTaWduYXR1cmUCDAAAAEludmFsaWROb25jZQIWAAAASW52YWxpZENvbnRyYWN0QWRkcmVzcwIOAAAASW52b2tlQ29udHJhY3QC";
export type IsAgentRequest = {
	address: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
};
export const isAgentRequestSchemaBase64 =
	"FAABAAAABwAAAGFkZHJlc3MVAgAAAAcAAABBY2NvdW50AQEAAAALCAAAAENvbnRyYWN0AQEAAAAM";
export type IsAgentResponse = boolean;
export const isAgentResponseSchemaBase64 = "AQ==";
export type RemoveAgentError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { InvalidAddress: Record<string, never> }
	| { UnauthorizedInvalidAgent: Record<string, never> }
	| { CheckSignature: Record<string, never> }
	| { InvalidSignature: Record<string, never> }
	| { InvalidNonce: Record<string, never> }
	| { InvalidContractAddress: Record<string, never> }
	| { InvokeContract: Record<string, never> };
export const removeAgentErrorSchemaBase64 =
	"FQoAAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDAAAAFVuYXV0aG9yaXplZAIOAAAASW52YWxpZEFkZHJlc3MCGAAAAFVuYXV0aG9yaXplZEludmFsaWRBZ2VudAIOAAAAQ2hlY2tTaWduYXR1cmUCEAAAAEludmFsaWRTaWduYXR1cmUCDAAAAEludmFsaWROb25jZQIWAAAASW52YWxpZENvbnRyYWN0QWRkcmVzcwIOAAAASW52b2tlQ29udHJhY3QC";
export type RemoveAgentRequest = { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
export const removeAgentRequestSchemaBase64 = "FQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADA==";
export type event =
	| {
			Init: [
				{
					treasury: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
				},
			];
	  }
	| {
			AgentAdded: [{ Account: [string] } | { Contract: [{ index: number; subindex: number }] }];
	  }
	| {
			AgentRemoved: [{ Account: [string] } | { Contract: [{ index: number; subindex: number }] }];
	  }
	| {
			Claimed: [
				{
					reward_id: Array<number>;
					account_address: string;
					nonce: bigint;
					reward_token_id: string;
					reward_token_contract: { index: number; subindex: number };
					reward_amount: string;
				},
			];
	  };
export const eventSchemaBase64 =
	"FQQAAAAEAAAASW5pdAEBAAAAFAABAAAACAAAAHRyZWFzdXJ5FQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADAoAAABBZ2VudEFkZGVkAQEAAAAVAgAAAAcAAABBY2NvdW50AQEAAAALCAAAAENvbnRyYWN0AQEAAAAMDAAAAEFnZW50UmVtb3ZlZAEBAAAAFQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADAcAAABDbGFpbWVkAQEAAAAUAAYAAAAJAAAAcmV3YXJkX2lkEAICDwAAAGFjY291bnRfYWRkcmVzcwsFAAAAbm9uY2UFDwAAAHJld2FyZF90b2tlbl9pZB0AFQAAAHJld2FyZF90b2tlbl9jb250cmFjdAwNAAAAcmV3YXJkX2Ftb3VudBslAAAA";
export const ENTRYPOINTS: Record<string, EntrypointName.Type> = {
	addAgent: EntrypointName.fromString("addAgent"),
	claimReward: EntrypointName.fromString("claimReward"),
	isAgent: EntrypointName.fromString("isAgent"),
	removeAgent: EntrypointName.fromString("removeAgent"),
};
export const ENTRYPOINT_DISPLAY_NAMES: Record<string, string> = {
	addAgent: "Add Agent",
	claimReward: "Claim Reward",
	isAgent: "Is Agent",
	removeAgent: "Remove Agent",
};
export const offchainRewards = {
	init: new InitMethod<initRequest>(
		ModuleReference.fromHexString("43b8d180396b3e1089f8f90f1696e8fe8599c24c2280d7db61a91e1d01432534"),
		ContractName.fromString("offchain_rewards"),
		initRequestSchemaBase64,
	),
	addAgent: new ReceiveMethod<AddAgentRequest, never, AddAgentError>(
		ContractName.fromString("offchain_rewards"),
		EntrypointName.fromString("addAgent"),
		addAgentRequestSchemaBase64,
		undefined,
		addAgentErrorSchemaBase64,
	),
	claimReward: new ReceiveMethod<ClaimRewardRequest, never, ClaimRewardError>(
		ContractName.fromString("offchain_rewards"),
		EntrypointName.fromString("claimReward"),
		claimRewardRequestSchemaBase64,
		undefined,
		claimRewardErrorSchemaBase64,
	),
	isAgent: new ReceiveMethod<IsAgentRequest, IsAgentResponse, IsAgentError>(
		ContractName.fromString("offchain_rewards"),
		EntrypointName.fromString("isAgent"),
		isAgentRequestSchemaBase64,
		isAgentResponseSchemaBase64,
		isAgentErrorSchemaBase64,
	),
	removeAgent: new ReceiveMethod<RemoveAgentRequest, never, RemoveAgentError>(
		ContractName.fromString("offchain_rewards"),
		EntrypointName.fromString("removeAgent"),
		removeAgentRequestSchemaBase64,
		undefined,
		removeAgentErrorSchemaBase64,
	),
	deserializeEvent: (event: ContractEvent.Type): event => {
		return ContractEvent.parseWithSchemaTypeBase64(event, eventSchemaBase64) as event;
	},
};
export default offchainRewards;
