// This file was generated by the build script. Do not edit it manually.
/* eslint-disable no-mixed-spaces-and-tabs */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* tslint:disable:no-unused-variable */
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
import { ContractEvent, ContractName, EntrypointName, ModuleReference } from "@concordium/web-sdk";
import { InitMethod, ReceiveMethod } from "../GenericContract";
export const CONTRACT_NAME = "security_p2p_trading";
export type initRequest = {
	currency: { contract: { index: number; subindex: number }; id: string };
	agents: Array<{
		address: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
		roles: Array<
			{ AddMarket: Record<string, never> } | { RemoveMarket: Record<string, never> } | { Operator: Record<string, never> }
		>;
	}>;
};
export const initRequestSchemaBase64 =
	"FAACAAAACAAAAGN1cnJlbmN5FAACAAAACAAAAGNvbnRyYWN0DAIAAABpZB0ABgAAAGFnZW50cxACFAACAAAABwAAAGFkZHJlc3MVAgAAAAcAAABBY2NvdW50AQEAAAALCAAAAENvbnRyYWN0AQEAAAAMBQAAAHJvbGVzEAIVAwAAAAkAAABBZGRNYXJrZXQCDAAAAFJlbW92ZU1hcmtldAIIAAAAT3BlcmF0b3IC";
export const initErrorSchemaBase64 =
	"FQkAAAAKAAAAUGFyc2VFcnJvcgIMAAAAVW5hdXRob3JpemVkAhEAAABJbnZhbGlkQ29udmVyc2lvbgIIAAAATG9nRXJyb3ICCwAAAEFnZW50RXhpc3RzAg0AAABJbnZhbGlkTWFya2V0Ag0AAABUb2tlblRyYW5zZmVyAhAAAABDdXJyZW5jeVRyYW5zZmVyAgsAAABJbnZhbGlkUmF0ZQI=";
export type AddAgentRequest = {
	address: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
	roles: Array<
		{ AddMarket: Record<string, never> } | { RemoveMarket: Record<string, never> } | { Operator: Record<string, never> }
	>;
};
export const addAgentRequestSchemaBase64 =
	"FAACAAAABwAAAGFkZHJlc3MVAgAAAAcAAABBY2NvdW50AQEAAAALCAAAAENvbnRyYWN0AQEAAAAMBQAAAHJvbGVzEAIVAwAAAAkAAABBZGRNYXJrZXQCDAAAAFJlbW92ZU1hcmtldAIIAAAAT3BlcmF0b3IC";
export type AddMarketRequest = {
	token: { contract: { index: number; subindex: number }; id: string };
	market: {
		liquidity_provider: string;
		buy_rate: { numerator: bigint; denominator: bigint };
		sell_rate: { numerator: bigint; denominator: bigint };
	};
};
export const addMarketRequestSchemaBase64 =
	"FAACAAAABQAAAHRva2VuFAACAAAACAAAAGNvbnRyYWN0DAIAAABpZB0ABgAAAG1hcmtldBQAAwAAABIAAABsaXF1aWRpdHlfcHJvdmlkZXILCAAAAGJ1eV9yYXRlFAACAAAACQAAAG51bWVyYXRvcgULAAAAZGVub21pbmF0b3IFCQAAAHNlbGxfcmF0ZRQAAgAAAAkAAABudW1lcmF0b3IFCwAAAGRlbm9taW5hdG9yBQ==";
export type BuyError =
	| { ParseError: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { InvalidConversion: Record<string, never> }
	| { LogError: Record<string, never> }
	| { AgentExists: Record<string, never> }
	| { InvalidMarket: Record<string, never> }
	| { TokenTransfer: Record<string, never> }
	| { CurrencyTransfer: Record<string, never> }
	| { InvalidRate: Record<string, never> };
export const buyErrorSchemaBase64 =
	"FQkAAAAKAAAAUGFyc2VFcnJvcgIMAAAAVW5hdXRob3JpemVkAhEAAABJbnZhbGlkQ29udmVyc2lvbgIIAAAATG9nRXJyb3ICCwAAAEFnZW50RXhpc3RzAg0AAABJbnZhbGlkTWFya2V0Ag0AAABUb2tlblRyYW5zZmVyAhAAAABDdXJyZW5jeVRyYW5zZmVyAgsAAABJbnZhbGlkUmF0ZQI=";
export type BuyRequest = {
	token: { contract: { index: number; subindex: number }; id: string };
	amount: string;
	rate: { numerator: bigint; denominator: bigint };
};
export const buyRequestSchemaBase64 =
	"FAADAAAABQAAAHRva2VuFAACAAAACAAAAGNvbnRyYWN0DAIAAABpZB0ABgAAAGFtb3VudBslAAAABAAAAHJhdGUUAAIAAAAJAAAAbnVtZXJhdG9yBQsAAABkZW5vbWluYXRvcgU=";
export type GetMarketRequest = {
	contract: { index: number; subindex: number };
	id: string;
};
export const getMarketRequestSchemaBase64 = "FAACAAAACAAAAGNvbnRyYWN0DAIAAABpZB0A";
export type RemoveAgentRequest = { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
export const removeAgentRequestSchemaBase64 = "FQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADA==";
export type RemoveMarketRequest = {
	contract: { index: number; subindex: number };
	id: string;
};
export const removeMarketRequestSchemaBase64 = "FAACAAAACAAAAGNvbnRyYWN0DAIAAABpZB0A";
export type SellError =
	| { ParseError: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { InvalidConversion: Record<string, never> }
	| { LogError: Record<string, never> }
	| { AgentExists: Record<string, never> }
	| { InvalidMarket: Record<string, never> }
	| { TokenTransfer: Record<string, never> }
	| { CurrencyTransfer: Record<string, never> }
	| { InvalidRate: Record<string, never> };
export const sellErrorSchemaBase64 =
	"FQkAAAAKAAAAUGFyc2VFcnJvcgIMAAAAVW5hdXRob3JpemVkAhEAAABJbnZhbGlkQ29udmVyc2lvbgIIAAAATG9nRXJyb3ICCwAAAEFnZW50RXhpc3RzAg0AAABJbnZhbGlkTWFya2V0Ag0AAABUb2tlblRyYW5zZmVyAhAAAABDdXJyZW5jeVRyYW5zZmVyAgsAAABJbnZhbGlkUmF0ZQI=";
export type SellRequest = {
	token: { contract: { index: number; subindex: number }; id: string };
	amount: string;
	rate: { numerator: bigint; denominator: bigint };
};
export const sellRequestSchemaBase64 =
	"FAADAAAABQAAAHRva2VuFAACAAAACAAAAGNvbnRyYWN0DAIAAABpZB0ABgAAAGFtb3VudBslAAAABAAAAHJhdGUUAAIAAAAJAAAAbnVtZXJhdG9yBQsAAABkZW5vbWluYXRvcgU=";
export type event =
	| {
			Initialized: [{ contract: { index: number; subindex: number }; id: string }];
	  }
	| {
			AgentAdded: [
				{
					address: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
					roles: Array<
						| { AddMarket: Record<string, never> }
						| { RemoveMarket: Record<string, never> }
						| { Operator: Record<string, never> }
					>;
				},
			];
	  }
	| {
			AgentRemoved: [{ Account: [string] } | { Contract: [{ index: number; subindex: number }] }];
	  }
	| {
			MarketAdded: [
				{
					token: {
						contract: { index: number; subindex: number };
						id: string;
					};
					market: {
						liquidity_provider: string;
						buy_rate: { numerator: bigint; denominator: bigint };
						sell_rate: { numerator: bigint; denominator: bigint };
					};
				},
			];
	  }
	| {
			Exchanged: [
				{
					token_contract: { index: number; subindex: number };
					token_id: string;
					seller: string;
					buyer: string;
					token_amount: string;
					rate: { numerator: bigint; denominator: bigint };
					currency_amount: string;
				},
			];
	  }
	| {
			MarketRemoved: [{ contract: { index: number; subindex: number }; id: string }];
	  };
export const eventSchemaBase64 =
	"FQYAAAALAAAASW5pdGlhbGl6ZWQBAQAAABQAAgAAAAgAAABjb250cmFjdAwCAAAAaWQdAAoAAABBZ2VudEFkZGVkAQEAAAAUAAIAAAAHAAAAYWRkcmVzcxUCAAAABwAAAEFjY291bnQBAQAAAAsIAAAAQ29udHJhY3QBAQAAAAwFAAAAcm9sZXMQAhUDAAAACQAAAEFkZE1hcmtldAIMAAAAUmVtb3ZlTWFya2V0AggAAABPcGVyYXRvcgIMAAAAQWdlbnRSZW1vdmVkAQEAAAAVAgAAAAcAAABBY2NvdW50AQEAAAALCAAAAENvbnRyYWN0AQEAAAAMCwAAAE1hcmtldEFkZGVkAQEAAAAUAAIAAAAFAAAAdG9rZW4UAAIAAAAIAAAAY29udHJhY3QMAgAAAGlkHQAGAAAAbWFya2V0FAADAAAAEgAAAGxpcXVpZGl0eV9wcm92aWRlcgsIAAAAYnV5X3JhdGUUAAIAAAAJAAAAbnVtZXJhdG9yBQsAAABkZW5vbWluYXRvcgUJAAAAc2VsbF9yYXRlFAACAAAACQAAAG51bWVyYXRvcgULAAAAZGVub21pbmF0b3IFCQAAAEV4Y2hhbmdlZAEBAAAAFAAHAAAADgAAAHRva2VuX2NvbnRyYWN0DAgAAAB0b2tlbl9pZB0ABgAAAHNlbGxlcgsFAAAAYnV5ZXILDAAAAHRva2VuX2Ftb3VudBslAAAABAAAAHJhdGUUAAIAAAAJAAAAbnVtZXJhdG9yBQsAAABkZW5vbWluYXRvcgUPAAAAY3VycmVuY3lfYW1vdW50GyUAAAANAAAATWFya2V0UmVtb3ZlZAEBAAAAFAACAAAACAAAAGNvbnRyYWN0DAIAAABpZB0A";
export const ENTRYPOINTS: Record<string, EntrypointName.Type> = {
	addAgent: EntrypointName.fromString("addAgent"),
	addMarket: EntrypointName.fromString("addMarket"),
	buy: EntrypointName.fromString("buy"),
	getMarket: EntrypointName.fromString("getMarket"),
	removeAgent: EntrypointName.fromString("removeAgent"),
	removeMarket: EntrypointName.fromString("removeMarket"),
	sell: EntrypointName.fromString("sell"),
};
export const ENTRYPOINT_DISPLAY_NAMES: Record<string, string> = {
	addAgent: "Add Agent",
	addMarket: "Add Market",
	buy: "Buy",
	getMarket: "Get Market",
	removeAgent: "Remove Agent",
	removeMarket: "Remove Market",
	sell: "Sell",
};
export const securityP2PTrading = {
	init: new InitMethod<initRequest>(
		ModuleReference.fromHexString("734f07bc8c238f76d3a41bb6fb468ffb837f42889b00a09ce93498e745dd45eb"),
		ContractName.fromString("security_p2p_trading"),
		initRequestSchemaBase64,
	),
	addAgent: new ReceiveMethod<AddAgentRequest>(
		ContractName.fromString("security_p2p_trading"),
		EntrypointName.fromString("addAgent"),
		addAgentRequestSchemaBase64,
	),
	addMarket: new ReceiveMethod<AddMarketRequest>(
		ContractName.fromString("security_p2p_trading"),
		EntrypointName.fromString("addMarket"),
		addMarketRequestSchemaBase64,
	),
	buy: new ReceiveMethod<BuyRequest, never, BuyError>(
		ContractName.fromString("security_p2p_trading"),
		EntrypointName.fromString("buy"),
		buyRequestSchemaBase64,
		undefined,
		buyErrorSchemaBase64,
	),
	getMarket: new ReceiveMethod<GetMarketRequest>(
		ContractName.fromString("security_p2p_trading"),
		EntrypointName.fromString("getMarket"),
		getMarketRequestSchemaBase64,
	),
	removeAgent: new ReceiveMethod<RemoveAgentRequest>(
		ContractName.fromString("security_p2p_trading"),
		EntrypointName.fromString("removeAgent"),
		removeAgentRequestSchemaBase64,
	),
	removeMarket: new ReceiveMethod<RemoveMarketRequest>(
		ContractName.fromString("security_p2p_trading"),
		EntrypointName.fromString("removeMarket"),
		removeMarketRequestSchemaBase64,
	),
	sell: new ReceiveMethod<SellRequest, never, SellError>(
		ContractName.fromString("security_p2p_trading"),
		EntrypointName.fromString("sell"),
		sellRequestSchemaBase64,
		undefined,
		sellErrorSchemaBase64,
	),
	deserializeEvent: (event: ContractEvent.Type): event => {
		return ContractEvent.parseWithSchemaTypeBase64(event, eventSchemaBase64) as event;
	},
};
export default securityP2PTrading;
