// This file was generated by the build script. Do not edit it manually.
/* eslint-disable no-mixed-spaces-and-tabs */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* tslint:disable:no-unused-variable */
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
import { ContractEvent, ContractName, EntrypointName, ModuleReference } from "@concordium/web-sdk";
import { InitMethod, ReceiveMethod } from "../GenericContract";
export const CONTRACT_NAME = "security_sft_single";
export type initRequest = {
	metadata_url: { url: string; hash: { None: Record<string, never> } | { Some: [string] } };
	security:
		| { None: Record<string, never> }
		| {
				Some: [{ identity_registry: { index: number; subindex: number }; compliance: { index: number; subindex: number } }];
		  };
	agents: Array<{
		address: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
		roles: Array<
			| { SetIdentityRegistry: Record<string, never> }
			| { SetCompliance: Record<string, never> }
			| { AddAgent: Record<string, never> }
			| { Mint: Record<string, never> }
			| { ForcedBurn: Record<string, never> }
			| { ForcedTransfer: Record<string, never> }
			| { Freeze: Record<string, never> }
			| { UnFreeze: Record<string, never> }
			| { HolderRecovery: Record<string, never> }
			| { Pause: Record<string, never> }
			| { UnPause: Record<string, never> }
			| { Operator: Record<string, never> }
			| { SetTokenMetadata: Record<string, never> }
		>;
	}>;
};
export const initRequestSchemaBase64 =
	"FAADAAAADAAAAG1ldGFkYXRhX3VybBQAAgAAAAMAAAB1cmwWAgQAAABoYXNoFQIAAAAEAAAATm9uZQIEAAAAU29tZQEBAAAAFgIIAAAAc2VjdXJpdHkVAgAAAAQAAABOb25lAgQAAABTb21lAQEAAAAUAAIAAAARAAAAaWRlbnRpdHlfcmVnaXN0cnkMCgAAAGNvbXBsaWFuY2UMBgAAAGFnZW50cxACFAACAAAABwAAAGFkZHJlc3MVAgAAAAcAAABBY2NvdW50AQEAAAALCAAAAENvbnRyYWN0AQEAAAAMBQAAAHJvbGVzEAIVDQAAABMAAABTZXRJZGVudGl0eVJlZ2lzdHJ5Ag0AAABTZXRDb21wbGlhbmNlAggAAABBZGRBZ2VudAIEAAAATWludAIKAAAARm9yY2VkQnVybgIOAAAARm9yY2VkVHJhbnNmZXICBgAAAEZyZWV6ZQIIAAAAVW5GcmVlemUCDgAAAEhvbGRlclJlY292ZXJ5AgUAAABQYXVzZQIHAAAAVW5QYXVzZQIIAAAAT3BlcmF0b3ICEAAAAFNldFRva2VuTWV0YWRhdGEC";
export const initErrorSchemaBase64 =
	"FQ0AAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDgAAAEludmFsaWRUb2tlbklkAhEAAABJbnN1ZmZpY2llbnRGdW5kcwIMAAAAVW5hdXRob3JpemVkAhIAAABVblZlcmlmaWVkSWRlbnRpdHkCEwAAAEluQ29tcGxpYW50VHJhbnNmZXICEQAAAENhbGxDb250cmFjdEVycm9yAgsAAABQYXVzZWRUb2tlbgINAAAASW52YWxpZEFtb3VudAIOAAAASW52YWxpZEFkZHJlc3MCEAAAAFJlY292ZXJlZEFkZHJlc3MCDgAAAFNlY3VyaXR5Tm90U2V0Ag==";
export type AddAgentError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { UnVerifiedIdentity: Record<string, never> }
	| { InCompliantTransfer: Record<string, never> }
	| { CallContractError: Record<string, never> }
	| { PausedToken: Record<string, never> }
	| { InvalidAmount: Record<string, never> }
	| { InvalidAddress: Record<string, never> }
	| { RecoveredAddress: Record<string, never> }
	| { SecurityNotSet: Record<string, never> };
export const addAgentErrorSchemaBase64 =
	"FQ0AAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDgAAAEludmFsaWRUb2tlbklkAhEAAABJbnN1ZmZpY2llbnRGdW5kcwIMAAAAVW5hdXRob3JpemVkAhIAAABVblZlcmlmaWVkSWRlbnRpdHkCEwAAAEluQ29tcGxpYW50VHJhbnNmZXICEQAAAENhbGxDb250cmFjdEVycm9yAgsAAABQYXVzZWRUb2tlbgINAAAASW52YWxpZEFtb3VudAIOAAAASW52YWxpZEFkZHJlc3MCEAAAAFJlY292ZXJlZEFkZHJlc3MCDgAAAFNlY3VyaXR5Tm90U2V0Ag==";
export type AddAgentRequest = {
	address: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
	roles: Array<
		| { SetIdentityRegistry: Record<string, never> }
		| { SetCompliance: Record<string, never> }
		| { AddAgent: Record<string, never> }
		| { Mint: Record<string, never> }
		| { ForcedBurn: Record<string, never> }
		| { ForcedTransfer: Record<string, never> }
		| { Freeze: Record<string, never> }
		| { UnFreeze: Record<string, never> }
		| { HolderRecovery: Record<string, never> }
		| { Pause: Record<string, never> }
		| { UnPause: Record<string, never> }
		| { Operator: Record<string, never> }
		| { SetTokenMetadata: Record<string, never> }
	>;
};
export const addAgentRequestSchemaBase64 =
	"FAACAAAABwAAAGFkZHJlc3MVAgAAAAcAAABBY2NvdW50AQEAAAALCAAAAENvbnRyYWN0AQEAAAAMBQAAAHJvbGVzEAIVDQAAABMAAABTZXRJZGVudGl0eVJlZ2lzdHJ5Ag0AAABTZXRDb21wbGlhbmNlAggAAABBZGRBZ2VudAIEAAAATWludAIKAAAARm9yY2VkQnVybgIOAAAARm9yY2VkVHJhbnNmZXICBgAAAEZyZWV6ZQIIAAAAVW5GcmVlemUCDgAAAEhvbGRlclJlY292ZXJ5AgUAAABQYXVzZQIHAAAAVW5QYXVzZQIIAAAAT3BlcmF0b3ICEAAAAFNldFRva2VuTWV0YWRhdGEC";
export type BalanceOfError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { UnVerifiedIdentity: Record<string, never> }
	| { InCompliantTransfer: Record<string, never> }
	| { CallContractError: Record<string, never> }
	| { PausedToken: Record<string, never> }
	| { InvalidAmount: Record<string, never> }
	| { InvalidAddress: Record<string, never> }
	| { RecoveredAddress: Record<string, never> }
	| { SecurityNotSet: Record<string, never> };
export const balanceOfErrorSchemaBase64 =
	"FQ0AAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDgAAAEludmFsaWRUb2tlbklkAhEAAABJbnN1ZmZpY2llbnRGdW5kcwIMAAAAVW5hdXRob3JpemVkAhIAAABVblZlcmlmaWVkSWRlbnRpdHkCEwAAAEluQ29tcGxpYW50VHJhbnNmZXICEQAAAENhbGxDb250cmFjdEVycm9yAgsAAABQYXVzZWRUb2tlbgINAAAASW52YWxpZEFtb3VudAIOAAAASW52YWxpZEFkZHJlc3MCEAAAAFJlY292ZXJlZEFkZHJlc3MCDgAAAFNlY3VyaXR5Tm90U2V0Ag==";
export type BalanceOfRequest = Array<{
	token_id: string;
	address: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
}>;
export const balanceOfRequestSchemaBase64 =
	"EAEUAAIAAAAIAAAAdG9rZW5faWQdAAcAAABhZGRyZXNzFQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADA==";
export type BalanceOfResponse = Array<string>;
export const balanceOfResponseSchemaBase64 = "EAEbJQAAAA==";
export type BalanceOfFrozenError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { UnVerifiedIdentity: Record<string, never> }
	| { InCompliantTransfer: Record<string, never> }
	| { CallContractError: Record<string, never> }
	| { PausedToken: Record<string, never> }
	| { InvalidAmount: Record<string, never> }
	| { InvalidAddress: Record<string, never> }
	| { RecoveredAddress: Record<string, never> }
	| { SecurityNotSet: Record<string, never> };
export const balanceOfFrozenErrorSchemaBase64 =
	"FQ0AAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDgAAAEludmFsaWRUb2tlbklkAhEAAABJbnN1ZmZpY2llbnRGdW5kcwIMAAAAVW5hdXRob3JpemVkAhIAAABVblZlcmlmaWVkSWRlbnRpdHkCEwAAAEluQ29tcGxpYW50VHJhbnNmZXICEQAAAENhbGxDb250cmFjdEVycm9yAgsAAABQYXVzZWRUb2tlbgINAAAASW52YWxpZEFtb3VudAIOAAAASW52YWxpZEFkZHJlc3MCEAAAAFJlY292ZXJlZEFkZHJlc3MCDgAAAFNlY3VyaXR5Tm90U2V0Ag==";
export type BalanceOfFrozenRequest = Array<{
	token_id: string;
	address: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
}>;
export const balanceOfFrozenRequestSchemaBase64 =
	"EAEUAAIAAAAIAAAAdG9rZW5faWQdAAcAAABhZGRyZXNzFQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADA==";
export type BalanceOfFrozenResponse = Array<string>;
export const balanceOfFrozenResponseSchemaBase64 = "EAEbJQAAAA==";
export type BalanceOfUnFrozenError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { UnVerifiedIdentity: Record<string, never> }
	| { InCompliantTransfer: Record<string, never> }
	| { CallContractError: Record<string, never> }
	| { PausedToken: Record<string, never> }
	| { InvalidAmount: Record<string, never> }
	| { InvalidAddress: Record<string, never> }
	| { RecoveredAddress: Record<string, never> }
	| { SecurityNotSet: Record<string, never> };
export const balanceOfUnFrozenErrorSchemaBase64 =
	"FQ0AAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDgAAAEludmFsaWRUb2tlbklkAhEAAABJbnN1ZmZpY2llbnRGdW5kcwIMAAAAVW5hdXRob3JpemVkAhIAAABVblZlcmlmaWVkSWRlbnRpdHkCEwAAAEluQ29tcGxpYW50VHJhbnNmZXICEQAAAENhbGxDb250cmFjdEVycm9yAgsAAABQYXVzZWRUb2tlbgINAAAASW52YWxpZEFtb3VudAIOAAAASW52YWxpZEFkZHJlc3MCEAAAAFJlY292ZXJlZEFkZHJlc3MCDgAAAFNlY3VyaXR5Tm90U2V0Ag==";
export type BalanceOfUnFrozenRequest = Array<{
	token_id: string;
	address: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
}>;
export const balanceOfUnFrozenRequestSchemaBase64 =
	"EAEUAAIAAAAIAAAAdG9rZW5faWQdAAcAAABhZGRyZXNzFQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADA==";
export type BalanceOfUnFrozenResponse = Array<string>;
export const balanceOfUnFrozenResponseSchemaBase64 = "EAEbJQAAAA==";
export type BurnError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { UnVerifiedIdentity: Record<string, never> }
	| { InCompliantTransfer: Record<string, never> }
	| { CallContractError: Record<string, never> }
	| { PausedToken: Record<string, never> }
	| { InvalidAmount: Record<string, never> }
	| { InvalidAddress: Record<string, never> }
	| { RecoveredAddress: Record<string, never> }
	| { SecurityNotSet: Record<string, never> };
export const burnErrorSchemaBase64 =
	"FQ0AAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDgAAAEludmFsaWRUb2tlbklkAhEAAABJbnN1ZmZpY2llbnRGdW5kcwIMAAAAVW5hdXRob3JpemVkAhIAAABVblZlcmlmaWVkSWRlbnRpdHkCEwAAAEluQ29tcGxpYW50VHJhbnNmZXICEQAAAENhbGxDb250cmFjdEVycm9yAgsAAABQYXVzZWRUb2tlbgINAAAASW52YWxpZEFtb3VudAIOAAAASW52YWxpZEFkZHJlc3MCEAAAAFJlY292ZXJlZEFkZHJlc3MCDgAAAFNlY3VyaXR5Tm90U2V0Ag==";
export type BurnRequest = Array<{
	token_id: string;
	amount: string;
	owner: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
}>;
export const burnRequestSchemaBase64 =
	"EAEUAAMAAAAIAAAAdG9rZW5faWQdAAYAAABhbW91bnQbJQAAAAUAAABvd25lchUCAAAABwAAAEFjY291bnQBAQAAAAsIAAAAQ29udHJhY3QBAQAAAAw=";
export type ComplianceResponse = { index: number; subindex: number };
export const complianceResponseSchemaBase64 = "DA==";
export type FreezeError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { UnVerifiedIdentity: Record<string, never> }
	| { InCompliantTransfer: Record<string, never> }
	| { CallContractError: Record<string, never> }
	| { PausedToken: Record<string, never> }
	| { InvalidAmount: Record<string, never> }
	| { InvalidAddress: Record<string, never> }
	| { RecoveredAddress: Record<string, never> }
	| { SecurityNotSet: Record<string, never> };
export const freezeErrorSchemaBase64 =
	"FQ0AAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDgAAAEludmFsaWRUb2tlbklkAhEAAABJbnN1ZmZpY2llbnRGdW5kcwIMAAAAVW5hdXRob3JpemVkAhIAAABVblZlcmlmaWVkSWRlbnRpdHkCEwAAAEluQ29tcGxpYW50VHJhbnNmZXICEQAAAENhbGxDb250cmFjdEVycm9yAgsAAABQYXVzZWRUb2tlbgINAAAASW52YWxpZEFtb3VudAIOAAAASW52YWxpZEFkZHJlc3MCEAAAAFJlY292ZXJlZEFkZHJlc3MCDgAAAFNlY3VyaXR5Tm90U2V0Ag==";
export type FreezeRequest = {
	owner: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
	tokens: Array<{ token_id: string; token_amount: string }>;
};
export const freezeRequestSchemaBase64 =
	"FAACAAAABQAAAG93bmVyFQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADAYAAAB0b2tlbnMQAhQAAgAAAAgAAAB0b2tlbl9pZB0ADAAAAHRva2VuX2Ftb3VudBslAAAA";
export type IdentityRegistryError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { UnVerifiedIdentity: Record<string, never> }
	| { InCompliantTransfer: Record<string, never> }
	| { CallContractError: Record<string, never> }
	| { PausedToken: Record<string, never> }
	| { InvalidAmount: Record<string, never> }
	| { InvalidAddress: Record<string, never> }
	| { RecoveredAddress: Record<string, never> }
	| { SecurityNotSet: Record<string, never> };
export const identityRegistryErrorSchemaBase64 =
	"FQ0AAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDgAAAEludmFsaWRUb2tlbklkAhEAAABJbnN1ZmZpY2llbnRGdW5kcwIMAAAAVW5hdXRob3JpemVkAhIAAABVblZlcmlmaWVkSWRlbnRpdHkCEwAAAEluQ29tcGxpYW50VHJhbnNmZXICEQAAAENhbGxDb250cmFjdEVycm9yAgsAAABQYXVzZWRUb2tlbgINAAAASW52YWxpZEFtb3VudAIOAAAASW52YWxpZEFkZHJlc3MCEAAAAFJlY292ZXJlZEFkZHJlc3MCDgAAAFNlY3VyaXR5Tm90U2V0Ag==";
export type IdentityRegistryResponse =
	| { None: Record<string, never> }
	| { Some: [{ index: number; subindex: number }] };
export const identityRegistryResponseSchemaBase64 = "FQIAAAAEAAAATm9uZQIEAAAAU29tZQEBAAAADA==";
export type IsAgentError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { UnVerifiedIdentity: Record<string, never> }
	| { InCompliantTransfer: Record<string, never> }
	| { CallContractError: Record<string, never> }
	| { PausedToken: Record<string, never> }
	| { InvalidAmount: Record<string, never> }
	| { InvalidAddress: Record<string, never> }
	| { RecoveredAddress: Record<string, never> }
	| { SecurityNotSet: Record<string, never> };
export const isAgentErrorSchemaBase64 =
	"FQ0AAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDgAAAEludmFsaWRUb2tlbklkAhEAAABJbnN1ZmZpY2llbnRGdW5kcwIMAAAAVW5hdXRob3JpemVkAhIAAABVblZlcmlmaWVkSWRlbnRpdHkCEwAAAEluQ29tcGxpYW50VHJhbnNmZXICEQAAAENhbGxDb250cmFjdEVycm9yAgsAAABQYXVzZWRUb2tlbgINAAAASW52YWxpZEFtb3VudAIOAAAASW52YWxpZEFkZHJlc3MCEAAAAFJlY292ZXJlZEFkZHJlc3MCDgAAAFNlY3VyaXR5Tm90U2V0Ag==";
export type IsAgentRequest = {
	address: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
	roles: Array<
		| { SetIdentityRegistry: Record<string, never> }
		| { SetCompliance: Record<string, never> }
		| { AddAgent: Record<string, never> }
		| { Mint: Record<string, never> }
		| { ForcedBurn: Record<string, never> }
		| { ForcedTransfer: Record<string, never> }
		| { Freeze: Record<string, never> }
		| { UnFreeze: Record<string, never> }
		| { HolderRecovery: Record<string, never> }
		| { Pause: Record<string, never> }
		| { UnPause: Record<string, never> }
		| { Operator: Record<string, never> }
		| { SetTokenMetadata: Record<string, never> }
	>;
};
export const isAgentRequestSchemaBase64 =
	"FAACAAAABwAAAGFkZHJlc3MVAgAAAAcAAABBY2NvdW50AQEAAAALCAAAAENvbnRyYWN0AQEAAAAMBQAAAHJvbGVzEAIVDQAAABMAAABTZXRJZGVudGl0eVJlZ2lzdHJ5Ag0AAABTZXRDb21wbGlhbmNlAggAAABBZGRBZ2VudAIEAAAATWludAIKAAAARm9yY2VkQnVybgIOAAAARm9yY2VkVHJhbnNmZXICBgAAAEZyZWV6ZQIIAAAAVW5GcmVlemUCDgAAAEhvbGRlclJlY292ZXJ5AgUAAABQYXVzZQIHAAAAVW5QYXVzZQIIAAAAT3BlcmF0b3ICEAAAAFNldFRva2VuTWV0YWRhdGEC";
export type IsAgentResponse = boolean;
export const isAgentResponseSchemaBase64 = "AQ==";
export type IsPausedError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { UnVerifiedIdentity: Record<string, never> }
	| { InCompliantTransfer: Record<string, never> }
	| { CallContractError: Record<string, never> }
	| { PausedToken: Record<string, never> }
	| { InvalidAmount: Record<string, never> }
	| { InvalidAddress: Record<string, never> }
	| { RecoveredAddress: Record<string, never> }
	| { SecurityNotSet: Record<string, never> };
export const isPausedErrorSchemaBase64 =
	"FQ0AAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDgAAAEludmFsaWRUb2tlbklkAhEAAABJbnN1ZmZpY2llbnRGdW5kcwIMAAAAVW5hdXRob3JpemVkAhIAAABVblZlcmlmaWVkSWRlbnRpdHkCEwAAAEluQ29tcGxpYW50VHJhbnNmZXICEQAAAENhbGxDb250cmFjdEVycm9yAgsAAABQYXVzZWRUb2tlbgINAAAASW52YWxpZEFtb3VudAIOAAAASW52YWxpZEFkZHJlc3MCEAAAAFJlY292ZXJlZEFkZHJlc3MCDgAAAFNlY3VyaXR5Tm90U2V0Ag==";
export type IsPausedRequest = { tokens: Array<{ token_id: string }> };
export const isPausedRequestSchemaBase64 = "FAABAAAABgAAAHRva2VucxACFAABAAAACAAAAHRva2VuX2lkHQA=";
export type IsPausedResponse = { tokens: Array<boolean> };
export const isPausedResponseSchemaBase64 = "FAABAAAABgAAAHRva2VucxACAQ==";
export type MintError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { UnVerifiedIdentity: Record<string, never> }
	| { InCompliantTransfer: Record<string, never> }
	| { CallContractError: Record<string, never> }
	| { PausedToken: Record<string, never> }
	| { InvalidAmount: Record<string, never> }
	| { InvalidAddress: Record<string, never> }
	| { RecoveredAddress: Record<string, never> }
	| { SecurityNotSet: Record<string, never> };
export const mintErrorSchemaBase64 =
	"FQ0AAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDgAAAEludmFsaWRUb2tlbklkAhEAAABJbnN1ZmZpY2llbnRGdW5kcwIMAAAAVW5hdXRob3JpemVkAhIAAABVblZlcmlmaWVkSWRlbnRpdHkCEwAAAEluQ29tcGxpYW50VHJhbnNmZXICEQAAAENhbGxDb250cmFjdEVycm9yAgsAAABQYXVzZWRUb2tlbgINAAAASW52YWxpZEFtb3VudAIOAAAASW52YWxpZEFkZHJlc3MCEAAAAFJlY292ZXJlZEFkZHJlc3MCDgAAAFNlY3VyaXR5Tm90U2V0Ag==";
export type MintRequest = {
	token_id: string;
	owners: Array<{
		address: { Account: [string] } | { Contract: [{ index: number; subindex: number }, string] };
		amount: { frozen: string; un_frozen: string };
	}>;
};
export const mintRequestSchemaBase64 =
	"FAACAAAACAAAAHRva2VuX2lkHQAGAAAAb3duZXJzEAIUAAIAAAAHAAAAYWRkcmVzcxUCAAAABwAAAEFjY291bnQBAQAAAAsIAAAAQ29udHJhY3QBAgAAAAwWAQYAAABhbW91bnQUAAIAAAAGAAAAZnJvemVuGyUAAAAJAAAAdW5fZnJvemVuGyUAAAA=";
export type OperatorOfError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { UnVerifiedIdentity: Record<string, never> }
	| { InCompliantTransfer: Record<string, never> }
	| { CallContractError: Record<string, never> }
	| { PausedToken: Record<string, never> }
	| { InvalidAmount: Record<string, never> }
	| { InvalidAddress: Record<string, never> }
	| { RecoveredAddress: Record<string, never> }
	| { SecurityNotSet: Record<string, never> };
export const operatorOfErrorSchemaBase64 =
	"FQ0AAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDgAAAEludmFsaWRUb2tlbklkAhEAAABJbnN1ZmZpY2llbnRGdW5kcwIMAAAAVW5hdXRob3JpemVkAhIAAABVblZlcmlmaWVkSWRlbnRpdHkCEwAAAEluQ29tcGxpYW50VHJhbnNmZXICEQAAAENhbGxDb250cmFjdEVycm9yAgsAAABQYXVzZWRUb2tlbgINAAAASW52YWxpZEFtb3VudAIOAAAASW52YWxpZEFkZHJlc3MCEAAAAFJlY292ZXJlZEFkZHJlc3MCDgAAAFNlY3VyaXR5Tm90U2V0Ag==";
export type OperatorOfRequest = Array<{
	owner: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
	address: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
}>;
export const operatorOfRequestSchemaBase64 =
	"EAEUAAIAAAAFAAAAb3duZXIVAgAAAAcAAABBY2NvdW50AQEAAAALCAAAAENvbnRyYWN0AQEAAAAMBwAAAGFkZHJlc3MVAgAAAAcAAABBY2NvdW50AQEAAAALCAAAAENvbnRyYWN0AQEAAAAM";
export type OperatorOfResponse = Array<boolean>;
export const operatorOfResponseSchemaBase64 = "EAEB";
export type PauseError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { UnVerifiedIdentity: Record<string, never> }
	| { InCompliantTransfer: Record<string, never> }
	| { CallContractError: Record<string, never> }
	| { PausedToken: Record<string, never> }
	| { InvalidAmount: Record<string, never> }
	| { InvalidAddress: Record<string, never> }
	| { RecoveredAddress: Record<string, never> }
	| { SecurityNotSet: Record<string, never> };
export const pauseErrorSchemaBase64 =
	"FQ0AAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDgAAAEludmFsaWRUb2tlbklkAhEAAABJbnN1ZmZpY2llbnRGdW5kcwIMAAAAVW5hdXRob3JpemVkAhIAAABVblZlcmlmaWVkSWRlbnRpdHkCEwAAAEluQ29tcGxpYW50VHJhbnNmZXICEQAAAENhbGxDb250cmFjdEVycm9yAgsAAABQYXVzZWRUb2tlbgINAAAASW52YWxpZEFtb3VudAIOAAAASW52YWxpZEFkZHJlc3MCEAAAAFJlY292ZXJlZEFkZHJlc3MCDgAAAFNlY3VyaXR5Tm90U2V0Ag==";
export type PauseRequest = { tokens: Array<{ token_id: string }> };
export const pauseRequestSchemaBase64 = "FAABAAAABgAAAHRva2VucxACFAABAAAACAAAAHRva2VuX2lkHQA=";
export type RecoverError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { UnVerifiedIdentity: Record<string, never> }
	| { InCompliantTransfer: Record<string, never> }
	| { CallContractError: Record<string, never> }
	| { PausedToken: Record<string, never> }
	| { InvalidAmount: Record<string, never> }
	| { InvalidAddress: Record<string, never> }
	| { RecoveredAddress: Record<string, never> }
	| { SecurityNotSet: Record<string, never> };
export const recoverErrorSchemaBase64 =
	"FQ0AAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDgAAAEludmFsaWRUb2tlbklkAhEAAABJbnN1ZmZpY2llbnRGdW5kcwIMAAAAVW5hdXRob3JpemVkAhIAAABVblZlcmlmaWVkSWRlbnRpdHkCEwAAAEluQ29tcGxpYW50VHJhbnNmZXICEQAAAENhbGxDb250cmFjdEVycm9yAgsAAABQYXVzZWRUb2tlbgINAAAASW52YWxpZEFtb3VudAIOAAAASW52YWxpZEFkZHJlc3MCEAAAAFJlY292ZXJlZEFkZHJlc3MCDgAAAFNlY3VyaXR5Tm90U2V0Ag==";
export type RecoverRequest = {
	lost_account: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
	new_account: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
};
export const recoverRequestSchemaBase64 =
	"FAACAAAADAAAAGxvc3RfYWNjb3VudBUCAAAABwAAAEFjY291bnQBAQAAAAsIAAAAQ29udHJhY3QBAQAAAAwLAAAAbmV3X2FjY291bnQVAgAAAAcAAABBY2NvdW50AQEAAAALCAAAAENvbnRyYWN0AQEAAAAM";
export type RecoveryAddressError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { UnVerifiedIdentity: Record<string, never> }
	| { InCompliantTransfer: Record<string, never> }
	| { CallContractError: Record<string, never> }
	| { PausedToken: Record<string, never> }
	| { InvalidAmount: Record<string, never> }
	| { InvalidAddress: Record<string, never> }
	| { RecoveredAddress: Record<string, never> }
	| { SecurityNotSet: Record<string, never> };
export const recoveryAddressErrorSchemaBase64 =
	"FQ0AAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDgAAAEludmFsaWRUb2tlbklkAhEAAABJbnN1ZmZpY2llbnRGdW5kcwIMAAAAVW5hdXRob3JpemVkAhIAAABVblZlcmlmaWVkSWRlbnRpdHkCEwAAAEluQ29tcGxpYW50VHJhbnNmZXICEQAAAENhbGxDb250cmFjdEVycm9yAgsAAABQYXVzZWRUb2tlbgINAAAASW52YWxpZEFtb3VudAIOAAAASW52YWxpZEFkZHJlc3MCEAAAAFJlY292ZXJlZEFkZHJlc3MCDgAAAFNlY3VyaXR5Tm90U2V0Ag==";
export type RecoveryAddressRequest = { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
export const recoveryAddressRequestSchemaBase64 = "FQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADA==";
export type RecoveryAddressResponse =
	| { None: Record<string, never> }
	| { Some: [{ Account: [string] } | { Contract: [{ index: number; subindex: number }] }] };
export const recoveryAddressResponseSchemaBase64 =
	"FQIAAAAEAAAATm9uZQIEAAAAU29tZQEBAAAAFQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADA==";
export type RemoveAgentError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { UnVerifiedIdentity: Record<string, never> }
	| { InCompliantTransfer: Record<string, never> }
	| { CallContractError: Record<string, never> }
	| { PausedToken: Record<string, never> }
	| { InvalidAmount: Record<string, never> }
	| { InvalidAddress: Record<string, never> }
	| { RecoveredAddress: Record<string, never> }
	| { SecurityNotSet: Record<string, never> };
export const removeAgentErrorSchemaBase64 =
	"FQ0AAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDgAAAEludmFsaWRUb2tlbklkAhEAAABJbnN1ZmZpY2llbnRGdW5kcwIMAAAAVW5hdXRob3JpemVkAhIAAABVblZlcmlmaWVkSWRlbnRpdHkCEwAAAEluQ29tcGxpYW50VHJhbnNmZXICEQAAAENhbGxDb250cmFjdEVycm9yAgsAAABQYXVzZWRUb2tlbgINAAAASW52YWxpZEFtb3VudAIOAAAASW52YWxpZEFkZHJlc3MCEAAAAFJlY292ZXJlZEFkZHJlc3MCDgAAAFNlY3VyaXR5Tm90U2V0Ag==";
export type RemoveAgentRequest = { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
export const removeAgentRequestSchemaBase64 = "FQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADA==";
export type SetComplianceError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { UnVerifiedIdentity: Record<string, never> }
	| { InCompliantTransfer: Record<string, never> }
	| { CallContractError: Record<string, never> }
	| { PausedToken: Record<string, never> }
	| { InvalidAmount: Record<string, never> }
	| { InvalidAddress: Record<string, never> }
	| { RecoveredAddress: Record<string, never> }
	| { SecurityNotSet: Record<string, never> };
export const setComplianceErrorSchemaBase64 =
	"FQ0AAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDgAAAEludmFsaWRUb2tlbklkAhEAAABJbnN1ZmZpY2llbnRGdW5kcwIMAAAAVW5hdXRob3JpemVkAhIAAABVblZlcmlmaWVkSWRlbnRpdHkCEwAAAEluQ29tcGxpYW50VHJhbnNmZXICEQAAAENhbGxDb250cmFjdEVycm9yAgsAAABQYXVzZWRUb2tlbgINAAAASW52YWxpZEFtb3VudAIOAAAASW52YWxpZEFkZHJlc3MCEAAAAFJlY292ZXJlZEFkZHJlc3MCDgAAAFNlY3VyaXR5Tm90U2V0Ag==";
export type SetComplianceRequest = { index: number; subindex: number };
export const setComplianceRequestSchemaBase64 = "DA==";
export type SetIdentityRegistryError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { UnVerifiedIdentity: Record<string, never> }
	| { InCompliantTransfer: Record<string, never> }
	| { CallContractError: Record<string, never> }
	| { PausedToken: Record<string, never> }
	| { InvalidAmount: Record<string, never> }
	| { InvalidAddress: Record<string, never> }
	| { RecoveredAddress: Record<string, never> }
	| { SecurityNotSet: Record<string, never> };
export const setIdentityRegistryErrorSchemaBase64 =
	"FQ0AAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDgAAAEludmFsaWRUb2tlbklkAhEAAABJbnN1ZmZpY2llbnRGdW5kcwIMAAAAVW5hdXRob3JpemVkAhIAAABVblZlcmlmaWVkSWRlbnRpdHkCEwAAAEluQ29tcGxpYW50VHJhbnNmZXICEQAAAENhbGxDb250cmFjdEVycm9yAgsAAABQYXVzZWRUb2tlbgINAAAASW52YWxpZEFtb3VudAIOAAAASW52YWxpZEFkZHJlc3MCEAAAAFJlY292ZXJlZEFkZHJlc3MCDgAAAFNlY3VyaXR5Tm90U2V0Ag==";
export type SetIdentityRegistryRequest = { index: number; subindex: number };
export const setIdentityRegistryRequestSchemaBase64 = "DA==";
export type SetTokenMetadataError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { UnVerifiedIdentity: Record<string, never> }
	| { InCompliantTransfer: Record<string, never> }
	| { CallContractError: Record<string, never> }
	| { PausedToken: Record<string, never> }
	| { InvalidAmount: Record<string, never> }
	| { InvalidAddress: Record<string, never> }
	| { RecoveredAddress: Record<string, never> }
	| { SecurityNotSet: Record<string, never> };
export const setTokenMetadataErrorSchemaBase64 =
	"FQ0AAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDgAAAEludmFsaWRUb2tlbklkAhEAAABJbnN1ZmZpY2llbnRGdW5kcwIMAAAAVW5hdXRob3JpemVkAhIAAABVblZlcmlmaWVkSWRlbnRpdHkCEwAAAEluQ29tcGxpYW50VHJhbnNmZXICEQAAAENhbGxDb250cmFjdEVycm9yAgsAAABQYXVzZWRUb2tlbgINAAAASW52YWxpZEFtb3VudAIOAAAASW52YWxpZEFkZHJlc3MCEAAAAFJlY292ZXJlZEFkZHJlc3MCDgAAAFNlY3VyaXR5Tm90U2V0Ag==";
export type SetTokenMetadataRequest = {
	params: Array<{
		token_id: string;
		token_metadata: { url: string; hash: { None: Record<string, never> } | { Some: [string] } };
	}>;
};
export const setTokenMetadataRequestSchemaBase64 =
	"FAABAAAABgAAAHBhcmFtcxACFAACAAAACAAAAHRva2VuX2lkHQAOAAAAdG9rZW5fbWV0YWRhdGEUAAIAAAADAAAAdXJsFgIEAAAAaGFzaBUCAAAABAAAAE5vbmUCBAAAAFNvbWUBAQAAABYC";
export type SupportsError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { UnVerifiedIdentity: Record<string, never> }
	| { InCompliantTransfer: Record<string, never> }
	| { CallContractError: Record<string, never> }
	| { PausedToken: Record<string, never> }
	| { InvalidAmount: Record<string, never> }
	| { InvalidAddress: Record<string, never> }
	| { RecoveredAddress: Record<string, never> }
	| { SecurityNotSet: Record<string, never> };
export const supportsErrorSchemaBase64 =
	"FQ0AAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDgAAAEludmFsaWRUb2tlbklkAhEAAABJbnN1ZmZpY2llbnRGdW5kcwIMAAAAVW5hdXRob3JpemVkAhIAAABVblZlcmlmaWVkSWRlbnRpdHkCEwAAAEluQ29tcGxpYW50VHJhbnNmZXICEQAAAENhbGxDb250cmFjdEVycm9yAgsAAABQYXVzZWRUb2tlbgINAAAASW52YWxpZEFtb3VudAIOAAAASW52YWxpZEFkZHJlc3MCEAAAAFJlY292ZXJlZEFkZHJlc3MCDgAAAFNlY3VyaXR5Tm90U2V0Ag==";
export type SupportsRequest = Array<string>;
export const supportsRequestSchemaBase64 = "EAEWAA==";
export type SupportsResponse = Array<
	| { NoSupport: Record<string, never> }
	| { Support: Record<string, never> }
	| { SupportBy: [Array<{ index: number; subindex: number }>] }
>;
export const supportsResponseSchemaBase64 = "EAEVAwAAAAkAAABOb1N1cHBvcnQCBwAAAFN1cHBvcnQCCQAAAFN1cHBvcnRCeQEBAAAAEAAM";
export type TokenMetadataError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { UnVerifiedIdentity: Record<string, never> }
	| { InCompliantTransfer: Record<string, never> }
	| { CallContractError: Record<string, never> }
	| { PausedToken: Record<string, never> }
	| { InvalidAmount: Record<string, never> }
	| { InvalidAddress: Record<string, never> }
	| { RecoveredAddress: Record<string, never> }
	| { SecurityNotSet: Record<string, never> };
export const tokenMetadataErrorSchemaBase64 =
	"FQ0AAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDgAAAEludmFsaWRUb2tlbklkAhEAAABJbnN1ZmZpY2llbnRGdW5kcwIMAAAAVW5hdXRob3JpemVkAhIAAABVblZlcmlmaWVkSWRlbnRpdHkCEwAAAEluQ29tcGxpYW50VHJhbnNmZXICEQAAAENhbGxDb250cmFjdEVycm9yAgsAAABQYXVzZWRUb2tlbgINAAAASW52YWxpZEFtb3VudAIOAAAASW52YWxpZEFkZHJlc3MCEAAAAFJlY292ZXJlZEFkZHJlc3MCDgAAAFNlY3VyaXR5Tm90U2V0Ag==";
export type TokenMetadataRequest = Array<string>;
export const tokenMetadataRequestSchemaBase64 = "EAEdAA==";
export type TokenMetadataResponse = Array<{ url: string; hash: { None: Record<string, never> } | { Some: [string] } }>;
export const tokenMetadataResponseSchemaBase64 =
	"EAEUAAIAAAADAAAAdXJsFgEEAAAAaGFzaBUCAAAABAAAAE5vbmUCBAAAAFNvbWUBAQAAAB4gAAAA";
export type TransferError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { UnVerifiedIdentity: Record<string, never> }
	| { InCompliantTransfer: Record<string, never> }
	| { CallContractError: Record<string, never> }
	| { PausedToken: Record<string, never> }
	| { InvalidAmount: Record<string, never> }
	| { InvalidAddress: Record<string, never> }
	| { RecoveredAddress: Record<string, never> }
	| { SecurityNotSet: Record<string, never> };
export const transferErrorSchemaBase64 =
	"FQ0AAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDgAAAEludmFsaWRUb2tlbklkAhEAAABJbnN1ZmZpY2llbnRGdW5kcwIMAAAAVW5hdXRob3JpemVkAhIAAABVblZlcmlmaWVkSWRlbnRpdHkCEwAAAEluQ29tcGxpYW50VHJhbnNmZXICEQAAAENhbGxDb250cmFjdEVycm9yAgsAAABQYXVzZWRUb2tlbgINAAAASW52YWxpZEFtb3VudAIOAAAASW52YWxpZEFkZHJlc3MCEAAAAFJlY292ZXJlZEFkZHJlc3MCDgAAAFNlY3VyaXR5Tm90U2V0Ag==";
export type TransferRequest = Array<{
	token_id: string;
	amount: string;
	from: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
	to: { Account: [string] } | { Contract: [{ index: number; subindex: number }, string] };
	data: string;
}>;
export const transferRequestSchemaBase64 =
	"EAEUAAUAAAAIAAAAdG9rZW5faWQdAAYAAABhbW91bnQbJQAAAAQAAABmcm9tFQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADAIAAAB0bxUCAAAABwAAAEFjY291bnQBAQAAAAsIAAAAQ29udHJhY3QBAgAAAAwWAQQAAABkYXRhHQE=";
export type UnFreezeError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { UnVerifiedIdentity: Record<string, never> }
	| { InCompliantTransfer: Record<string, never> }
	| { CallContractError: Record<string, never> }
	| { PausedToken: Record<string, never> }
	| { InvalidAmount: Record<string, never> }
	| { InvalidAddress: Record<string, never> }
	| { RecoveredAddress: Record<string, never> }
	| { SecurityNotSet: Record<string, never> };
export const unFreezeErrorSchemaBase64 =
	"FQ0AAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDgAAAEludmFsaWRUb2tlbklkAhEAAABJbnN1ZmZpY2llbnRGdW5kcwIMAAAAVW5hdXRob3JpemVkAhIAAABVblZlcmlmaWVkSWRlbnRpdHkCEwAAAEluQ29tcGxpYW50VHJhbnNmZXICEQAAAENhbGxDb250cmFjdEVycm9yAgsAAABQYXVzZWRUb2tlbgINAAAASW52YWxpZEFtb3VudAIOAAAASW52YWxpZEFkZHJlc3MCEAAAAFJlY292ZXJlZEFkZHJlc3MCDgAAAFNlY3VyaXR5Tm90U2V0Ag==";
export type UnFreezeRequest = {
	owner: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
	tokens: Array<{ token_id: string; token_amount: string }>;
};
export const unFreezeRequestSchemaBase64 =
	"FAACAAAABQAAAG93bmVyFQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADAYAAAB0b2tlbnMQAhQAAgAAAAgAAAB0b2tlbl9pZB0ADAAAAHRva2VuX2Ftb3VudBslAAAA";
export type UnPauseError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { UnVerifiedIdentity: Record<string, never> }
	| { InCompliantTransfer: Record<string, never> }
	| { CallContractError: Record<string, never> }
	| { PausedToken: Record<string, never> }
	| { InvalidAmount: Record<string, never> }
	| { InvalidAddress: Record<string, never> }
	| { RecoveredAddress: Record<string, never> }
	| { SecurityNotSet: Record<string, never> };
export const unPauseErrorSchemaBase64 =
	"FQ0AAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDgAAAEludmFsaWRUb2tlbklkAhEAAABJbnN1ZmZpY2llbnRGdW5kcwIMAAAAVW5hdXRob3JpemVkAhIAAABVblZlcmlmaWVkSWRlbnRpdHkCEwAAAEluQ29tcGxpYW50VHJhbnNmZXICEQAAAENhbGxDb250cmFjdEVycm9yAgsAAABQYXVzZWRUb2tlbgINAAAASW52YWxpZEFtb3VudAIOAAAASW52YWxpZEFkZHJlc3MCEAAAAFJlY292ZXJlZEFkZHJlc3MCDgAAAFNlY3VyaXR5Tm90U2V0Ag==";
export type UnPauseRequest = { tokens: Array<{ token_id: string }> };
export const unPauseRequestSchemaBase64 = "FAABAAAABgAAAHRva2VucxACFAABAAAACAAAAHRva2VuX2lkHQA=";
export type UpdateOperatorError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { UnVerifiedIdentity: Record<string, never> }
	| { InCompliantTransfer: Record<string, never> }
	| { CallContractError: Record<string, never> }
	| { PausedToken: Record<string, never> }
	| { InvalidAmount: Record<string, never> }
	| { InvalidAddress: Record<string, never> }
	| { RecoveredAddress: Record<string, never> }
	| { SecurityNotSet: Record<string, never> };
export const updateOperatorErrorSchemaBase64 =
	"FQ0AAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDgAAAEludmFsaWRUb2tlbklkAhEAAABJbnN1ZmZpY2llbnRGdW5kcwIMAAAAVW5hdXRob3JpemVkAhIAAABVblZlcmlmaWVkSWRlbnRpdHkCEwAAAEluQ29tcGxpYW50VHJhbnNmZXICEQAAAENhbGxDb250cmFjdEVycm9yAgsAAABQYXVzZWRUb2tlbgINAAAASW52YWxpZEFtb3VudAIOAAAASW52YWxpZEFkZHJlc3MCEAAAAFJlY292ZXJlZEFkZHJlc3MCDgAAAFNlY3VyaXR5Tm90U2V0Ag==";
export type UpdateOperatorRequest = Array<{
	update: { Remove: Record<string, never> } | { Add: Record<string, never> };
	operator: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
}>;
export const updateOperatorRequestSchemaBase64 =
	"EAEUAAIAAAAGAAAAdXBkYXRlFQIAAAAGAAAAUmVtb3ZlAgMAAABBZGQCCAAAAG9wZXJhdG9yFQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADA==";
export type event =
	| { TokenRemoved: [string] }
	| {
			Recovered: [
				{
					lost_account: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
					new_account: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
				},
			];
	  }
	| { IdentityRegistryAdded: [{ index: number; subindex: number }] }
	| { ComplianceAdded: [{ index: number; subindex: number }] }
	| { UnPaused: [{ token_id: string }] }
	| { Paused: [{ token_id: string }] }
	| {
			TokenFrozen: [
				{
					token_id: string;
					amount: string;
					address: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
				},
			];
	  }
	| {
			TokenUnFrozen: [
				{
					token_id: string;
					amount: string;
					address: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
				},
			];
	  }
	| {
			AgentRemoved: [
				{
					agent: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
					roles: Array<
						| { SetIdentityRegistry: Record<string, never> }
						| { SetCompliance: Record<string, never> }
						| { AddAgent: Record<string, never> }
						| { Mint: Record<string, never> }
						| { ForcedBurn: Record<string, never> }
						| { ForcedTransfer: Record<string, never> }
						| { Freeze: Record<string, never> }
						| { UnFreeze: Record<string, never> }
						| { HolderRecovery: Record<string, never> }
						| { Pause: Record<string, never> }
						| { UnPause: Record<string, never> }
						| { Operator: Record<string, never> }
						| { SetTokenMetadata: Record<string, never> }
					>;
				},
			];
	  }
	| {
			AgentAdded: [
				{
					agent: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
					roles: Array<
						| { SetIdentityRegistry: Record<string, never> }
						| { SetCompliance: Record<string, never> }
						| { AddAgent: Record<string, never> }
						| { Mint: Record<string, never> }
						| { ForcedBurn: Record<string, never> }
						| { ForcedTransfer: Record<string, never> }
						| { Freeze: Record<string, never> }
						| { UnFreeze: Record<string, never> }
						| { HolderRecovery: Record<string, never> }
						| { Pause: Record<string, never> }
						| { UnPause: Record<string, never> }
						| { Operator: Record<string, never> }
						| { SetTokenMetadata: Record<string, never> }
					>;
				},
			];
	  }
	| {
			TokenMetadata: {
				token_id: string;
				metadata_url: { url: string; hash: { None: Record<string, never> } | { Some: [string] } };
			};
	  }
	| {
			UpdateOperator: {
				update: { Remove: Record<string, never> } | { Add: Record<string, never> };
				owner: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
				operator: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
			};
	  }
	| {
			Burn: {
				token_id: string;
				amount: string;
				owner: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
			};
	  }
	| {
			Mint: {
				token_id: string;
				amount: string;
				owner: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
			};
	  }
	| {
			Transfer: {
				token_id: string;
				amount: string;
				from: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
				to: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
			};
	  };
export const eventSchemaBase64 =
	"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";
export const ENTRYPOINTS: Record<string, EntrypointName.Type> = {
	addAgent: EntrypointName.fromString("addAgent"),
	balanceOf: EntrypointName.fromString("balanceOf"),
	balanceOfFrozen: EntrypointName.fromString("balanceOfFrozen"),
	balanceOfUnFrozen: EntrypointName.fromString("balanceOfUnFrozen"),
	burn: EntrypointName.fromString("burn"),
	compliance: EntrypointName.fromString("compliance"),
	freeze: EntrypointName.fromString("freeze"),
	identityRegistry: EntrypointName.fromString("identityRegistry"),
	isAgent: EntrypointName.fromString("isAgent"),
	isPaused: EntrypointName.fromString("isPaused"),
	mint: EntrypointName.fromString("mint"),
	operatorOf: EntrypointName.fromString("operatorOf"),
	pause: EntrypointName.fromString("pause"),
	recover: EntrypointName.fromString("recover"),
	recoveryAddress: EntrypointName.fromString("recoveryAddress"),
	removeAgent: EntrypointName.fromString("removeAgent"),
	setCompliance: EntrypointName.fromString("setCompliance"),
	setIdentityRegistry: EntrypointName.fromString("setIdentityRegistry"),
	setTokenMetadata: EntrypointName.fromString("setTokenMetadata"),
	supports: EntrypointName.fromString("supports"),
	tokenMetadata: EntrypointName.fromString("tokenMetadata"),
	transfer: EntrypointName.fromString("transfer"),
	unFreeze: EntrypointName.fromString("unFreeze"),
	unPause: EntrypointName.fromString("unPause"),
	updateOperator: EntrypointName.fromString("updateOperator"),
};
export const ENTRYPOINT_DISPLAY_NAMES: Record<string, string> = {
	addAgent: "Add Agent",
	balanceOf: "Balance Of",
	balanceOfFrozen: "Balance Of Frozen",
	balanceOfUnFrozen: "Balance Of Un Frozen",
	burn: "Burn",
	compliance: "Compliance",
	freeze: "Freeze",
	identityRegistry: "Identity Registry",
	isAgent: "Is Agent",
	isPaused: "Is Paused",
	mint: "Mint",
	operatorOf: "Operator Of",
	pause: "Pause",
	recover: "Recover",
	recoveryAddress: "Recovery Address",
	removeAgent: "Remove Agent",
	setCompliance: "Set Compliance",
	setIdentityRegistry: "Set Identity Registry",
	setTokenMetadata: "Set Token Metadata",
	supports: "Supports",
	tokenMetadata: "Token Metadata",
	transfer: "Transfer",
	unFreeze: "Un Freeze",
	unPause: "Un Pause",
	updateOperator: "Update Operator",
};
export const securitySftSingle = {
	init: new InitMethod<initRequest>(
		ModuleReference.fromHexString("9a87089bb02e4e6da59217b54d2f3d81bcf41c5e61e8f89a2e4c5f1a0c7f4c81"),
		ContractName.fromString("security_sft_single"),
		initRequestSchemaBase64,
	),
	addAgent: new ReceiveMethod<AddAgentRequest, never, AddAgentError>(
		ContractName.fromString("security_sft_single"),
		EntrypointName.fromString("addAgent"),
		addAgentRequestSchemaBase64,
		undefined,
		addAgentErrorSchemaBase64,
	),
	balanceOf: new ReceiveMethod<BalanceOfRequest, BalanceOfResponse, BalanceOfError>(
		ContractName.fromString("security_sft_single"),
		EntrypointName.fromString("balanceOf"),
		balanceOfRequestSchemaBase64,
		balanceOfResponseSchemaBase64,
		balanceOfErrorSchemaBase64,
	),
	balanceOfFrozen: new ReceiveMethod<BalanceOfFrozenRequest, BalanceOfFrozenResponse, BalanceOfFrozenError>(
		ContractName.fromString("security_sft_single"),
		EntrypointName.fromString("balanceOfFrozen"),
		balanceOfFrozenRequestSchemaBase64,
		balanceOfFrozenResponseSchemaBase64,
		balanceOfFrozenErrorSchemaBase64,
	),
	balanceOfUnFrozen: new ReceiveMethod<BalanceOfUnFrozenRequest, BalanceOfUnFrozenResponse, BalanceOfUnFrozenError>(
		ContractName.fromString("security_sft_single"),
		EntrypointName.fromString("balanceOfUnFrozen"),
		balanceOfUnFrozenRequestSchemaBase64,
		balanceOfUnFrozenResponseSchemaBase64,
		balanceOfUnFrozenErrorSchemaBase64,
	),
	burn: new ReceiveMethod<BurnRequest, never, BurnError>(
		ContractName.fromString("security_sft_single"),
		EntrypointName.fromString("burn"),
		burnRequestSchemaBase64,
		undefined,
		burnErrorSchemaBase64,
	),
	compliance: new ReceiveMethod<void, ComplianceResponse>(
		ContractName.fromString("security_sft_single"),
		EntrypointName.fromString("compliance"),
		undefined,
		complianceResponseSchemaBase64,
	),
	freeze: new ReceiveMethod<FreezeRequest, never, FreezeError>(
		ContractName.fromString("security_sft_single"),
		EntrypointName.fromString("freeze"),
		freezeRequestSchemaBase64,
		undefined,
		freezeErrorSchemaBase64,
	),
	identityRegistry: new ReceiveMethod<never, IdentityRegistryResponse, IdentityRegistryError>(
		ContractName.fromString("security_sft_single"),
		EntrypointName.fromString("identityRegistry"),
		undefined,
		identityRegistryResponseSchemaBase64,
		identityRegistryErrorSchemaBase64,
	),
	isAgent: new ReceiveMethod<IsAgentRequest, IsAgentResponse, IsAgentError>(
		ContractName.fromString("security_sft_single"),
		EntrypointName.fromString("isAgent"),
		isAgentRequestSchemaBase64,
		isAgentResponseSchemaBase64,
		isAgentErrorSchemaBase64,
	),
	isPaused: new ReceiveMethod<IsPausedRequest, IsPausedResponse, IsPausedError>(
		ContractName.fromString("security_sft_single"),
		EntrypointName.fromString("isPaused"),
		isPausedRequestSchemaBase64,
		isPausedResponseSchemaBase64,
		isPausedErrorSchemaBase64,
	),
	mint: new ReceiveMethod<MintRequest, never, MintError>(
		ContractName.fromString("security_sft_single"),
		EntrypointName.fromString("mint"),
		mintRequestSchemaBase64,
		undefined,
		mintErrorSchemaBase64,
	),
	operatorOf: new ReceiveMethod<OperatorOfRequest, OperatorOfResponse, OperatorOfError>(
		ContractName.fromString("security_sft_single"),
		EntrypointName.fromString("operatorOf"),
		operatorOfRequestSchemaBase64,
		operatorOfResponseSchemaBase64,
		operatorOfErrorSchemaBase64,
	),
	pause: new ReceiveMethod<PauseRequest, never, PauseError>(
		ContractName.fromString("security_sft_single"),
		EntrypointName.fromString("pause"),
		pauseRequestSchemaBase64,
		undefined,
		pauseErrorSchemaBase64,
	),
	recover: new ReceiveMethod<RecoverRequest, never, RecoverError>(
		ContractName.fromString("security_sft_single"),
		EntrypointName.fromString("recover"),
		recoverRequestSchemaBase64,
		undefined,
		recoverErrorSchemaBase64,
	),
	recoveryAddress: new ReceiveMethod<RecoveryAddressRequest, RecoveryAddressResponse, RecoveryAddressError>(
		ContractName.fromString("security_sft_single"),
		EntrypointName.fromString("recoveryAddress"),
		recoveryAddressRequestSchemaBase64,
		recoveryAddressResponseSchemaBase64,
		recoveryAddressErrorSchemaBase64,
	),
	removeAgent: new ReceiveMethod<RemoveAgentRequest, never, RemoveAgentError>(
		ContractName.fromString("security_sft_single"),
		EntrypointName.fromString("removeAgent"),
		removeAgentRequestSchemaBase64,
		undefined,
		removeAgentErrorSchemaBase64,
	),
	setCompliance: new ReceiveMethod<SetComplianceRequest, never, SetComplianceError>(
		ContractName.fromString("security_sft_single"),
		EntrypointName.fromString("setCompliance"),
		setComplianceRequestSchemaBase64,
		undefined,
		setComplianceErrorSchemaBase64,
	),
	setIdentityRegistry: new ReceiveMethod<SetIdentityRegistryRequest, never, SetIdentityRegistryError>(
		ContractName.fromString("security_sft_single"),
		EntrypointName.fromString("setIdentityRegistry"),
		setIdentityRegistryRequestSchemaBase64,
		undefined,
		setIdentityRegistryErrorSchemaBase64,
	),
	setTokenMetadata: new ReceiveMethod<SetTokenMetadataRequest, never, SetTokenMetadataError>(
		ContractName.fromString("security_sft_single"),
		EntrypointName.fromString("setTokenMetadata"),
		setTokenMetadataRequestSchemaBase64,
		undefined,
		setTokenMetadataErrorSchemaBase64,
	),
	supports: new ReceiveMethod<SupportsRequest, SupportsResponse, SupportsError>(
		ContractName.fromString("security_sft_single"),
		EntrypointName.fromString("supports"),
		supportsRequestSchemaBase64,
		supportsResponseSchemaBase64,
		supportsErrorSchemaBase64,
	),
	tokenMetadata: new ReceiveMethod<TokenMetadataRequest, TokenMetadataResponse, TokenMetadataError>(
		ContractName.fromString("security_sft_single"),
		EntrypointName.fromString("tokenMetadata"),
		tokenMetadataRequestSchemaBase64,
		tokenMetadataResponseSchemaBase64,
		tokenMetadataErrorSchemaBase64,
	),
	transfer: new ReceiveMethod<TransferRequest, never, TransferError>(
		ContractName.fromString("security_sft_single"),
		EntrypointName.fromString("transfer"),
		transferRequestSchemaBase64,
		undefined,
		transferErrorSchemaBase64,
	),
	unFreeze: new ReceiveMethod<UnFreezeRequest, never, UnFreezeError>(
		ContractName.fromString("security_sft_single"),
		EntrypointName.fromString("unFreeze"),
		unFreezeRequestSchemaBase64,
		undefined,
		unFreezeErrorSchemaBase64,
	),
	unPause: new ReceiveMethod<UnPauseRequest, never, UnPauseError>(
		ContractName.fromString("security_sft_single"),
		EntrypointName.fromString("unPause"),
		unPauseRequestSchemaBase64,
		undefined,
		unPauseErrorSchemaBase64,
	),
	updateOperator: new ReceiveMethod<UpdateOperatorRequest, never, UpdateOperatorError>(
		ContractName.fromString("security_sft_single"),
		EntrypointName.fromString("updateOperator"),
		updateOperatorRequestSchemaBase64,
		undefined,
		updateOperatorErrorSchemaBase64,
	),
	deserializeEvent: (event: ContractEvent.Type): event => {
		return ContractEvent.parseWithSchemaTypeBase64(event, eventSchemaBase64) as event;
	},
};
export default securitySftSingle;
