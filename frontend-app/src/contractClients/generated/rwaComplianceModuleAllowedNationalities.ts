// This file was generated by the build script. Do not edit it manually.
/* eslint-disable no-mixed-spaces-and-tabs */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* tslint:disable:no-unused-variable */
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
import { ContractEvent, ContractName, EntrypointName, ModuleReference } from "@concordium/web-sdk";
import { InitMethod, ReceiveMethod } from "../GenericContract";
export const CONTRACT_NAME = "rwa_compliance_module_allowed_nationalities";
export type initRequest = { nationalities: Array<string>; identity_registry: { index: number; subindex: number } };
export const initRequestSchemaBase64 = "FAACAAAADQAAAG5hdGlvbmFsaXRpZXMQAhYCEQAAAGlkZW50aXR5X3JlZ2lzdHJ5DA==";
export const initErrorSchemaBase64 =
	"FQcAAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDQAAAEludmFsaWRNb2R1bGUCEQAAAENhbGxDb250cmFjdEVycm9yAgwAAABVbmF1dGhvcml6ZWQCEgAAAEFnZW50QWxyZWFkeUV4aXN0cwINAAAAQWdlbnROb3RGb3VuZAI=";
export type BurnedError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { InvalidModule: Record<string, never> }
	| { CallContractError: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { AgentAlreadyExists: Record<string, never> }
	| { AgentNotFound: Record<string, never> };
export const burnedErrorSchemaBase64 =
	"FQcAAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDQAAAEludmFsaWRNb2R1bGUCEQAAAENhbGxDb250cmFjdEVycm9yAgwAAABVbmF1dGhvcml6ZWQCEgAAAEFnZW50QWxyZWFkeUV4aXN0cwINAAAAQWdlbnROb3RGb3VuZAI=";
export type CanTransferError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { InvalidModule: Record<string, never> }
	| { CallContractError: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { AgentAlreadyExists: Record<string, never> }
	| { AgentNotFound: Record<string, never> };
export const canTransferErrorSchemaBase64 =
	"FQcAAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDQAAAEludmFsaWRNb2R1bGUCEQAAAENhbGxDb250cmFjdEVycm9yAgwAAABVbmF1dGhvcml6ZWQCEgAAAEFnZW50QWxyZWFkeUV4aXN0cwINAAAAQWdlbnROb3RGb3VuZAI=";
export type CanTransferRequest = {
	token_id: { contract: { index: number; subindex: number }; id: string };
	to: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
	amount: string;
};
export const canTransferRequestSchemaBase64 =
	"FAADAAAACAAAAHRva2VuX2lkFAACAAAACAAAAGNvbnRyYWN0DAIAAABpZB0AAgAAAHRvFQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADAYAAABhbW91bnQbJQAAAA==";
export type CanTransferResponse = boolean;
export const canTransferResponseSchemaBase64 = "AQ==";
export type MintedError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { InvalidModule: Record<string, never> }
	| { CallContractError: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { AgentAlreadyExists: Record<string, never> }
	| { AgentNotFound: Record<string, never> };
export const mintedErrorSchemaBase64 =
	"FQcAAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDQAAAEludmFsaWRNb2R1bGUCEQAAAENhbGxDb250cmFjdEVycm9yAgwAAABVbmF1dGhvcml6ZWQCEgAAAEFnZW50QWxyZWFkeUV4aXN0cwINAAAAQWdlbnROb3RGb3VuZAI=";
export type TransferredError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { InvalidModule: Record<string, never> }
	| { CallContractError: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { AgentAlreadyExists: Record<string, never> }
	| { AgentNotFound: Record<string, never> };
export const transferredErrorSchemaBase64 =
	"FQcAAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDQAAAEludmFsaWRNb2R1bGUCEQAAAENhbGxDb250cmFjdEVycm9yAgwAAABVbmF1dGhvcml6ZWQCEgAAAEFnZW50QWxyZWFkeUV4aXN0cwINAAAAQWdlbnROb3RGb3VuZAI=";
export const ENTRYPOINTS: Record<string, EntrypointName.Type> = {
	burned: EntrypointName.fromString("burned"),
	canTransfer: EntrypointName.fromString("canTransfer"),
	minted: EntrypointName.fromString("minted"),
	transferred: EntrypointName.fromString("transferred"),
};
export const ENTRYPOINT_DISPLAY_NAMES: Record<string, string> = {
	burned: "Burned",
	canTransfer: "Can Transfer",
	minted: "Minted",
	transferred: "Transferred",
};
export const rwaComplianceModuleAllowedNationalities = {
	init: new InitMethod<initRequest>(
		ModuleReference.fromHexString("6c02db5525fde23d91a93cb71604078b1f73b9f946901ade4fe9222c542b22bb"),
		ContractName.fromString("rwa_compliance_module_allowed_nationalities"),
		initRequestSchemaBase64,
	),
	burned: new ReceiveMethod<never, never, BurnedError>(
		ContractName.fromString("rwa_compliance_module_allowed_nationalities"),
		EntrypointName.fromString("burned"),
		undefined,
		undefined,
		burnedErrorSchemaBase64,
	),
	canTransfer: new ReceiveMethod<CanTransferRequest, CanTransferResponse, CanTransferError>(
		ContractName.fromString("rwa_compliance_module_allowed_nationalities"),
		EntrypointName.fromString("canTransfer"),
		canTransferRequestSchemaBase64,
		canTransferResponseSchemaBase64,
		canTransferErrorSchemaBase64,
	),
	minted: new ReceiveMethod<never, never, MintedError>(
		ContractName.fromString("rwa_compliance_module_allowed_nationalities"),
		EntrypointName.fromString("minted"),
		undefined,
		undefined,
		mintedErrorSchemaBase64,
	),
	transferred: new ReceiveMethod<never, never, TransferredError>(
		ContractName.fromString("rwa_compliance_module_allowed_nationalities"),
		EntrypointName.fromString("transferred"),
		undefined,
		undefined,
		transferredErrorSchemaBase64,
	),
};
export default rwaComplianceModuleAllowedNationalities;
