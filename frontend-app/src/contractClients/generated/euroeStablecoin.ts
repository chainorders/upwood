// This file was generated by the build script. Do not edit it manually.
/* eslint-disable no-mixed-spaces-and-tabs */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* tslint:disable:no-unused-variable */
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
import { ContractEvent, ContractName, EntrypointName, ModuleReference } from "@concordium/web-sdk";
import { InitMethod, ReceiveMethod } from "../GenericContract";
export const CONTRACT_NAME = "euroe_stablecoin";
export type BalanceOfError =
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| {
			Custom: [
				| { ParseParams: Record<string, never> }
				| { LogFull: Record<string, never> }
				| { LogMalformed: Record<string, never> }
				| { InvalidContractName: Record<string, never> }
				| { ContractOnly: Record<string, never> }
				| { InvokeContractError: Record<string, never> }
				| { TokenAlreadyMinted: Record<string, never> }
				| { MaxSupplyReached: Record<string, never> }
				| { NoBalanceToBurn: Record<string, never> }
				| { ContractPaused: Record<string, never> }
				| { AddressBlocklisted: Record<string, never> }
				| { FailedUpgradeMissingModule: Record<string, never> }
				| { FailedUpgradeMissingContract: Record<string, never> }
				| { FailedUpgradeUnsupportedModuleVersion: Record<string, never> }
				| { MissingAccount: Record<string, never> }
				| { MalformedData: Record<string, never> }
				| { WrongSignature: Record<string, never> }
				| { NonceMismatch: Record<string, never> }
				| { WrongContract: Record<string, never> }
				| { WrongEntryPoint: Record<string, never> }
				| { Expired: Record<string, never> },
			];
	  };
export const balanceOfErrorSchemaBase64 =
	"FQQAAAAOAAAASW52YWxpZFRva2VuSWQCEQAAAEluc3VmZmljaWVudEZ1bmRzAgwAAABVbmF1dGhvcml6ZWQCBgAAAEN1c3RvbQEBAAAAFRUAAAALAAAAUGFyc2VQYXJhbXMCBwAAAExvZ0Z1bGwCDAAAAExvZ01hbGZvcm1lZAITAAAASW52YWxpZENvbnRyYWN0TmFtZQIMAAAAQ29udHJhY3RPbmx5AhMAAABJbnZva2VDb250cmFjdEVycm9yAhIAAABUb2tlbkFscmVhZHlNaW50ZWQCEAAAAE1heFN1cHBseVJlYWNoZWQCDwAAAE5vQmFsYW5jZVRvQnVybgIOAAAAQ29udHJhY3RQYXVzZWQCEgAAAEFkZHJlc3NCbG9ja2xpc3RlZAIaAAAARmFpbGVkVXBncmFkZU1pc3NpbmdNb2R1bGUCHAAAAEZhaWxlZFVwZ3JhZGVNaXNzaW5nQ29udHJhY3QCJQAAAEZhaWxlZFVwZ3JhZGVVbnN1cHBvcnRlZE1vZHVsZVZlcnNpb24CDgAAAE1pc3NpbmdBY2NvdW50Ag0AAABNYWxmb3JtZWREYXRhAg4AAABXcm9uZ1NpZ25hdHVyZQINAAAATm9uY2VNaXNtYXRjaAINAAAAV3JvbmdDb250cmFjdAIPAAAAV3JvbmdFbnRyeVBvaW50AgcAAABFeHBpcmVkAg==";
export type BalanceOfRequest = Array<{
	token_id: string;
	address: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
}>;
export const balanceOfRequestSchemaBase64 =
	"EAEUAAIAAAAIAAAAdG9rZW5faWQdAAcAAABhZGRyZXNzFQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADA==";
export type BalanceOfResponse = Array<string>;
export const balanceOfResponseSchemaBase64 = "EAEbJQAAAA==";
export type BlockError =
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| {
			Custom: [
				| { ParseParams: Record<string, never> }
				| { LogFull: Record<string, never> }
				| { LogMalformed: Record<string, never> }
				| { InvalidContractName: Record<string, never> }
				| { ContractOnly: Record<string, never> }
				| { InvokeContractError: Record<string, never> }
				| { TokenAlreadyMinted: Record<string, never> }
				| { MaxSupplyReached: Record<string, never> }
				| { NoBalanceToBurn: Record<string, never> }
				| { ContractPaused: Record<string, never> }
				| { AddressBlocklisted: Record<string, never> }
				| { FailedUpgradeMissingModule: Record<string, never> }
				| { FailedUpgradeMissingContract: Record<string, never> }
				| { FailedUpgradeUnsupportedModuleVersion: Record<string, never> }
				| { MissingAccount: Record<string, never> }
				| { MalformedData: Record<string, never> }
				| { WrongSignature: Record<string, never> }
				| { NonceMismatch: Record<string, never> }
				| { WrongContract: Record<string, never> }
				| { WrongEntryPoint: Record<string, never> }
				| { Expired: Record<string, never> },
			];
	  };
export const blockErrorSchemaBase64 =
	"FQQAAAAOAAAASW52YWxpZFRva2VuSWQCEQAAAEluc3VmZmljaWVudEZ1bmRzAgwAAABVbmF1dGhvcml6ZWQCBgAAAEN1c3RvbQEBAAAAFRUAAAALAAAAUGFyc2VQYXJhbXMCBwAAAExvZ0Z1bGwCDAAAAExvZ01hbGZvcm1lZAITAAAASW52YWxpZENvbnRyYWN0TmFtZQIMAAAAQ29udHJhY3RPbmx5AhMAAABJbnZva2VDb250cmFjdEVycm9yAhIAAABUb2tlbkFscmVhZHlNaW50ZWQCEAAAAE1heFN1cHBseVJlYWNoZWQCDwAAAE5vQmFsYW5jZVRvQnVybgIOAAAAQ29udHJhY3RQYXVzZWQCEgAAAEFkZHJlc3NCbG9ja2xpc3RlZAIaAAAARmFpbGVkVXBncmFkZU1pc3NpbmdNb2R1bGUCHAAAAEZhaWxlZFVwZ3JhZGVNaXNzaW5nQ29udHJhY3QCJQAAAEZhaWxlZFVwZ3JhZGVVbnN1cHBvcnRlZE1vZHVsZVZlcnNpb24CDgAAAE1pc3NpbmdBY2NvdW50Ag0AAABNYWxmb3JtZWREYXRhAg4AAABXcm9uZ1NpZ25hdHVyZQINAAAATm9uY2VNaXNtYXRjaAINAAAAV3JvbmdDb250cmFjdAIPAAAAV3JvbmdFbnRyeVBvaW50AgcAAABFeHBpcmVkAg==";
export type BlockRequest = {
	address_to_block: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
};
export const blockRequestSchemaBase64 =
	"FAABAAAAEAAAAGFkZHJlc3NfdG9fYmxvY2sVAgAAAAcAAABBY2NvdW50AQEAAAALCAAAAENvbnRyYWN0AQEAAAAM";
export type BurnError =
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| {
			Custom: [
				| { ParseParams: Record<string, never> }
				| { LogFull: Record<string, never> }
				| { LogMalformed: Record<string, never> }
				| { InvalidContractName: Record<string, never> }
				| { ContractOnly: Record<string, never> }
				| { InvokeContractError: Record<string, never> }
				| { TokenAlreadyMinted: Record<string, never> }
				| { MaxSupplyReached: Record<string, never> }
				| { NoBalanceToBurn: Record<string, never> }
				| { ContractPaused: Record<string, never> }
				| { AddressBlocklisted: Record<string, never> }
				| { FailedUpgradeMissingModule: Record<string, never> }
				| { FailedUpgradeMissingContract: Record<string, never> }
				| { FailedUpgradeUnsupportedModuleVersion: Record<string, never> }
				| { MissingAccount: Record<string, never> }
				| { MalformedData: Record<string, never> }
				| { WrongSignature: Record<string, never> }
				| { NonceMismatch: Record<string, never> }
				| { WrongContract: Record<string, never> }
				| { WrongEntryPoint: Record<string, never> }
				| { Expired: Record<string, never> },
			];
	  };
export const burnErrorSchemaBase64 =
	"FQQAAAAOAAAASW52YWxpZFRva2VuSWQCEQAAAEluc3VmZmljaWVudEZ1bmRzAgwAAABVbmF1dGhvcml6ZWQCBgAAAEN1c3RvbQEBAAAAFRUAAAALAAAAUGFyc2VQYXJhbXMCBwAAAExvZ0Z1bGwCDAAAAExvZ01hbGZvcm1lZAITAAAASW52YWxpZENvbnRyYWN0TmFtZQIMAAAAQ29udHJhY3RPbmx5AhMAAABJbnZva2VDb250cmFjdEVycm9yAhIAAABUb2tlbkFscmVhZHlNaW50ZWQCEAAAAE1heFN1cHBseVJlYWNoZWQCDwAAAE5vQmFsYW5jZVRvQnVybgIOAAAAQ29udHJhY3RQYXVzZWQCEgAAAEFkZHJlc3NCbG9ja2xpc3RlZAIaAAAARmFpbGVkVXBncmFkZU1pc3NpbmdNb2R1bGUCHAAAAEZhaWxlZFVwZ3JhZGVNaXNzaW5nQ29udHJhY3QCJQAAAEZhaWxlZFVwZ3JhZGVVbnN1cHBvcnRlZE1vZHVsZVZlcnNpb24CDgAAAE1pc3NpbmdBY2NvdW50Ag0AAABNYWxmb3JtZWREYXRhAg4AAABXcm9uZ1NpZ25hdHVyZQINAAAATm9uY2VNaXNtYXRjaAINAAAAV3JvbmdDb250cmFjdAIPAAAAV3JvbmdFbnRyeVBvaW50AgcAAABFeHBpcmVkAg==";
export type BurnRequest = {
	amount: string;
	burnaddress: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
};
export const burnRequestSchemaBase64 =
	"FAACAAAABgAAAGFtb3VudBslAAAACwAAAGJ1cm5hZGRyZXNzFQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADA==";
export type GrantRoleError =
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| {
			Custom: [
				| { ParseParams: Record<string, never> }
				| { LogFull: Record<string, never> }
				| { LogMalformed: Record<string, never> }
				| { InvalidContractName: Record<string, never> }
				| { ContractOnly: Record<string, never> }
				| { InvokeContractError: Record<string, never> }
				| { TokenAlreadyMinted: Record<string, never> }
				| { MaxSupplyReached: Record<string, never> }
				| { NoBalanceToBurn: Record<string, never> }
				| { ContractPaused: Record<string, never> }
				| { AddressBlocklisted: Record<string, never> }
				| { FailedUpgradeMissingModule: Record<string, never> }
				| { FailedUpgradeMissingContract: Record<string, never> }
				| { FailedUpgradeUnsupportedModuleVersion: Record<string, never> }
				| { MissingAccount: Record<string, never> }
				| { MalformedData: Record<string, never> }
				| { WrongSignature: Record<string, never> }
				| { NonceMismatch: Record<string, never> }
				| { WrongContract: Record<string, never> }
				| { WrongEntryPoint: Record<string, never> }
				| { Expired: Record<string, never> },
			];
	  };
export const grantRoleErrorSchemaBase64 =
	"FQQAAAAOAAAASW52YWxpZFRva2VuSWQCEQAAAEluc3VmZmljaWVudEZ1bmRzAgwAAABVbmF1dGhvcml6ZWQCBgAAAEN1c3RvbQEBAAAAFRUAAAALAAAAUGFyc2VQYXJhbXMCBwAAAExvZ0Z1bGwCDAAAAExvZ01hbGZvcm1lZAITAAAASW52YWxpZENvbnRyYWN0TmFtZQIMAAAAQ29udHJhY3RPbmx5AhMAAABJbnZva2VDb250cmFjdEVycm9yAhIAAABUb2tlbkFscmVhZHlNaW50ZWQCEAAAAE1heFN1cHBseVJlYWNoZWQCDwAAAE5vQmFsYW5jZVRvQnVybgIOAAAAQ29udHJhY3RQYXVzZWQCEgAAAEFkZHJlc3NCbG9ja2xpc3RlZAIaAAAARmFpbGVkVXBncmFkZU1pc3NpbmdNb2R1bGUCHAAAAEZhaWxlZFVwZ3JhZGVNaXNzaW5nQ29udHJhY3QCJQAAAEZhaWxlZFVwZ3JhZGVVbnN1cHBvcnRlZE1vZHVsZVZlcnNpb24CDgAAAE1pc3NpbmdBY2NvdW50Ag0AAABNYWxmb3JtZWREYXRhAg4AAABXcm9uZ1NpZ25hdHVyZQINAAAATm9uY2VNaXNtYXRjaAINAAAAV3JvbmdDb250cmFjdAIPAAAAV3JvbmdFbnRyeVBvaW50AgcAAABFeHBpcmVkAg==";
export type GrantRoleRequest = {
	mintrole: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
	burnrole: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
	blockrole: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
	pauserole: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
	adminrole: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
};
export const grantRoleRequestSchemaBase64 =
	"FAAFAAAACAAAAG1pbnRyb2xlFQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADAgAAABidXJucm9sZRUCAAAABwAAAEFjY291bnQBAQAAAAsIAAAAQ29udHJhY3QBAQAAAAwJAAAAYmxvY2tyb2xlFQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADAkAAABwYXVzZXJvbGUVAgAAAAcAAABBY2NvdW50AQEAAAALCAAAAENvbnRyYWN0AQEAAAAMCQAAAGFkbWlucm9sZRUCAAAABwAAAEFjY291bnQBAQAAAAsIAAAAQ29udHJhY3QBAQAAAAw=";
export type MintError =
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| {
			Custom: [
				| { ParseParams: Record<string, never> }
				| { LogFull: Record<string, never> }
				| { LogMalformed: Record<string, never> }
				| { InvalidContractName: Record<string, never> }
				| { ContractOnly: Record<string, never> }
				| { InvokeContractError: Record<string, never> }
				| { TokenAlreadyMinted: Record<string, never> }
				| { MaxSupplyReached: Record<string, never> }
				| { NoBalanceToBurn: Record<string, never> }
				| { ContractPaused: Record<string, never> }
				| { AddressBlocklisted: Record<string, never> }
				| { FailedUpgradeMissingModule: Record<string, never> }
				| { FailedUpgradeMissingContract: Record<string, never> }
				| { FailedUpgradeUnsupportedModuleVersion: Record<string, never> }
				| { MissingAccount: Record<string, never> }
				| { MalformedData: Record<string, never> }
				| { WrongSignature: Record<string, never> }
				| { NonceMismatch: Record<string, never> }
				| { WrongContract: Record<string, never> }
				| { WrongEntryPoint: Record<string, never> }
				| { Expired: Record<string, never> },
			];
	  };
export const mintErrorSchemaBase64 =
	"FQQAAAAOAAAASW52YWxpZFRva2VuSWQCEQAAAEluc3VmZmljaWVudEZ1bmRzAgwAAABVbmF1dGhvcml6ZWQCBgAAAEN1c3RvbQEBAAAAFRUAAAALAAAAUGFyc2VQYXJhbXMCBwAAAExvZ0Z1bGwCDAAAAExvZ01hbGZvcm1lZAITAAAASW52YWxpZENvbnRyYWN0TmFtZQIMAAAAQ29udHJhY3RPbmx5AhMAAABJbnZva2VDb250cmFjdEVycm9yAhIAAABUb2tlbkFscmVhZHlNaW50ZWQCEAAAAE1heFN1cHBseVJlYWNoZWQCDwAAAE5vQmFsYW5jZVRvQnVybgIOAAAAQ29udHJhY3RQYXVzZWQCEgAAAEFkZHJlc3NCbG9ja2xpc3RlZAIaAAAARmFpbGVkVXBncmFkZU1pc3NpbmdNb2R1bGUCHAAAAEZhaWxlZFVwZ3JhZGVNaXNzaW5nQ29udHJhY3QCJQAAAEZhaWxlZFVwZ3JhZGVVbnN1cHBvcnRlZE1vZHVsZVZlcnNpb24CDgAAAE1pc3NpbmdBY2NvdW50Ag0AAABNYWxmb3JtZWREYXRhAg4AAABXcm9uZ1NpZ25hdHVyZQINAAAATm9uY2VNaXNtYXRjaAINAAAAV3JvbmdDb250cmFjdAIPAAAAV3JvbmdFbnRyeVBvaW50AgcAAABFeHBpcmVkAg==";
export type MintRequest = {
	owner: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
	amount: string;
};
export const mintRequestSchemaBase64 =
	"FAACAAAABQAAAG93bmVyFQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADAYAAABhbW91bnQbJQAAAA==";
export type OperatorOfError =
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| {
			Custom: [
				| { ParseParams: Record<string, never> }
				| { LogFull: Record<string, never> }
				| { LogMalformed: Record<string, never> }
				| { InvalidContractName: Record<string, never> }
				| { ContractOnly: Record<string, never> }
				| { InvokeContractError: Record<string, never> }
				| { TokenAlreadyMinted: Record<string, never> }
				| { MaxSupplyReached: Record<string, never> }
				| { NoBalanceToBurn: Record<string, never> }
				| { ContractPaused: Record<string, never> }
				| { AddressBlocklisted: Record<string, never> }
				| { FailedUpgradeMissingModule: Record<string, never> }
				| { FailedUpgradeMissingContract: Record<string, never> }
				| { FailedUpgradeUnsupportedModuleVersion: Record<string, never> }
				| { MissingAccount: Record<string, never> }
				| { MalformedData: Record<string, never> }
				| { WrongSignature: Record<string, never> }
				| { NonceMismatch: Record<string, never> }
				| { WrongContract: Record<string, never> }
				| { WrongEntryPoint: Record<string, never> }
				| { Expired: Record<string, never> },
			];
	  };
export const operatorOfErrorSchemaBase64 =
	"FQQAAAAOAAAASW52YWxpZFRva2VuSWQCEQAAAEluc3VmZmljaWVudEZ1bmRzAgwAAABVbmF1dGhvcml6ZWQCBgAAAEN1c3RvbQEBAAAAFRUAAAALAAAAUGFyc2VQYXJhbXMCBwAAAExvZ0Z1bGwCDAAAAExvZ01hbGZvcm1lZAITAAAASW52YWxpZENvbnRyYWN0TmFtZQIMAAAAQ29udHJhY3RPbmx5AhMAAABJbnZva2VDb250cmFjdEVycm9yAhIAAABUb2tlbkFscmVhZHlNaW50ZWQCEAAAAE1heFN1cHBseVJlYWNoZWQCDwAAAE5vQmFsYW5jZVRvQnVybgIOAAAAQ29udHJhY3RQYXVzZWQCEgAAAEFkZHJlc3NCbG9ja2xpc3RlZAIaAAAARmFpbGVkVXBncmFkZU1pc3NpbmdNb2R1bGUCHAAAAEZhaWxlZFVwZ3JhZGVNaXNzaW5nQ29udHJhY3QCJQAAAEZhaWxlZFVwZ3JhZGVVbnN1cHBvcnRlZE1vZHVsZVZlcnNpb24CDgAAAE1pc3NpbmdBY2NvdW50Ag0AAABNYWxmb3JtZWREYXRhAg4AAABXcm9uZ1NpZ25hdHVyZQINAAAATm9uY2VNaXNtYXRjaAINAAAAV3JvbmdDb250cmFjdAIPAAAAV3JvbmdFbnRyeVBvaW50AgcAAABFeHBpcmVkAg==";
export type OperatorOfRequest = Array<{
	owner: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
	address: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
}>;
export const operatorOfRequestSchemaBase64 =
	"EAEUAAIAAAAFAAAAb3duZXIVAgAAAAcAAABBY2NvdW50AQEAAAALCAAAAENvbnRyYWN0AQEAAAAMBwAAAGFkZHJlc3MVAgAAAAcAAABBY2NvdW50AQEAAAALCAAAAENvbnRyYWN0AQEAAAAM";
export type OperatorOfResponse = Array<boolean>;
export const operatorOfResponseSchemaBase64 = "EAEB";
export type PermitRequest = {
	signature: [number, [number, { Ed25519: [string] }][]][];
	signer: string;
	message: {
		contract_address: { index: number; subindex: number };
		nonce: bigint;
		timestamp: string;
		entry_point: string;
		payload: Array<number>;
	};
};
export const permitRequestSchemaBase64 =
	"FAADAAAACQAAAHNpZ25hdHVyZRIAAhIAAhUBAAAABwAAAEVkMjU1MTkBAQAAAB5AAAAABgAAAHNpZ25lcgsHAAAAbWVzc2FnZRQABQAAABAAAABjb250cmFjdF9hZGRyZXNzDAUAAABub25jZQUJAAAAdGltZXN0YW1wDQsAAABlbnRyeV9wb2ludBYBBwAAAHBheWxvYWQQAQI=";
export type RemoveRoleError =
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| {
			Custom: [
				| { ParseParams: Record<string, never> }
				| { LogFull: Record<string, never> }
				| { LogMalformed: Record<string, never> }
				| { InvalidContractName: Record<string, never> }
				| { ContractOnly: Record<string, never> }
				| { InvokeContractError: Record<string, never> }
				| { TokenAlreadyMinted: Record<string, never> }
				| { MaxSupplyReached: Record<string, never> }
				| { NoBalanceToBurn: Record<string, never> }
				| { ContractPaused: Record<string, never> }
				| { AddressBlocklisted: Record<string, never> }
				| { FailedUpgradeMissingModule: Record<string, never> }
				| { FailedUpgradeMissingContract: Record<string, never> }
				| { FailedUpgradeUnsupportedModuleVersion: Record<string, never> }
				| { MissingAccount: Record<string, never> }
				| { MalformedData: Record<string, never> }
				| { WrongSignature: Record<string, never> }
				| { NonceMismatch: Record<string, never> }
				| { WrongContract: Record<string, never> }
				| { WrongEntryPoint: Record<string, never> }
				| { Expired: Record<string, never> },
			];
	  };
export const removeRoleErrorSchemaBase64 =
	"FQQAAAAOAAAASW52YWxpZFRva2VuSWQCEQAAAEluc3VmZmljaWVudEZ1bmRzAgwAAABVbmF1dGhvcml6ZWQCBgAAAEN1c3RvbQEBAAAAFRUAAAALAAAAUGFyc2VQYXJhbXMCBwAAAExvZ0Z1bGwCDAAAAExvZ01hbGZvcm1lZAITAAAASW52YWxpZENvbnRyYWN0TmFtZQIMAAAAQ29udHJhY3RPbmx5AhMAAABJbnZva2VDb250cmFjdEVycm9yAhIAAABUb2tlbkFscmVhZHlNaW50ZWQCEAAAAE1heFN1cHBseVJlYWNoZWQCDwAAAE5vQmFsYW5jZVRvQnVybgIOAAAAQ29udHJhY3RQYXVzZWQCEgAAAEFkZHJlc3NCbG9ja2xpc3RlZAIaAAAARmFpbGVkVXBncmFkZU1pc3NpbmdNb2R1bGUCHAAAAEZhaWxlZFVwZ3JhZGVNaXNzaW5nQ29udHJhY3QCJQAAAEZhaWxlZFVwZ3JhZGVVbnN1cHBvcnRlZE1vZHVsZVZlcnNpb24CDgAAAE1pc3NpbmdBY2NvdW50Ag0AAABNYWxmb3JtZWREYXRhAg4AAABXcm9uZ1NpZ25hdHVyZQINAAAATm9uY2VNaXNtYXRjaAINAAAAV3JvbmdDb250cmFjdAIPAAAAV3JvbmdFbnRyeVBvaW50AgcAAABFeHBpcmVkAg==";
export type RemoveRoleRequest = {
	mintrole: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
	burnrole: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
	blockrole: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
	pauserole: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
	adminrole: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
};
export const removeRoleRequestSchemaBase64 =
	"FAAFAAAACAAAAG1pbnRyb2xlFQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADAgAAABidXJucm9sZRUCAAAABwAAAEFjY291bnQBAQAAAAsIAAAAQ29udHJhY3QBAQAAAAwJAAAAYmxvY2tyb2xlFQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADAkAAABwYXVzZXJvbGUVAgAAAAcAAABBY2NvdW50AQEAAAALCAAAAENvbnRyYWN0AQEAAAAMCQAAAGFkbWlucm9sZRUCAAAABwAAAEFjY291bnQBAQAAAAsIAAAAQ29udHJhY3QBAQAAAAw=";
export type SetImplementorsError =
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| {
			Custom: [
				| { ParseParams: Record<string, never> }
				| { LogFull: Record<string, never> }
				| { LogMalformed: Record<string, never> }
				| { InvalidContractName: Record<string, never> }
				| { ContractOnly: Record<string, never> }
				| { InvokeContractError: Record<string, never> }
				| { TokenAlreadyMinted: Record<string, never> }
				| { MaxSupplyReached: Record<string, never> }
				| { NoBalanceToBurn: Record<string, never> }
				| { ContractPaused: Record<string, never> }
				| { AddressBlocklisted: Record<string, never> }
				| { FailedUpgradeMissingModule: Record<string, never> }
				| { FailedUpgradeMissingContract: Record<string, never> }
				| { FailedUpgradeUnsupportedModuleVersion: Record<string, never> }
				| { MissingAccount: Record<string, never> }
				| { MalformedData: Record<string, never> }
				| { WrongSignature: Record<string, never> }
				| { NonceMismatch: Record<string, never> }
				| { WrongContract: Record<string, never> }
				| { WrongEntryPoint: Record<string, never> }
				| { Expired: Record<string, never> },
			];
	  };
export const setImplementorsErrorSchemaBase64 =
	"FQQAAAAOAAAASW52YWxpZFRva2VuSWQCEQAAAEluc3VmZmljaWVudEZ1bmRzAgwAAABVbmF1dGhvcml6ZWQCBgAAAEN1c3RvbQEBAAAAFRUAAAALAAAAUGFyc2VQYXJhbXMCBwAAAExvZ0Z1bGwCDAAAAExvZ01hbGZvcm1lZAITAAAASW52YWxpZENvbnRyYWN0TmFtZQIMAAAAQ29udHJhY3RPbmx5AhMAAABJbnZva2VDb250cmFjdEVycm9yAhIAAABUb2tlbkFscmVhZHlNaW50ZWQCEAAAAE1heFN1cHBseVJlYWNoZWQCDwAAAE5vQmFsYW5jZVRvQnVybgIOAAAAQ29udHJhY3RQYXVzZWQCEgAAAEFkZHJlc3NCbG9ja2xpc3RlZAIaAAAARmFpbGVkVXBncmFkZU1pc3NpbmdNb2R1bGUCHAAAAEZhaWxlZFVwZ3JhZGVNaXNzaW5nQ29udHJhY3QCJQAAAEZhaWxlZFVwZ3JhZGVVbnN1cHBvcnRlZE1vZHVsZVZlcnNpb24CDgAAAE1pc3NpbmdBY2NvdW50Ag0AAABNYWxmb3JtZWREYXRhAg4AAABXcm9uZ1NpZ25hdHVyZQINAAAATm9uY2VNaXNtYXRjaAINAAAAV3JvbmdDb250cmFjdAIPAAAAV3JvbmdFbnRyeVBvaW50AgcAAABFeHBpcmVkAg==";
export type SetImplementorsRequest = { id: string; implementors: Array<{ index: number; subindex: number }> };
export const setImplementorsRequestSchemaBase64 = "FAACAAAAAgAAAGlkFgAMAAAAaW1wbGVtZW50b3JzEAIM";
export type SetPausedError =
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| {
			Custom: [
				| { ParseParams: Record<string, never> }
				| { LogFull: Record<string, never> }
				| { LogMalformed: Record<string, never> }
				| { InvalidContractName: Record<string, never> }
				| { ContractOnly: Record<string, never> }
				| { InvokeContractError: Record<string, never> }
				| { TokenAlreadyMinted: Record<string, never> }
				| { MaxSupplyReached: Record<string, never> }
				| { NoBalanceToBurn: Record<string, never> }
				| { ContractPaused: Record<string, never> }
				| { AddressBlocklisted: Record<string, never> }
				| { FailedUpgradeMissingModule: Record<string, never> }
				| { FailedUpgradeMissingContract: Record<string, never> }
				| { FailedUpgradeUnsupportedModuleVersion: Record<string, never> }
				| { MissingAccount: Record<string, never> }
				| { MalformedData: Record<string, never> }
				| { WrongSignature: Record<string, never> }
				| { NonceMismatch: Record<string, never> }
				| { WrongContract: Record<string, never> }
				| { WrongEntryPoint: Record<string, never> }
				| { Expired: Record<string, never> },
			];
	  };
export const setPausedErrorSchemaBase64 =
	"FQQAAAAOAAAASW52YWxpZFRva2VuSWQCEQAAAEluc3VmZmljaWVudEZ1bmRzAgwAAABVbmF1dGhvcml6ZWQCBgAAAEN1c3RvbQEBAAAAFRUAAAALAAAAUGFyc2VQYXJhbXMCBwAAAExvZ0Z1bGwCDAAAAExvZ01hbGZvcm1lZAITAAAASW52YWxpZENvbnRyYWN0TmFtZQIMAAAAQ29udHJhY3RPbmx5AhMAAABJbnZva2VDb250cmFjdEVycm9yAhIAAABUb2tlbkFscmVhZHlNaW50ZWQCEAAAAE1heFN1cHBseVJlYWNoZWQCDwAAAE5vQmFsYW5jZVRvQnVybgIOAAAAQ29udHJhY3RQYXVzZWQCEgAAAEFkZHJlc3NCbG9ja2xpc3RlZAIaAAAARmFpbGVkVXBncmFkZU1pc3NpbmdNb2R1bGUCHAAAAEZhaWxlZFVwZ3JhZGVNaXNzaW5nQ29udHJhY3QCJQAAAEZhaWxlZFVwZ3JhZGVVbnN1cHBvcnRlZE1vZHVsZVZlcnNpb24CDgAAAE1pc3NpbmdBY2NvdW50Ag0AAABNYWxmb3JtZWREYXRhAg4AAABXcm9uZ1NpZ25hdHVyZQINAAAATm9uY2VNaXNtYXRjaAINAAAAV3JvbmdDb250cmFjdAIPAAAAV3JvbmdFbnRyeVBvaW50AgcAAABFeHBpcmVkAg==";
export type SetPausedRequest = { paused: boolean };
export const setPausedRequestSchemaBase64 = "FAABAAAABgAAAHBhdXNlZAE=";
export type SupportsError =
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| {
			Custom: [
				| { ParseParams: Record<string, never> }
				| { LogFull: Record<string, never> }
				| { LogMalformed: Record<string, never> }
				| { InvalidContractName: Record<string, never> }
				| { ContractOnly: Record<string, never> }
				| { InvokeContractError: Record<string, never> }
				| { TokenAlreadyMinted: Record<string, never> }
				| { MaxSupplyReached: Record<string, never> }
				| { NoBalanceToBurn: Record<string, never> }
				| { ContractPaused: Record<string, never> }
				| { AddressBlocklisted: Record<string, never> }
				| { FailedUpgradeMissingModule: Record<string, never> }
				| { FailedUpgradeMissingContract: Record<string, never> }
				| { FailedUpgradeUnsupportedModuleVersion: Record<string, never> }
				| { MissingAccount: Record<string, never> }
				| { MalformedData: Record<string, never> }
				| { WrongSignature: Record<string, never> }
				| { NonceMismatch: Record<string, never> }
				| { WrongContract: Record<string, never> }
				| { WrongEntryPoint: Record<string, never> }
				| { Expired: Record<string, never> },
			];
	  };
export const supportsErrorSchemaBase64 =
	"FQQAAAAOAAAASW52YWxpZFRva2VuSWQCEQAAAEluc3VmZmljaWVudEZ1bmRzAgwAAABVbmF1dGhvcml6ZWQCBgAAAEN1c3RvbQEBAAAAFRUAAAALAAAAUGFyc2VQYXJhbXMCBwAAAExvZ0Z1bGwCDAAAAExvZ01hbGZvcm1lZAITAAAASW52YWxpZENvbnRyYWN0TmFtZQIMAAAAQ29udHJhY3RPbmx5AhMAAABJbnZva2VDb250cmFjdEVycm9yAhIAAABUb2tlbkFscmVhZHlNaW50ZWQCEAAAAE1heFN1cHBseVJlYWNoZWQCDwAAAE5vQmFsYW5jZVRvQnVybgIOAAAAQ29udHJhY3RQYXVzZWQCEgAAAEFkZHJlc3NCbG9ja2xpc3RlZAIaAAAARmFpbGVkVXBncmFkZU1pc3NpbmdNb2R1bGUCHAAAAEZhaWxlZFVwZ3JhZGVNaXNzaW5nQ29udHJhY3QCJQAAAEZhaWxlZFVwZ3JhZGVVbnN1cHBvcnRlZE1vZHVsZVZlcnNpb24CDgAAAE1pc3NpbmdBY2NvdW50Ag0AAABNYWxmb3JtZWREYXRhAg4AAABXcm9uZ1NpZ25hdHVyZQINAAAATm9uY2VNaXNtYXRjaAINAAAAV3JvbmdDb250cmFjdAIPAAAAV3JvbmdFbnRyeVBvaW50AgcAAABFeHBpcmVkAg==";
export type SupportsRequest = Array<string>;
export const supportsRequestSchemaBase64 = "EAEWAA==";
export type SupportsResponse = Array<
	| { NoSupport: Record<string, never> }
	| { Support: Record<string, never> }
	| { SupportBy: [Array<{ index: number; subindex: number }>] }
>;
export const supportsResponseSchemaBase64 = "EAEVAwAAAAkAAABOb1N1cHBvcnQCBwAAAFN1cHBvcnQCCQAAAFN1cHBvcnRCeQEBAAAAEAAM";
export type SupportsPermitError =
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| {
			Custom: [
				| { ParseParams: Record<string, never> }
				| { LogFull: Record<string, never> }
				| { LogMalformed: Record<string, never> }
				| { InvalidContractName: Record<string, never> }
				| { ContractOnly: Record<string, never> }
				| { InvokeContractError: Record<string, never> }
				| { TokenAlreadyMinted: Record<string, never> }
				| { MaxSupplyReached: Record<string, never> }
				| { NoBalanceToBurn: Record<string, never> }
				| { ContractPaused: Record<string, never> }
				| { AddressBlocklisted: Record<string, never> }
				| { FailedUpgradeMissingModule: Record<string, never> }
				| { FailedUpgradeMissingContract: Record<string, never> }
				| { FailedUpgradeUnsupportedModuleVersion: Record<string, never> }
				| { MissingAccount: Record<string, never> }
				| { MalformedData: Record<string, never> }
				| { WrongSignature: Record<string, never> }
				| { NonceMismatch: Record<string, never> }
				| { WrongContract: Record<string, never> }
				| { WrongEntryPoint: Record<string, never> }
				| { Expired: Record<string, never> },
			];
	  };
export const supportsPermitErrorSchemaBase64 =
	"FQQAAAAOAAAASW52YWxpZFRva2VuSWQCEQAAAEluc3VmZmljaWVudEZ1bmRzAgwAAABVbmF1dGhvcml6ZWQCBgAAAEN1c3RvbQEBAAAAFRUAAAALAAAAUGFyc2VQYXJhbXMCBwAAAExvZ0Z1bGwCDAAAAExvZ01hbGZvcm1lZAITAAAASW52YWxpZENvbnRyYWN0TmFtZQIMAAAAQ29udHJhY3RPbmx5AhMAAABJbnZva2VDb250cmFjdEVycm9yAhIAAABUb2tlbkFscmVhZHlNaW50ZWQCEAAAAE1heFN1cHBseVJlYWNoZWQCDwAAAE5vQmFsYW5jZVRvQnVybgIOAAAAQ29udHJhY3RQYXVzZWQCEgAAAEFkZHJlc3NCbG9ja2xpc3RlZAIaAAAARmFpbGVkVXBncmFkZU1pc3NpbmdNb2R1bGUCHAAAAEZhaWxlZFVwZ3JhZGVNaXNzaW5nQ29udHJhY3QCJQAAAEZhaWxlZFVwZ3JhZGVVbnN1cHBvcnRlZE1vZHVsZVZlcnNpb24CDgAAAE1pc3NpbmdBY2NvdW50Ag0AAABNYWxmb3JtZWREYXRhAg4AAABXcm9uZ1NpZ25hdHVyZQINAAAATm9uY2VNaXNtYXRjaAINAAAAV3JvbmdDb250cmFjdAIPAAAAV3JvbmdFbnRyeVBvaW50AgcAAABFeHBpcmVkAg==";
export type SupportsPermitRequest = { queries: Array<string> };
export const supportsPermitRequestSchemaBase64 = "FAABAAAABwAAAHF1ZXJpZXMQARYB";
export type SupportsPermitResponse = Array<
	| { NoSupport: Record<string, never> }
	| { Support: Record<string, never> }
	| { SupportBy: [Array<{ index: number; subindex: number }>] }
>;
export const supportsPermitResponseSchemaBase64 =
	"EAEVAwAAAAkAAABOb1N1cHBvcnQCBwAAAFN1cHBvcnQCCQAAAFN1cHBvcnRCeQEBAAAAEAAM";
export type TokenMetadataError =
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| {
			Custom: [
				| { ParseParams: Record<string, never> }
				| { LogFull: Record<string, never> }
				| { LogMalformed: Record<string, never> }
				| { InvalidContractName: Record<string, never> }
				| { ContractOnly: Record<string, never> }
				| { InvokeContractError: Record<string, never> }
				| { TokenAlreadyMinted: Record<string, never> }
				| { MaxSupplyReached: Record<string, never> }
				| { NoBalanceToBurn: Record<string, never> }
				| { ContractPaused: Record<string, never> }
				| { AddressBlocklisted: Record<string, never> }
				| { FailedUpgradeMissingModule: Record<string, never> }
				| { FailedUpgradeMissingContract: Record<string, never> }
				| { FailedUpgradeUnsupportedModuleVersion: Record<string, never> }
				| { MissingAccount: Record<string, never> }
				| { MalformedData: Record<string, never> }
				| { WrongSignature: Record<string, never> }
				| { NonceMismatch: Record<string, never> }
				| { WrongContract: Record<string, never> }
				| { WrongEntryPoint: Record<string, never> }
				| { Expired: Record<string, never> },
			];
	  };
export const tokenMetadataErrorSchemaBase64 =
	"FQQAAAAOAAAASW52YWxpZFRva2VuSWQCEQAAAEluc3VmZmljaWVudEZ1bmRzAgwAAABVbmF1dGhvcml6ZWQCBgAAAEN1c3RvbQEBAAAAFRUAAAALAAAAUGFyc2VQYXJhbXMCBwAAAExvZ0Z1bGwCDAAAAExvZ01hbGZvcm1lZAITAAAASW52YWxpZENvbnRyYWN0TmFtZQIMAAAAQ29udHJhY3RPbmx5AhMAAABJbnZva2VDb250cmFjdEVycm9yAhIAAABUb2tlbkFscmVhZHlNaW50ZWQCEAAAAE1heFN1cHBseVJlYWNoZWQCDwAAAE5vQmFsYW5jZVRvQnVybgIOAAAAQ29udHJhY3RQYXVzZWQCEgAAAEFkZHJlc3NCbG9ja2xpc3RlZAIaAAAARmFpbGVkVXBncmFkZU1pc3NpbmdNb2R1bGUCHAAAAEZhaWxlZFVwZ3JhZGVNaXNzaW5nQ29udHJhY3QCJQAAAEZhaWxlZFVwZ3JhZGVVbnN1cHBvcnRlZE1vZHVsZVZlcnNpb24CDgAAAE1pc3NpbmdBY2NvdW50Ag0AAABNYWxmb3JtZWREYXRhAg4AAABXcm9uZ1NpZ25hdHVyZQINAAAATm9uY2VNaXNtYXRjaAINAAAAV3JvbmdDb250cmFjdAIPAAAAV3JvbmdFbnRyeVBvaW50AgcAAABFeHBpcmVkAg==";
export type TokenMetadataRequest = Array<string>;
export const tokenMetadataRequestSchemaBase64 = "EAEdAA==";
export type TokenMetadataResponse = Array<{ url: string; hash: { None: Record<string, never> } | { Some: [string] } }>;
export const tokenMetadataResponseSchemaBase64 =
	"EAEUAAIAAAADAAAAdXJsFgEEAAAAaGFzaBUCAAAABAAAAE5vbmUCBAAAAFNvbWUBAQAAAB4gAAAA";
export type TransferError =
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| {
			Custom: [
				| { ParseParams: Record<string, never> }
				| { LogFull: Record<string, never> }
				| { LogMalformed: Record<string, never> }
				| { InvalidContractName: Record<string, never> }
				| { ContractOnly: Record<string, never> }
				| { InvokeContractError: Record<string, never> }
				| { TokenAlreadyMinted: Record<string, never> }
				| { MaxSupplyReached: Record<string, never> }
				| { NoBalanceToBurn: Record<string, never> }
				| { ContractPaused: Record<string, never> }
				| { AddressBlocklisted: Record<string, never> }
				| { FailedUpgradeMissingModule: Record<string, never> }
				| { FailedUpgradeMissingContract: Record<string, never> }
				| { FailedUpgradeUnsupportedModuleVersion: Record<string, never> }
				| { MissingAccount: Record<string, never> }
				| { MalformedData: Record<string, never> }
				| { WrongSignature: Record<string, never> }
				| { NonceMismatch: Record<string, never> }
				| { WrongContract: Record<string, never> }
				| { WrongEntryPoint: Record<string, never> }
				| { Expired: Record<string, never> },
			];
	  };
export const transferErrorSchemaBase64 =
	"FQQAAAAOAAAASW52YWxpZFRva2VuSWQCEQAAAEluc3VmZmljaWVudEZ1bmRzAgwAAABVbmF1dGhvcml6ZWQCBgAAAEN1c3RvbQEBAAAAFRUAAAALAAAAUGFyc2VQYXJhbXMCBwAAAExvZ0Z1bGwCDAAAAExvZ01hbGZvcm1lZAITAAAASW52YWxpZENvbnRyYWN0TmFtZQIMAAAAQ29udHJhY3RPbmx5AhMAAABJbnZva2VDb250cmFjdEVycm9yAhIAAABUb2tlbkFscmVhZHlNaW50ZWQCEAAAAE1heFN1cHBseVJlYWNoZWQCDwAAAE5vQmFsYW5jZVRvQnVybgIOAAAAQ29udHJhY3RQYXVzZWQCEgAAAEFkZHJlc3NCbG9ja2xpc3RlZAIaAAAARmFpbGVkVXBncmFkZU1pc3NpbmdNb2R1bGUCHAAAAEZhaWxlZFVwZ3JhZGVNaXNzaW5nQ29udHJhY3QCJQAAAEZhaWxlZFVwZ3JhZGVVbnN1cHBvcnRlZE1vZHVsZVZlcnNpb24CDgAAAE1pc3NpbmdBY2NvdW50Ag0AAABNYWxmb3JtZWREYXRhAg4AAABXcm9uZ1NpZ25hdHVyZQINAAAATm9uY2VNaXNtYXRjaAINAAAAV3JvbmdDb250cmFjdAIPAAAAV3JvbmdFbnRyeVBvaW50AgcAAABFeHBpcmVkAg==";
export type TransferRequest = Array<{
	token_id: string;
	amount: string;
	from: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
	to: { Account: [string] } | { Contract: [{ index: number; subindex: number }, string] };
	data: string;
}>;
export const transferRequestSchemaBase64 =
	"EAEUAAUAAAAIAAAAdG9rZW5faWQdAAYAAABhbW91bnQbJQAAAAQAAABmcm9tFQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADAIAAAB0bxUCAAAABwAAAEFjY291bnQBAQAAAAsIAAAAQ29udHJhY3QBAgAAAAwWAQQAAABkYXRhHQE=";
export type UnblockError =
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| {
			Custom: [
				| { ParseParams: Record<string, never> }
				| { LogFull: Record<string, never> }
				| { LogMalformed: Record<string, never> }
				| { InvalidContractName: Record<string, never> }
				| { ContractOnly: Record<string, never> }
				| { InvokeContractError: Record<string, never> }
				| { TokenAlreadyMinted: Record<string, never> }
				| { MaxSupplyReached: Record<string, never> }
				| { NoBalanceToBurn: Record<string, never> }
				| { ContractPaused: Record<string, never> }
				| { AddressBlocklisted: Record<string, never> }
				| { FailedUpgradeMissingModule: Record<string, never> }
				| { FailedUpgradeMissingContract: Record<string, never> }
				| { FailedUpgradeUnsupportedModuleVersion: Record<string, never> }
				| { MissingAccount: Record<string, never> }
				| { MalformedData: Record<string, never> }
				| { WrongSignature: Record<string, never> }
				| { NonceMismatch: Record<string, never> }
				| { WrongContract: Record<string, never> }
				| { WrongEntryPoint: Record<string, never> }
				| { Expired: Record<string, never> },
			];
	  };
export const unblockErrorSchemaBase64 =
	"FQQAAAAOAAAASW52YWxpZFRva2VuSWQCEQAAAEluc3VmZmljaWVudEZ1bmRzAgwAAABVbmF1dGhvcml6ZWQCBgAAAEN1c3RvbQEBAAAAFRUAAAALAAAAUGFyc2VQYXJhbXMCBwAAAExvZ0Z1bGwCDAAAAExvZ01hbGZvcm1lZAITAAAASW52YWxpZENvbnRyYWN0TmFtZQIMAAAAQ29udHJhY3RPbmx5AhMAAABJbnZva2VDb250cmFjdEVycm9yAhIAAABUb2tlbkFscmVhZHlNaW50ZWQCEAAAAE1heFN1cHBseVJlYWNoZWQCDwAAAE5vQmFsYW5jZVRvQnVybgIOAAAAQ29udHJhY3RQYXVzZWQCEgAAAEFkZHJlc3NCbG9ja2xpc3RlZAIaAAAARmFpbGVkVXBncmFkZU1pc3NpbmdNb2R1bGUCHAAAAEZhaWxlZFVwZ3JhZGVNaXNzaW5nQ29udHJhY3QCJQAAAEZhaWxlZFVwZ3JhZGVVbnN1cHBvcnRlZE1vZHVsZVZlcnNpb24CDgAAAE1pc3NpbmdBY2NvdW50Ag0AAABNYWxmb3JtZWREYXRhAg4AAABXcm9uZ1NpZ25hdHVyZQINAAAATm9uY2VNaXNtYXRjaAINAAAAV3JvbmdDb250cmFjdAIPAAAAV3JvbmdFbnRyeVBvaW50AgcAAABFeHBpcmVkAg==";
export type UnblockRequest = {
	address_to_unblock: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
};
export const unblockRequestSchemaBase64 =
	"FAABAAAAEgAAAGFkZHJlc3NfdG9fdW5ibG9jaxUCAAAABwAAAEFjY291bnQBAQAAAAsIAAAAQ29udHJhY3QBAQAAAAw=";
export type UpdateOperatorError =
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| {
			Custom: [
				| { ParseParams: Record<string, never> }
				| { LogFull: Record<string, never> }
				| { LogMalformed: Record<string, never> }
				| { InvalidContractName: Record<string, never> }
				| { ContractOnly: Record<string, never> }
				| { InvokeContractError: Record<string, never> }
				| { TokenAlreadyMinted: Record<string, never> }
				| { MaxSupplyReached: Record<string, never> }
				| { NoBalanceToBurn: Record<string, never> }
				| { ContractPaused: Record<string, never> }
				| { AddressBlocklisted: Record<string, never> }
				| { FailedUpgradeMissingModule: Record<string, never> }
				| { FailedUpgradeMissingContract: Record<string, never> }
				| { FailedUpgradeUnsupportedModuleVersion: Record<string, never> }
				| { MissingAccount: Record<string, never> }
				| { MalformedData: Record<string, never> }
				| { WrongSignature: Record<string, never> }
				| { NonceMismatch: Record<string, never> }
				| { WrongContract: Record<string, never> }
				| { WrongEntryPoint: Record<string, never> }
				| { Expired: Record<string, never> },
			];
	  };
export const updateOperatorErrorSchemaBase64 =
	"FQQAAAAOAAAASW52YWxpZFRva2VuSWQCEQAAAEluc3VmZmljaWVudEZ1bmRzAgwAAABVbmF1dGhvcml6ZWQCBgAAAEN1c3RvbQEBAAAAFRUAAAALAAAAUGFyc2VQYXJhbXMCBwAAAExvZ0Z1bGwCDAAAAExvZ01hbGZvcm1lZAITAAAASW52YWxpZENvbnRyYWN0TmFtZQIMAAAAQ29udHJhY3RPbmx5AhMAAABJbnZva2VDb250cmFjdEVycm9yAhIAAABUb2tlbkFscmVhZHlNaW50ZWQCEAAAAE1heFN1cHBseVJlYWNoZWQCDwAAAE5vQmFsYW5jZVRvQnVybgIOAAAAQ29udHJhY3RQYXVzZWQCEgAAAEFkZHJlc3NCbG9ja2xpc3RlZAIaAAAARmFpbGVkVXBncmFkZU1pc3NpbmdNb2R1bGUCHAAAAEZhaWxlZFVwZ3JhZGVNaXNzaW5nQ29udHJhY3QCJQAAAEZhaWxlZFVwZ3JhZGVVbnN1cHBvcnRlZE1vZHVsZVZlcnNpb24CDgAAAE1pc3NpbmdBY2NvdW50Ag0AAABNYWxmb3JtZWREYXRhAg4AAABXcm9uZ1NpZ25hdHVyZQINAAAATm9uY2VNaXNtYXRjaAINAAAAV3JvbmdDb250cmFjdAIPAAAAV3JvbmdFbnRyeVBvaW50AgcAAABFeHBpcmVkAg==";
export type UpdateOperatorRequest = Array<{
	update: { Remove: Record<string, never> } | { Add: Record<string, never> };
	operator: { Account: [string] } | { Contract: [{ index: number; subindex: number }] };
}>;
export const updateOperatorRequestSchemaBase64 =
	"EAEUAAIAAAAGAAAAdXBkYXRlFQIAAAAGAAAAUmVtb3ZlAgMAAABBZGQCCAAAAG9wZXJhdG9yFQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADA==";
export type UpgradeError =
	| { ParseParams: Record<string, never> }
	| { LogFull: Record<string, never> }
	| { LogMalformed: Record<string, never> }
	| { InvalidContractName: Record<string, never> }
	| { ContractOnly: Record<string, never> }
	| { InvokeContractError: Record<string, never> }
	| { TokenAlreadyMinted: Record<string, never> }
	| { MaxSupplyReached: Record<string, never> }
	| { NoBalanceToBurn: Record<string, never> }
	| { ContractPaused: Record<string, never> }
	| { AddressBlocklisted: Record<string, never> }
	| { FailedUpgradeMissingModule: Record<string, never> }
	| { FailedUpgradeMissingContract: Record<string, never> }
	| { FailedUpgradeUnsupportedModuleVersion: Record<string, never> }
	| { MissingAccount: Record<string, never> }
	| { MalformedData: Record<string, never> }
	| { WrongSignature: Record<string, never> }
	| { NonceMismatch: Record<string, never> }
	| { WrongContract: Record<string, never> }
	| { WrongEntryPoint: Record<string, never> }
	| { Expired: Record<string, never> };
export const upgradeErrorSchemaBase64 =
	"FRUAAAALAAAAUGFyc2VQYXJhbXMCBwAAAExvZ0Z1bGwCDAAAAExvZ01hbGZvcm1lZAITAAAASW52YWxpZENvbnRyYWN0TmFtZQIMAAAAQ29udHJhY3RPbmx5AhMAAABJbnZva2VDb250cmFjdEVycm9yAhIAAABUb2tlbkFscmVhZHlNaW50ZWQCEAAAAE1heFN1cHBseVJlYWNoZWQCDwAAAE5vQmFsYW5jZVRvQnVybgIOAAAAQ29udHJhY3RQYXVzZWQCEgAAAEFkZHJlc3NCbG9ja2xpc3RlZAIaAAAARmFpbGVkVXBncmFkZU1pc3NpbmdNb2R1bGUCHAAAAEZhaWxlZFVwZ3JhZGVNaXNzaW5nQ29udHJhY3QCJQAAAEZhaWxlZFVwZ3JhZGVVbnN1cHBvcnRlZE1vZHVsZVZlcnNpb24CDgAAAE1pc3NpbmdBY2NvdW50Ag0AAABNYWxmb3JtZWREYXRhAg4AAABXcm9uZ1NpZ25hdHVyZQINAAAATm9uY2VNaXNtYXRjaAINAAAAV3JvbmdDb250cmFjdAIPAAAAV3JvbmdFbnRyeVBvaW50AgcAAABFeHBpcmVkAg==";
export type UpgradeRequest = {
	module: string;
	migrate: { None: Record<string, never> } | { Some: [[string, string]] };
};
export const upgradeRequestSchemaBase64 =
	"FAACAAAABgAAAG1vZHVsZR4gAAAABwAAAG1pZ3JhdGUVAgAAAAQAAABOb25lAgQAAABTb21lAQEAAAAPFgEdAQ==";
export type ViewResponse = {
	state: Array<
		[
			{ Account: [string] } | { Contract: [{ index: number; subindex: number }] },
			{
				balances: Array<[string, string]>;
				operators: Array<{ Account: [string] } | { Contract: [{ index: number; subindex: number }] }>;
			},
		]
	>;
};
export const viewResponseSchemaBase64 =
	"FAABAAAABQAAAHN0YXRlEAIPFQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADBQAAgAAAAgAAABiYWxhbmNlcxACDx0AGyUAAAAJAAAAb3BlcmF0b3JzEAIVAgAAAAcAAABBY2NvdW50AQEAAAALCAAAAENvbnRyYWN0AQEAAAAM";
export type ViewMessageHashRequest = {
	signature: [number, [number, { Ed25519: [string] }][]][];
	signer: string;
	message: {
		contract_address: { index: number; subindex: number };
		nonce: bigint;
		timestamp: string;
		entry_point: string;
		payload: Array<number>;
	};
};
export const viewMessageHashRequestSchemaBase64 =
	"FAADAAAACQAAAHNpZ25hdHVyZRIAAhIAAhUBAAAABwAAAEVkMjU1MTkBAQAAAB5AAAAABgAAAHNpZ25lcgsHAAAAbWVzc2FnZRQABQAAABAAAABjb250cmFjdF9hZGRyZXNzDAUAAABub25jZQUJAAAAdGltZXN0YW1wDQsAAABlbnRyeV9wb2ludBYBBwAAAHBheWxvYWQQAQI=";
export type ViewMessageHashResponse = Array<number>;
export const viewMessageHashResponseSchemaBase64 = "EyAAAAAC";
export type ViewSupplyResponse = { circulating_supply: string };
export const viewSupplyResponseSchemaBase64 = "FAABAAAAEgAAAGNpcmN1bGF0aW5nX3N1cHBseRslAAAA";
export const ENTRYPOINTS: Record<string, EntrypointName.Type> = {
	balanceOf: EntrypointName.fromString("balanceOf"),
	block: EntrypointName.fromString("block"),
	burn: EntrypointName.fromString("burn"),
	grantRole: EntrypointName.fromString("grantRole"),
	mint: EntrypointName.fromString("mint"),
	operatorOf: EntrypointName.fromString("operatorOf"),
	permit: EntrypointName.fromString("permit"),
	removeRole: EntrypointName.fromString("removeRole"),
	setImplementors: EntrypointName.fromString("setImplementors"),
	setPaused: EntrypointName.fromString("setPaused"),
	supports: EntrypointName.fromString("supports"),
	supportsPermit: EntrypointName.fromString("supportsPermit"),
	tokenMetadata: EntrypointName.fromString("tokenMetadata"),
	transfer: EntrypointName.fromString("transfer"),
	unblock: EntrypointName.fromString("unblock"),
	updateOperator: EntrypointName.fromString("updateOperator"),
	upgrade: EntrypointName.fromString("upgrade"),
	view: EntrypointName.fromString("view"),
	viewMessageHash: EntrypointName.fromString("viewMessageHash"),
	viewSupply: EntrypointName.fromString("viewSupply"),
};
export const ENTRYPOINT_DISPLAY_NAMES: Record<string, string> = {
	balanceOf: "Balance Of",
	block: "Block",
	burn: "Burn",
	grantRole: "Grant Role",
	mint: "Mint",
	operatorOf: "Operator Of",
	permit: "Permit",
	removeRole: "Remove Role",
	setImplementors: "Set Implementors",
	setPaused: "Set Paused",
	supports: "Supports",
	supportsPermit: "Supports Permit",
	tokenMetadata: "Token Metadata",
	transfer: "Transfer",
	unblock: "Unblock",
	updateOperator: "Update Operator",
	upgrade: "Upgrade",
	view: "View",
	viewMessageHash: "View Message Hash",
	viewSupply: "View Supply",
};
export const euroeStablecoin = {
	init: new InitMethod<void>(
		ModuleReference.fromHexString("c9498d8ffd072e5ff0484b7002ca8c1354dcb5df6dab5aa67aa3cd66c34a2431"),
		ContractName.fromString("euroe_stablecoin"),
	),
	balanceOf: new ReceiveMethod<BalanceOfRequest, BalanceOfResponse, BalanceOfError>(
		ContractName.fromString("euroe_stablecoin"),
		EntrypointName.fromString("balanceOf"),
		balanceOfRequestSchemaBase64,
		balanceOfResponseSchemaBase64,
		balanceOfErrorSchemaBase64,
	),
	block: new ReceiveMethod<BlockRequest, never, BlockError>(
		ContractName.fromString("euroe_stablecoin"),
		EntrypointName.fromString("block"),
		blockRequestSchemaBase64,
		undefined,
		blockErrorSchemaBase64,
	),
	burn: new ReceiveMethod<BurnRequest, never, BurnError>(
		ContractName.fromString("euroe_stablecoin"),
		EntrypointName.fromString("burn"),
		burnRequestSchemaBase64,
		undefined,
		burnErrorSchemaBase64,
	),
	grantRole: new ReceiveMethod<GrantRoleRequest, never, GrantRoleError>(
		ContractName.fromString("euroe_stablecoin"),
		EntrypointName.fromString("grantRole"),
		grantRoleRequestSchemaBase64,
		undefined,
		grantRoleErrorSchemaBase64,
	),
	mint: new ReceiveMethod<MintRequest, never, MintError>(
		ContractName.fromString("euroe_stablecoin"),
		EntrypointName.fromString("mint"),
		mintRequestSchemaBase64,
		undefined,
		mintErrorSchemaBase64,
	),
	operatorOf: new ReceiveMethod<OperatorOfRequest, OperatorOfResponse, OperatorOfError>(
		ContractName.fromString("euroe_stablecoin"),
		EntrypointName.fromString("operatorOf"),
		operatorOfRequestSchemaBase64,
		operatorOfResponseSchemaBase64,
		operatorOfErrorSchemaBase64,
	),
	permit: new ReceiveMethod<PermitRequest>(
		ContractName.fromString("euroe_stablecoin"),
		EntrypointName.fromString("permit"),
		permitRequestSchemaBase64,
	),
	removeRole: new ReceiveMethod<RemoveRoleRequest, never, RemoveRoleError>(
		ContractName.fromString("euroe_stablecoin"),
		EntrypointName.fromString("removeRole"),
		removeRoleRequestSchemaBase64,
		undefined,
		removeRoleErrorSchemaBase64,
	),
	setImplementors: new ReceiveMethod<SetImplementorsRequest, never, SetImplementorsError>(
		ContractName.fromString("euroe_stablecoin"),
		EntrypointName.fromString("setImplementors"),
		setImplementorsRequestSchemaBase64,
		undefined,
		setImplementorsErrorSchemaBase64,
	),
	setPaused: new ReceiveMethod<SetPausedRequest, never, SetPausedError>(
		ContractName.fromString("euroe_stablecoin"),
		EntrypointName.fromString("setPaused"),
		setPausedRequestSchemaBase64,
		undefined,
		setPausedErrorSchemaBase64,
	),
	supports: new ReceiveMethod<SupportsRequest, SupportsResponse, SupportsError>(
		ContractName.fromString("euroe_stablecoin"),
		EntrypointName.fromString("supports"),
		supportsRequestSchemaBase64,
		supportsResponseSchemaBase64,
		supportsErrorSchemaBase64,
	),
	supportsPermit: new ReceiveMethod<SupportsPermitRequest, SupportsPermitResponse, SupportsPermitError>(
		ContractName.fromString("euroe_stablecoin"),
		EntrypointName.fromString("supportsPermit"),
		supportsPermitRequestSchemaBase64,
		supportsPermitResponseSchemaBase64,
		supportsPermitErrorSchemaBase64,
	),
	tokenMetadata: new ReceiveMethod<TokenMetadataRequest, TokenMetadataResponse, TokenMetadataError>(
		ContractName.fromString("euroe_stablecoin"),
		EntrypointName.fromString("tokenMetadata"),
		tokenMetadataRequestSchemaBase64,
		tokenMetadataResponseSchemaBase64,
		tokenMetadataErrorSchemaBase64,
	),
	transfer: new ReceiveMethod<TransferRequest, never, TransferError>(
		ContractName.fromString("euroe_stablecoin"),
		EntrypointName.fromString("transfer"),
		transferRequestSchemaBase64,
		undefined,
		transferErrorSchemaBase64,
	),
	unblock: new ReceiveMethod<UnblockRequest, never, UnblockError>(
		ContractName.fromString("euroe_stablecoin"),
		EntrypointName.fromString("unblock"),
		unblockRequestSchemaBase64,
		undefined,
		unblockErrorSchemaBase64,
	),
	updateOperator: new ReceiveMethod<UpdateOperatorRequest, never, UpdateOperatorError>(
		ContractName.fromString("euroe_stablecoin"),
		EntrypointName.fromString("updateOperator"),
		updateOperatorRequestSchemaBase64,
		undefined,
		updateOperatorErrorSchemaBase64,
	),
	upgrade: new ReceiveMethod<UpgradeRequest, never, UpgradeError>(
		ContractName.fromString("euroe_stablecoin"),
		EntrypointName.fromString("upgrade"),
		upgradeRequestSchemaBase64,
		undefined,
		upgradeErrorSchemaBase64,
	),
	view: new ReceiveMethod<void, ViewResponse>(
		ContractName.fromString("euroe_stablecoin"),
		EntrypointName.fromString("view"),
		undefined,
		viewResponseSchemaBase64,
	),
	viewMessageHash: new ReceiveMethod<ViewMessageHashRequest, ViewMessageHashResponse>(
		ContractName.fromString("euroe_stablecoin"),
		EntrypointName.fromString("viewMessageHash"),
		viewMessageHashRequestSchemaBase64,
		viewMessageHashResponseSchemaBase64,
	),
	viewSupply: new ReceiveMethod<void, ViewSupplyResponse>(
		ContractName.fromString("euroe_stablecoin"),
		EntrypointName.fromString("viewSupply"),
		undefined,
		viewSupplyResponseSchemaBase64,
	),
};
export default euroeStablecoin;
