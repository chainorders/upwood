// This file was generated by the build script. Do not edit it manually.
/* eslint-disable no-mixed-spaces-and-tabs */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* tslint:disable:no-unused-variable */
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
import { RJSFSchema, RegistryWidgetsType, UiSchema } from "@rjsf/utils";
import React from "react";
import { ContractAddress } from "@concordium/web-sdk";
import { default as client } from "./offchainRewards";
import * as types from "./offchainRewards";
import {
	GenericInit,
	GenericInvoke,
	GenericUpdate,
} from "../GenericContractUI";
export const initRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Init Request",
	properties: {
		treasury: {
			type: "object",
			title: "Treasury",
			properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
			required: ["tag"],
			dependencies: {
				tag: {
					oneOf: [
						{
							properties: {
								tag: { enum: ["Account"] },
								Account: {
									type: "array",
									items: { type: "string", title: "" },
								},
							},
						},
						{
							properties: {
								tag: { enum: ["Contract"] },
								Contract: {
									type: "array",
									items: {
										type: "object",
										title: "",
										properties: {
											index: { type: "integer", minimum: 0 },
											subindex: { type: "integer", minimum: 0 },
										},
									},
								},
							},
						},
					],
				},
			},
		},
	},
};
export type initRequestUi = {
	treasury:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
};
export const initErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Init Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"LogError",
				"Unauthorized",
				"InvalidAddress",
				"UnauthorizedInvalidAgent",
				"CheckSignature",
				"InvalidSignature",
				"InvalidNonce",
				"InvalidContractAddress",
				"InvokeContract",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAddress"] },
						InvalidAddress: {
							type: "object",
							title: "InvalidAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["UnauthorizedInvalidAgent"] },
						UnauthorizedInvalidAgent: {
							type: "object",
							title: "UnauthorizedInvalidAgent",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CheckSignature"] },
						CheckSignature: {
							type: "object",
							title: "CheckSignature",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidSignature"] },
						InvalidSignature: {
							type: "object",
							title: "InvalidSignature",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidNonce"] },
						InvalidNonce: {
							type: "object",
							title: "InvalidNonce",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidContractAddress"] },
						InvalidContractAddress: {
							type: "object",
							title: "InvalidContractAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvokeContract"] },
						InvokeContract: {
							type: "object",
							title: "InvokeContract",
							properties: {},
						},
					},
				},
			],
		},
	},
};
export type initErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "InvalidAddress"; InvalidAddress: never }
	| { tag: "UnauthorizedInvalidAgent"; UnauthorizedInvalidAgent: never }
	| { tag: "CheckSignature"; CheckSignature: never }
	| { tag: "InvalidSignature"; InvalidSignature: never }
	| { tag: "InvalidNonce"; InvalidNonce: never }
	| { tag: "InvalidContractAddress"; InvalidContractAddress: never }
	| { tag: "InvokeContract"; InvokeContract: never };
export const addAgentRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Add Agent Request",
	properties: {
		address: {
			type: "object",
			title: "Address",
			properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
			required: ["tag"],
			dependencies: {
				tag: {
					oneOf: [
						{
							properties: {
								tag: { enum: ["Account"] },
								Account: {
									type: "array",
									items: { type: "string", title: "" },
								},
							},
						},
						{
							properties: {
								tag: { enum: ["Contract"] },
								Contract: {
									type: "array",
									items: {
										type: "object",
										title: "",
										properties: {
											index: { type: "integer", minimum: 0 },
											subindex: { type: "integer", minimum: 0 },
										},
									},
								},
							},
						},
					],
				},
			},
		},
	},
};
export type AddAgentRequestUi = {
	address:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
};
export const addAgentErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Add Agent Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"LogError",
				"Unauthorized",
				"InvalidAddress",
				"UnauthorizedInvalidAgent",
				"CheckSignature",
				"InvalidSignature",
				"InvalidNonce",
				"InvalidContractAddress",
				"InvokeContract",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAddress"] },
						InvalidAddress: {
							type: "object",
							title: "InvalidAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["UnauthorizedInvalidAgent"] },
						UnauthorizedInvalidAgent: {
							type: "object",
							title: "UnauthorizedInvalidAgent",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CheckSignature"] },
						CheckSignature: {
							type: "object",
							title: "CheckSignature",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidSignature"] },
						InvalidSignature: {
							type: "object",
							title: "InvalidSignature",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidNonce"] },
						InvalidNonce: {
							type: "object",
							title: "InvalidNonce",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidContractAddress"] },
						InvalidContractAddress: {
							type: "object",
							title: "InvalidContractAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvokeContract"] },
						InvokeContract: {
							type: "object",
							title: "InvokeContract",
							properties: {},
						},
					},
				},
			],
		},
	},
};
export type AddAgentErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "InvalidAddress"; InvalidAddress: never }
	| { tag: "UnauthorizedInvalidAgent"; UnauthorizedInvalidAgent: never }
	| { tag: "CheckSignature"; CheckSignature: never }
	| { tag: "InvalidSignature"; InvalidSignature: never }
	| { tag: "InvalidNonce"; InvalidNonce: never }
	| { tag: "InvalidContractAddress"; InvalidContractAddress: never }
	| { tag: "InvokeContract"; InvokeContract: never };
export const claimRewardRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Claim Reward Request",
	properties: {
		claim: {
			type: "object",
			title: "Claim",
			properties: {
				contract_address: {
					type: "object",
					title: "Contract Address",
					properties: {
						index: { type: "integer", minimum: 0 },
						subindex: { type: "integer", minimum: 0 },
					},
				},
				account: { type: "string", title: "Account" },
				account_nonce: { type: "integer", minimum: 0, title: "Account Nonce" },
				reward_id: {
					type: "array",
					items: { type: "integer", minimum: 0, maximum: 255, title: "" },
					title: "Reward Id",
				},
				reward_token_id: {
					type: "string",
					title: "Reward Token Id",
					default: "",
					format: "byte",
				},
				reward_token_contract: {
					type: "object",
					title: "Reward Token Contract",
					properties: {
						index: { type: "integer", minimum: 0 },
						subindex: { type: "integer", minimum: 0 },
					},
				},
				reward_amount: { type: "string", title: "Reward Amount" },
			},
		},
		signer: { type: "string", title: "Signer" },
		signature: {
			type: "array",
			items: [
				{ type: "integer", minimum: 0, maximum: 255, title: "Key" },
				{
					type: "array",
					items: [
						{ type: "integer", minimum: 0, maximum: 255, title: "Key" },
						{
							type: "object",
							title: "Value",
							properties: { tag: { type: "string", enum: ["Ed25519"] } },
							required: ["tag"],
							dependencies: {
								tag: {
									oneOf: [
										{
											properties: {
												tag: { enum: ["Ed25519"] },
												Ed25519: {
													type: "array",
													items: {
														type: "string",
														title: "",
														default: "",
														format: "byte",
													},
												},
											},
										},
									],
								},
							},
						},
					],
					title: "Value",
				},
			],
			title: "Signature",
		},
	},
};
export type ClaimRewardRequestUi = {
	claim: {
		contract_address: { index: number; subindex: number };
		account: string;
		account_nonce: number;
		reward_id: number[];
		reward_token_id: string;
		reward_token_contract: { index: number; subindex: number };
		reward_amount: string;
	};
	signer: string;
	signature: [number, [number, { tag: "Ed25519"; Ed25519: [string] }][]][];
};
export const claimRewardErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Claim Reward Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"LogError",
				"Unauthorized",
				"InvalidAddress",
				"UnauthorizedInvalidAgent",
				"CheckSignature",
				"InvalidSignature",
				"InvalidNonce",
				"InvalidContractAddress",
				"InvokeContract",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAddress"] },
						InvalidAddress: {
							type: "object",
							title: "InvalidAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["UnauthorizedInvalidAgent"] },
						UnauthorizedInvalidAgent: {
							type: "object",
							title: "UnauthorizedInvalidAgent",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CheckSignature"] },
						CheckSignature: {
							type: "object",
							title: "CheckSignature",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidSignature"] },
						InvalidSignature: {
							type: "object",
							title: "InvalidSignature",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidNonce"] },
						InvalidNonce: {
							type: "object",
							title: "InvalidNonce",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidContractAddress"] },
						InvalidContractAddress: {
							type: "object",
							title: "InvalidContractAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvokeContract"] },
						InvokeContract: {
							type: "object",
							title: "InvokeContract",
							properties: {},
						},
					},
				},
			],
		},
	},
};
export type ClaimRewardErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "InvalidAddress"; InvalidAddress: never }
	| { tag: "UnauthorizedInvalidAgent"; UnauthorizedInvalidAgent: never }
	| { tag: "CheckSignature"; CheckSignature: never }
	| { tag: "InvalidSignature"; InvalidSignature: never }
	| { tag: "InvalidNonce"; InvalidNonce: never }
	| { tag: "InvalidContractAddress"; InvalidContractAddress: never }
	| { tag: "InvokeContract"; InvokeContract: never };
export const isAgentRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Is Agent Request",
	properties: {
		address: {
			type: "object",
			title: "Address",
			properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
			required: ["tag"],
			dependencies: {
				tag: {
					oneOf: [
						{
							properties: {
								tag: { enum: ["Account"] },
								Account: {
									type: "array",
									items: { type: "string", title: "" },
								},
							},
						},
						{
							properties: {
								tag: { enum: ["Contract"] },
								Contract: {
									type: "array",
									items: {
										type: "object",
										title: "",
										properties: {
											index: { type: "integer", minimum: 0 },
											subindex: { type: "integer", minimum: 0 },
										},
									},
								},
							},
						},
					],
				},
			},
		},
	},
};
export type IsAgentRequestUi = {
	address:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
};
export const isAgentResponseJsonSchema: RJSFSchema = {
	type: "boolean",
	title: "Is Agent Response",
};
export type IsAgentResponseUi = boolean;
export const isAgentErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Is Agent Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"LogError",
				"Unauthorized",
				"InvalidAddress",
				"UnauthorizedInvalidAgent",
				"CheckSignature",
				"InvalidSignature",
				"InvalidNonce",
				"InvalidContractAddress",
				"InvokeContract",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAddress"] },
						InvalidAddress: {
							type: "object",
							title: "InvalidAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["UnauthorizedInvalidAgent"] },
						UnauthorizedInvalidAgent: {
							type: "object",
							title: "UnauthorizedInvalidAgent",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CheckSignature"] },
						CheckSignature: {
							type: "object",
							title: "CheckSignature",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidSignature"] },
						InvalidSignature: {
							type: "object",
							title: "InvalidSignature",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidNonce"] },
						InvalidNonce: {
							type: "object",
							title: "InvalidNonce",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidContractAddress"] },
						InvalidContractAddress: {
							type: "object",
							title: "InvalidContractAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvokeContract"] },
						InvokeContract: {
							type: "object",
							title: "InvokeContract",
							properties: {},
						},
					},
				},
			],
		},
	},
};
export type IsAgentErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "InvalidAddress"; InvalidAddress: never }
	| { tag: "UnauthorizedInvalidAgent"; UnauthorizedInvalidAgent: never }
	| { tag: "CheckSignature"; CheckSignature: never }
	| { tag: "InvalidSignature"; InvalidSignature: never }
	| { tag: "InvalidNonce"; InvalidNonce: never }
	| { tag: "InvalidContractAddress"; InvalidContractAddress: never }
	| { tag: "InvokeContract"; InvokeContract: never };
export const removeAgentRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Remove Agent Request",
	properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["Account"] },
						Account: { type: "array", items: { type: "string", title: "" } },
					},
				},
				{
					properties: {
						tag: { enum: ["Contract"] },
						Contract: {
							type: "array",
							items: {
								type: "object",
								title: "",
								properties: {
									index: { type: "integer", minimum: 0 },
									subindex: { type: "integer", minimum: 0 },
								},
							},
						},
					},
				},
			],
		},
	},
};
export type RemoveAgentRequestUi =
	| { tag: "Account"; Account: [string] }
	| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
export const removeAgentErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Remove Agent Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"LogError",
				"Unauthorized",
				"InvalidAddress",
				"UnauthorizedInvalidAgent",
				"CheckSignature",
				"InvalidSignature",
				"InvalidNonce",
				"InvalidContractAddress",
				"InvokeContract",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAddress"] },
						InvalidAddress: {
							type: "object",
							title: "InvalidAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["UnauthorizedInvalidAgent"] },
						UnauthorizedInvalidAgent: {
							type: "object",
							title: "UnauthorizedInvalidAgent",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CheckSignature"] },
						CheckSignature: {
							type: "object",
							title: "CheckSignature",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidSignature"] },
						InvalidSignature: {
							type: "object",
							title: "InvalidSignature",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidNonce"] },
						InvalidNonce: {
							type: "object",
							title: "InvalidNonce",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidContractAddress"] },
						InvalidContractAddress: {
							type: "object",
							title: "InvalidContractAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvokeContract"] },
						InvokeContract: {
							type: "object",
							title: "InvokeContract",
							properties: {},
						},
					},
				},
			],
		},
	},
};
export type RemoveAgentErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "InvalidAddress"; InvalidAddress: never }
	| { tag: "UnauthorizedInvalidAgent"; UnauthorizedInvalidAgent: never }
	| { tag: "CheckSignature"; CheckSignature: never }
	| { tag: "InvalidSignature"; InvalidSignature: never }
	| { tag: "InvalidNonce"; InvalidNonce: never }
	| { tag: "InvalidContractAddress"; InvalidContractAddress: never }
	| { tag: "InvokeContract"; InvokeContract: never };
export const init = (props: {
	onInitialize: (contract: ContractAddress.Type) => void;
	uiSchema?: UiSchema;
	uiWidgets?: RegistryWidgetsType;
}) =>
	GenericInit<types.initRequest, initRequestUi>({
		onContractInitialized: props.onInitialize,
		uiSchema: props.uiSchema,
		uiWidgets: props.uiWidgets,
		method: client.init,
		requestJsonSchema: initRequestJsonSchema,
		requestSchemaBase64: types.initRequestSchemaBase64,
	});
export const ENTRYPOINTS_UI: {
	[key: keyof typeof types.ENTRYPOINTS]: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) => React.JSX.Element;
} = {
	addAgent: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.AddAgentRequest,
			AddAgentRequestUi,
			types.AddAgentError,
			AddAgentErrorUi
		>({
			...props,
			method: client.addAgent,
			requestJsonSchema: addAgentRequestJsonSchema,
			requestSchemaBase64: types.addAgentRequestSchemaBase64,
			errorJsonSchema: addAgentErrorJsonSchema,
			errorSchemaBase64: types.addAgentErrorSchemaBase64,
		}),
	claimReward: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.ClaimRewardRequest,
			ClaimRewardRequestUi,
			types.ClaimRewardError,
			ClaimRewardErrorUi
		>({
			...props,
			method: client.claimReward,
			requestJsonSchema: claimRewardRequestJsonSchema,
			requestSchemaBase64: types.claimRewardRequestSchemaBase64,
			errorJsonSchema: claimRewardErrorJsonSchema,
			errorSchemaBase64: types.claimRewardErrorSchemaBase64,
		}),
	isAgent: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericInvoke<
			types.IsAgentRequest,
			IsAgentRequestUi,
			types.IsAgentResponse,
			IsAgentResponseUi,
			types.IsAgentError,
			IsAgentErrorUi
		>({
			...props,
			method: client.isAgent,
			requestJsonSchema: isAgentRequestJsonSchema,
			requestSchemaBase64: types.isAgentRequestSchemaBase64,
			responseJsonSchema: isAgentResponseJsonSchema,
			responseSchemaBase64: types.isAgentResponseSchemaBase64,
			errorJsonSchema: isAgentErrorJsonSchema,
			errorSchemaBase64: types.isAgentErrorSchemaBase64,
		}),
	removeAgent: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.RemoveAgentRequest,
			RemoveAgentRequestUi,
			types.RemoveAgentError,
			RemoveAgentErrorUi
		>({
			...props,
			method: client.removeAgent,
			requestJsonSchema: removeAgentRequestJsonSchema,
			requestSchemaBase64: types.removeAgentRequestSchemaBase64,
			errorJsonSchema: removeAgentErrorJsonSchema,
			errorSchemaBase64: types.removeAgentErrorSchemaBase64,
		}),
};
