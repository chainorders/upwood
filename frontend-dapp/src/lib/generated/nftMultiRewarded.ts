// This file was generated by the build script. Do not edit it manually.
/* eslint-disable no-mixed-spaces-and-tabs */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* tslint:disable:no-unused-variable */
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
import {
	ContractEvent,
	ContractName,
	EntrypointName,
	ModuleReference,
} from "@concordium/web-sdk";
import { InitMethod, ReceiveMethod } from "../GenericContract";
export const CONTRACT_NAME = "nft_multi_rewarded";
export type initRequest = {
	reward_token: { contract: { index: number; subindex: number }; id: string };
};
export const initRequestSchemaBase64 =
	"FAABAAAADAAAAHJld2FyZF90b2tlbhQAAgAAAAgAAABjb250cmFjdAwCAAAAaWQdAA==";
export const initErrorSchemaBase64 =
	"FQ4AAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDgAAAEludmFsaWRUb2tlbklkAhEAAABJbnN1ZmZpY2llbnRGdW5kcwIMAAAAVW5hdXRob3JpemVkAg0AAABJbnZhbGlkQW1vdW50Ag4AAABJbnZhbGlkQWRkcmVzcwITAAAAVHJhbnNmZXJJbnZva2VFcnJvcgIYAAAAVW5hdXRob3JpemVkSW52YWxpZEFnZW50Ag4AAABDaGVja1NpZ25hdHVyZQIQAAAASW52YWxpZFNpZ25hdHVyZQIMAAAASW52YWxpZE5vbmNlAhYAAABJbnZhbGlkQ29udHJhY3RBZGRyZXNzAgkAAABCdXJuRXJyb3IC";
export type AddAgentError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { InvalidAmount: Record<string, never> }
	| { InvalidAddress: Record<string, never> }
	| { TransferInvokeError: Record<string, never> }
	| { UnauthorizedInvalidAgent: Record<string, never> }
	| { CheckSignature: Record<string, never> }
	| { InvalidSignature: Record<string, never> }
	| { InvalidNonce: Record<string, never> }
	| { InvalidContractAddress: Record<string, never> }
	| { BurnError: Record<string, never> };
export const addAgentErrorSchemaBase64 =
	"FQ4AAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDgAAAEludmFsaWRUb2tlbklkAhEAAABJbnN1ZmZpY2llbnRGdW5kcwIMAAAAVW5hdXRob3JpemVkAg0AAABJbnZhbGlkQW1vdW50Ag4AAABJbnZhbGlkQWRkcmVzcwITAAAAVHJhbnNmZXJJbnZva2VFcnJvcgIYAAAAVW5hdXRob3JpemVkSW52YWxpZEFnZW50Ag4AAABDaGVja1NpZ25hdHVyZQIQAAAASW52YWxpZFNpZ25hdHVyZQIMAAAASW52YWxpZE5vbmNlAhYAAABJbnZhbGlkQ29udHJhY3RBZGRyZXNzAgkAAABCdXJuRXJyb3IC";
export type AddAgentRequest = {
	address:
		| { Account: [string] }
		| { Contract: [{ index: number; subindex: number }] };
};
export const addAgentRequestSchemaBase64 =
	"FAABAAAABwAAAGFkZHJlc3MVAgAAAAcAAABBY2NvdW50AQEAAAALCAAAAENvbnRyYWN0AQEAAAAM";
export type BalanceOfError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { InvalidAmount: Record<string, never> }
	| { InvalidAddress: Record<string, never> }
	| { TransferInvokeError: Record<string, never> }
	| { UnauthorizedInvalidAgent: Record<string, never> }
	| { CheckSignature: Record<string, never> }
	| { InvalidSignature: Record<string, never> }
	| { InvalidNonce: Record<string, never> }
	| { InvalidContractAddress: Record<string, never> }
	| { BurnError: Record<string, never> };
export const balanceOfErrorSchemaBase64 =
	"FQ4AAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDgAAAEludmFsaWRUb2tlbklkAhEAAABJbnN1ZmZpY2llbnRGdW5kcwIMAAAAVW5hdXRob3JpemVkAg0AAABJbnZhbGlkQW1vdW50Ag4AAABJbnZhbGlkQWRkcmVzcwITAAAAVHJhbnNmZXJJbnZva2VFcnJvcgIYAAAAVW5hdXRob3JpemVkSW52YWxpZEFnZW50Ag4AAABDaGVja1NpZ25hdHVyZQIQAAAASW52YWxpZFNpZ25hdHVyZQIMAAAASW52YWxpZE5vbmNlAhYAAABJbnZhbGlkQ29udHJhY3RBZGRyZXNzAgkAAABCdXJuRXJyb3IC";
export type BalanceOfRequest = Array<{
	token_id: string;
	address:
		| { Account: [string] }
		| { Contract: [{ index: number; subindex: number }] };
}>;
export const balanceOfRequestSchemaBase64 =
	"EAEUAAIAAAAIAAAAdG9rZW5faWQdAAcAAABhZGRyZXNzFQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADA==";
export type BalanceOfResponse = Array<string>;
export const balanceOfResponseSchemaBase64 = "EAEbJQAAAA==";
export type IsAgentError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { InvalidAmount: Record<string, never> }
	| { InvalidAddress: Record<string, never> }
	| { TransferInvokeError: Record<string, never> }
	| { UnauthorizedInvalidAgent: Record<string, never> }
	| { CheckSignature: Record<string, never> }
	| { InvalidSignature: Record<string, never> }
	| { InvalidNonce: Record<string, never> }
	| { InvalidContractAddress: Record<string, never> }
	| { BurnError: Record<string, never> };
export const isAgentErrorSchemaBase64 =
	"FQ4AAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDgAAAEludmFsaWRUb2tlbklkAhEAAABJbnN1ZmZpY2llbnRGdW5kcwIMAAAAVW5hdXRob3JpemVkAg0AAABJbnZhbGlkQW1vdW50Ag4AAABJbnZhbGlkQWRkcmVzcwITAAAAVHJhbnNmZXJJbnZva2VFcnJvcgIYAAAAVW5hdXRob3JpemVkSW52YWxpZEFnZW50Ag4AAABDaGVja1NpZ25hdHVyZQIQAAAASW52YWxpZFNpZ25hdHVyZQIMAAAASW52YWxpZE5vbmNlAhYAAABJbnZhbGlkQ29udHJhY3RBZGRyZXNzAgkAAABCdXJuRXJyb3IC";
export type IsAgentRequest = {
	address:
		| { Account: [string] }
		| { Contract: [{ index: number; subindex: number }] };
};
export const isAgentRequestSchemaBase64 =
	"FAABAAAABwAAAGFkZHJlc3MVAgAAAAcAAABBY2NvdW50AQEAAAALCAAAAENvbnRyYWN0AQEAAAAM";
export type IsAgentResponse = boolean;
export const isAgentResponseSchemaBase64 = "AQ==";
export type MintError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { InvalidAmount: Record<string, never> }
	| { InvalidAddress: Record<string, never> }
	| { TransferInvokeError: Record<string, never> }
	| { UnauthorizedInvalidAgent: Record<string, never> }
	| { CheckSignature: Record<string, never> }
	| { InvalidSignature: Record<string, never> }
	| { InvalidNonce: Record<string, never> }
	| { InvalidContractAddress: Record<string, never> }
	| { BurnError: Record<string, never> };
export const mintErrorSchemaBase64 =
	"FQ4AAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDgAAAEludmFsaWRUb2tlbklkAhEAAABJbnN1ZmZpY2llbnRGdW5kcwIMAAAAVW5hdXRob3JpemVkAg0AAABJbnZhbGlkQW1vdW50Ag4AAABJbnZhbGlkQWRkcmVzcwITAAAAVHJhbnNmZXJJbnZva2VFcnJvcgIYAAAAVW5hdXRob3JpemVkSW52YWxpZEFnZW50Ag4AAABDaGVja1NpZ25hdHVyZQIQAAAASW52YWxpZFNpZ25hdHVyZQIMAAAASW52YWxpZE5vbmNlAhYAAABJbnZhbGlkQ29udHJhY3RBZGRyZXNzAgkAAABCdXJuRXJyb3IC";
export type MintRequest = {
	signed_metadata: {
		contract_address: { index: number; subindex: number };
		metadata_url: {
			url: string;
			hash: { None: Record<string, never> } | { Some: [string] };
		};
		account: string;
		account_nonce: bigint;
	};
	signer: string;
	signature: [number, [number, { Ed25519: [string] }][]][];
};
export const mintRequestSchemaBase64 =
	"FAADAAAADwAAAHNpZ25lZF9tZXRhZGF0YRQABAAAABAAAABjb250cmFjdF9hZGRyZXNzDAwAAABtZXRhZGF0YV91cmwUAAIAAAADAAAAdXJsFgEEAAAAaGFzaBUCAAAABAAAAE5vbmUCBAAAAFNvbWUBAQAAAB4gAAAABwAAAGFjY291bnQLDQAAAGFjY291bnRfbm9uY2UFBgAAAHNpZ25lcgsJAAAAc2lnbmF0dXJlEgACEgACFQEAAAAHAAAARWQyNTUxOQEBAAAAHkAAAAA=";
export type MintAgentError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { InvalidAmount: Record<string, never> }
	| { InvalidAddress: Record<string, never> }
	| { TransferInvokeError: Record<string, never> }
	| { UnauthorizedInvalidAgent: Record<string, never> }
	| { CheckSignature: Record<string, never> }
	| { InvalidSignature: Record<string, never> }
	| { InvalidNonce: Record<string, never> }
	| { InvalidContractAddress: Record<string, never> }
	| { BurnError: Record<string, never> };
export const mintAgentErrorSchemaBase64 =
	"FQ4AAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDgAAAEludmFsaWRUb2tlbklkAhEAAABJbnN1ZmZpY2llbnRGdW5kcwIMAAAAVW5hdXRob3JpemVkAg0AAABJbnZhbGlkQW1vdW50Ag4AAABJbnZhbGlkQWRkcmVzcwITAAAAVHJhbnNmZXJJbnZva2VFcnJvcgIYAAAAVW5hdXRob3JpemVkSW52YWxpZEFnZW50Ag4AAABDaGVja1NpZ25hdHVyZQIQAAAASW52YWxpZFNpZ25hdHVyZQIMAAAASW52YWxpZE5vbmNlAhYAAABJbnZhbGlkQ29udHJhY3RBZGRyZXNzAgkAAABCdXJuRXJyb3IC";
export type MintAgentRequest = {
	metadata_url: {
		url: string;
		hash: { None: Record<string, never> } | { Some: [string] };
	};
	account: string;
};
export const mintAgentRequestSchemaBase64 =
	"FAACAAAADAAAAG1ldGFkYXRhX3VybBQAAgAAAAMAAAB1cmwWAgQAAABoYXNoFQIAAAAEAAAATm9uZQIEAAAAU29tZQEBAAAAFgIHAAAAYWNjb3VudAs=";
export type OperatorOfError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { InvalidAmount: Record<string, never> }
	| { InvalidAddress: Record<string, never> }
	| { TransferInvokeError: Record<string, never> }
	| { UnauthorizedInvalidAgent: Record<string, never> }
	| { CheckSignature: Record<string, never> }
	| { InvalidSignature: Record<string, never> }
	| { InvalidNonce: Record<string, never> }
	| { InvalidContractAddress: Record<string, never> }
	| { BurnError: Record<string, never> };
export const operatorOfErrorSchemaBase64 =
	"FQ4AAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDgAAAEludmFsaWRUb2tlbklkAhEAAABJbnN1ZmZpY2llbnRGdW5kcwIMAAAAVW5hdXRob3JpemVkAg0AAABJbnZhbGlkQW1vdW50Ag4AAABJbnZhbGlkQWRkcmVzcwITAAAAVHJhbnNmZXJJbnZva2VFcnJvcgIYAAAAVW5hdXRob3JpemVkSW52YWxpZEFnZW50Ag4AAABDaGVja1NpZ25hdHVyZQIQAAAASW52YWxpZFNpZ25hdHVyZQIMAAAASW52YWxpZE5vbmNlAhYAAABJbnZhbGlkQ29udHJhY3RBZGRyZXNzAgkAAABCdXJuRXJyb3IC";
export type OperatorOfRequest = Array<{
	owner:
		| { Account: [string] }
		| { Contract: [{ index: number; subindex: number }] };
	address:
		| { Account: [string] }
		| { Contract: [{ index: number; subindex: number }] };
}>;
export const operatorOfRequestSchemaBase64 =
	"EAEUAAIAAAAFAAAAb3duZXIVAgAAAAcAAABBY2NvdW50AQEAAAALCAAAAENvbnRyYWN0AQEAAAAMBwAAAGFkZHJlc3MVAgAAAAcAAABBY2NvdW50AQEAAAALCAAAAENvbnRyYWN0AQEAAAAM";
export type OperatorOfResponse = Array<boolean>;
export const operatorOfResponseSchemaBase64 = "EAEB";
export type RemoveAgentError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { InvalidAmount: Record<string, never> }
	| { InvalidAddress: Record<string, never> }
	| { TransferInvokeError: Record<string, never> }
	| { UnauthorizedInvalidAgent: Record<string, never> }
	| { CheckSignature: Record<string, never> }
	| { InvalidSignature: Record<string, never> }
	| { InvalidNonce: Record<string, never> }
	| { InvalidContractAddress: Record<string, never> }
	| { BurnError: Record<string, never> };
export const removeAgentErrorSchemaBase64 =
	"FQ4AAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDgAAAEludmFsaWRUb2tlbklkAhEAAABJbnN1ZmZpY2llbnRGdW5kcwIMAAAAVW5hdXRob3JpemVkAg0AAABJbnZhbGlkQW1vdW50Ag4AAABJbnZhbGlkQWRkcmVzcwITAAAAVHJhbnNmZXJJbnZva2VFcnJvcgIYAAAAVW5hdXRob3JpemVkSW52YWxpZEFnZW50Ag4AAABDaGVja1NpZ25hdHVyZQIQAAAASW52YWxpZFNpZ25hdHVyZQIMAAAASW52YWxpZE5vbmNlAhYAAABJbnZhbGlkQ29udHJhY3RBZGRyZXNzAgkAAABCdXJuRXJyb3IC";
export type RemoveAgentRequest =
	| { Account: [string] }
	| { Contract: [{ index: number; subindex: number }] };
export const removeAgentRequestSchemaBase64 =
	"FQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADA==";
export type SupportsError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { InvalidAmount: Record<string, never> }
	| { InvalidAddress: Record<string, never> }
	| { TransferInvokeError: Record<string, never> }
	| { UnauthorizedInvalidAgent: Record<string, never> }
	| { CheckSignature: Record<string, never> }
	| { InvalidSignature: Record<string, never> }
	| { InvalidNonce: Record<string, never> }
	| { InvalidContractAddress: Record<string, never> }
	| { BurnError: Record<string, never> };
export const supportsErrorSchemaBase64 =
	"FQ4AAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDgAAAEludmFsaWRUb2tlbklkAhEAAABJbnN1ZmZpY2llbnRGdW5kcwIMAAAAVW5hdXRob3JpemVkAg0AAABJbnZhbGlkQW1vdW50Ag4AAABJbnZhbGlkQWRkcmVzcwITAAAAVHJhbnNmZXJJbnZva2VFcnJvcgIYAAAAVW5hdXRob3JpemVkSW52YWxpZEFnZW50Ag4AAABDaGVja1NpZ25hdHVyZQIQAAAASW52YWxpZFNpZ25hdHVyZQIMAAAASW52YWxpZE5vbmNlAhYAAABJbnZhbGlkQ29udHJhY3RBZGRyZXNzAgkAAABCdXJuRXJyb3IC";
export type SupportsRequest = Array<string>;
export const supportsRequestSchemaBase64 = "EAEWAA==";
export type SupportsResponse = Array<
	| { NoSupport: Record<string, never> }
	| { Support: Record<string, never> }
	| { SupportBy: [Array<{ index: number; subindex: number }>] }
>;
export const supportsResponseSchemaBase64 =
	"EAEVAwAAAAkAAABOb1N1cHBvcnQCBwAAAFN1cHBvcnQCCQAAAFN1cHBvcnRCeQEBAAAAEAAM";
export type TokenMetadataError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { InvalidAmount: Record<string, never> }
	| { InvalidAddress: Record<string, never> }
	| { TransferInvokeError: Record<string, never> }
	| { UnauthorizedInvalidAgent: Record<string, never> }
	| { CheckSignature: Record<string, never> }
	| { InvalidSignature: Record<string, never> }
	| { InvalidNonce: Record<string, never> }
	| { InvalidContractAddress: Record<string, never> }
	| { BurnError: Record<string, never> };
export const tokenMetadataErrorSchemaBase64 =
	"FQ4AAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDgAAAEludmFsaWRUb2tlbklkAhEAAABJbnN1ZmZpY2llbnRGdW5kcwIMAAAAVW5hdXRob3JpemVkAg0AAABJbnZhbGlkQW1vdW50Ag4AAABJbnZhbGlkQWRkcmVzcwITAAAAVHJhbnNmZXJJbnZva2VFcnJvcgIYAAAAVW5hdXRob3JpemVkSW52YWxpZEFnZW50Ag4AAABDaGVja1NpZ25hdHVyZQIQAAAASW52YWxpZFNpZ25hdHVyZQIMAAAASW52YWxpZE5vbmNlAhYAAABJbnZhbGlkQ29udHJhY3RBZGRyZXNzAgkAAABCdXJuRXJyb3IC";
export type TokenMetadataRequest = Array<string>;
export const tokenMetadataRequestSchemaBase64 = "EAEdAA==";
export type TokenMetadataResponse = Array<{
	url: string;
	hash: { None: Record<string, never> } | { Some: [string] };
}>;
export const tokenMetadataResponseSchemaBase64 =
	"EAEUAAIAAAADAAAAdXJsFgEEAAAAaGFzaBUCAAAABAAAAE5vbmUCBAAAAFNvbWUBAQAAAB4gAAAA";
export type TransferError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { InvalidAmount: Record<string, never> }
	| { InvalidAddress: Record<string, never> }
	| { TransferInvokeError: Record<string, never> }
	| { UnauthorizedInvalidAgent: Record<string, never> }
	| { CheckSignature: Record<string, never> }
	| { InvalidSignature: Record<string, never> }
	| { InvalidNonce: Record<string, never> }
	| { InvalidContractAddress: Record<string, never> }
	| { BurnError: Record<string, never> };
export const transferErrorSchemaBase64 =
	"FQ4AAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDgAAAEludmFsaWRUb2tlbklkAhEAAABJbnN1ZmZpY2llbnRGdW5kcwIMAAAAVW5hdXRob3JpemVkAg0AAABJbnZhbGlkQW1vdW50Ag4AAABJbnZhbGlkQWRkcmVzcwITAAAAVHJhbnNmZXJJbnZva2VFcnJvcgIYAAAAVW5hdXRob3JpemVkSW52YWxpZEFnZW50Ag4AAABDaGVja1NpZ25hdHVyZQIQAAAASW52YWxpZFNpZ25hdHVyZQIMAAAASW52YWxpZE5vbmNlAhYAAABJbnZhbGlkQ29udHJhY3RBZGRyZXNzAgkAAABCdXJuRXJyb3IC";
export type TransferRequest = Array<{
	token_id: string;
	amount: string;
	from:
		| { Account: [string] }
		| { Contract: [{ index: number; subindex: number }] };
	to:
		| { Account: [string] }
		| { Contract: [{ index: number; subindex: number }, string] };
	data: string;
}>;
export const transferRequestSchemaBase64 =
	"EAEUAAUAAAAIAAAAdG9rZW5faWQdAAYAAABhbW91bnQbJQAAAAQAAABmcm9tFQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADAIAAAB0bxUCAAAABwAAAEFjY291bnQBAQAAAAsIAAAAQ29udHJhY3QBAgAAAAwWAQQAAABkYXRhHQE=";
export type UpdateOperatorError =
	| { ParseError: Record<string, never> }
	| { LogError: Record<string, never> }
	| { InvalidTokenId: Record<string, never> }
	| { InsufficientFunds: Record<string, never> }
	| { Unauthorized: Record<string, never> }
	| { InvalidAmount: Record<string, never> }
	| { InvalidAddress: Record<string, never> }
	| { TransferInvokeError: Record<string, never> }
	| { UnauthorizedInvalidAgent: Record<string, never> }
	| { CheckSignature: Record<string, never> }
	| { InvalidSignature: Record<string, never> }
	| { InvalidNonce: Record<string, never> }
	| { InvalidContractAddress: Record<string, never> }
	| { BurnError: Record<string, never> };
export const updateOperatorErrorSchemaBase64 =
	"FQ4AAAAKAAAAUGFyc2VFcnJvcgIIAAAATG9nRXJyb3ICDgAAAEludmFsaWRUb2tlbklkAhEAAABJbnN1ZmZpY2llbnRGdW5kcwIMAAAAVW5hdXRob3JpemVkAg0AAABJbnZhbGlkQW1vdW50Ag4AAABJbnZhbGlkQWRkcmVzcwITAAAAVHJhbnNmZXJJbnZva2VFcnJvcgIYAAAAVW5hdXRob3JpemVkSW52YWxpZEFnZW50Ag4AAABDaGVja1NpZ25hdHVyZQIQAAAASW52YWxpZFNpZ25hdHVyZQIMAAAASW52YWxpZE5vbmNlAhYAAABJbnZhbGlkQ29udHJhY3RBZGRyZXNzAgkAAABCdXJuRXJyb3IC";
export type UpdateOperatorRequest = Array<{
	update: { Remove: Record<string, never> } | { Add: Record<string, never> };
	operator:
		| { Account: [string] }
		| { Contract: [{ index: number; subindex: number }] };
}>;
export const updateOperatorRequestSchemaBase64 =
	"EAEUAAIAAAAGAAAAdXBkYXRlFQIAAAAGAAAAUmVtb3ZlAgMAAABBZGQCCAAAAG9wZXJhdG9yFQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADA==";
export type event =
	| {
			RewardTokenUpdated: [
				{
					reward_token: {
						contract: { index: number; subindex: number };
						id: string;
					};
				},
			];
	  }
	| {
			AgentAdded: [
				| { Account: [string] }
				| { Contract: [{ index: number; subindex: number }] },
			];
	  }
	| {
			AgentRemoved: [
				| { Account: [string] }
				| { Contract: [{ index: number; subindex: number }] },
			];
	  }
	| {
			NonceUpdated: [
				(
					| { Account: [string] }
					| { Contract: [{ index: number; subindex: number }] }
				),
				bigint,
			];
	  }
	| {
			TokenMetadata: {
				token_id: string;
				metadata_url: {
					url: string;
					hash: { None: Record<string, never> } | { Some: [string] };
				};
			};
	  }
	| {
			UpdateOperator: {
				update:
					| { Remove: Record<string, never> }
					| { Add: Record<string, never> };
				owner:
					| { Account: [string] }
					| { Contract: [{ index: number; subindex: number }] };
				operator:
					| { Account: [string] }
					| { Contract: [{ index: number; subindex: number }] };
			};
	  }
	| {
			Burn: {
				token_id: string;
				amount: string;
				owner:
					| { Account: [string] }
					| { Contract: [{ index: number; subindex: number }] };
			};
	  }
	| {
			Mint: {
				token_id: string;
				amount: string;
				owner:
					| { Account: [string] }
					| { Contract: [{ index: number; subindex: number }] };
			};
	  }
	| {
			Transfer: {
				token_id: string;
				amount: string;
				from:
					| { Account: [string] }
					| { Contract: [{ index: number; subindex: number }] };
				to:
					| { Account: [string] }
					| { Contract: [{ index: number; subindex: number }] };
			};
	  };
export const eventSchemaBase64 =
	"HwkAAAAAEgAAAFJld2FyZFRva2VuVXBkYXRlZAEBAAAAFAABAAAADAAAAHJld2FyZF90b2tlbhQAAgAAAAgAAABjb250cmFjdAwCAAAAaWQdAAEKAAAAQWdlbnRBZGRlZAEBAAAAFQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADAIMAAAAQWdlbnRSZW1vdmVkAQEAAAAVAgAAAAcAAABBY2NvdW50AQEAAAALCAAAAENvbnRyYWN0AQEAAAAMAwwAAABOb25jZVVwZGF0ZWQBAgAAABUCAAAABwAAAEFjY291bnQBAQAAAAsIAAAAQ29udHJhY3QBAQAAAAwF+w0AAABUb2tlbk1ldGFkYXRhAAIAAAAIAAAAdG9rZW5faWQdAAwAAABtZXRhZGF0YV91cmwUAAIAAAADAAAAdXJsFgEEAAAAaGFzaBUCAAAABAAAAE5vbmUCBAAAAFNvbWUBAQAAAB4gAAAA/A4AAABVcGRhdGVPcGVyYXRvcgADAAAABgAAAHVwZGF0ZRUCAAAABgAAAFJlbW92ZQIDAAAAQWRkAgUAAABvd25lchUCAAAABwAAAEFjY291bnQBAQAAAAsIAAAAQ29udHJhY3QBAQAAAAwIAAAAb3BlcmF0b3IVAgAAAAcAAABBY2NvdW50AQEAAAALCAAAAENvbnRyYWN0AQEAAAAM/QQAAABCdXJuAAMAAAAIAAAAdG9rZW5faWQdAAYAAABhbW91bnQbJQAAAAUAAABvd25lchUCAAAABwAAAEFjY291bnQBAQAAAAsIAAAAQ29udHJhY3QBAQAAAAz+BAAAAE1pbnQAAwAAAAgAAAB0b2tlbl9pZB0ABgAAAGFtb3VudBslAAAABQAAAG93bmVyFQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADP8IAAAAVHJhbnNmZXIABAAAAAgAAAB0b2tlbl9pZB0ABgAAAGFtb3VudBslAAAABAAAAGZyb20VAgAAAAcAAABBY2NvdW50AQEAAAALCAAAAENvbnRyYWN0AQEAAAAMAgAAAHRvFQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADA==";
export const ENTRYPOINTS: Record<string, EntrypointName.Type> = {
	addAgent: EntrypointName.fromString("addAgent"),
	balanceOf: EntrypointName.fromString("balanceOf"),
	isAgent: EntrypointName.fromString("isAgent"),
	mint: EntrypointName.fromString("mint"),
	mintAgent: EntrypointName.fromString("mintAgent"),
	operatorOf: EntrypointName.fromString("operatorOf"),
	removeAgent: EntrypointName.fromString("removeAgent"),
	supports: EntrypointName.fromString("supports"),
	tokenMetadata: EntrypointName.fromString("tokenMetadata"),
	transfer: EntrypointName.fromString("transfer"),
	updateOperator: EntrypointName.fromString("updateOperator"),
};
export const ENTRYPOINT_DISPLAY_NAMES: Record<string, string> = {
	addAgent: "Add Agent",
	balanceOf: "Balance Of",
	isAgent: "Is Agent",
	mint: "Mint",
	mintAgent: "Mint Agent",
	operatorOf: "Operator Of",
	removeAgent: "Remove Agent",
	supports: "Supports",
	tokenMetadata: "Token Metadata",
	transfer: "Transfer",
	updateOperator: "Update Operator",
};
export const nftMultiRewarded = {
	init: new InitMethod<initRequest>(
		ModuleReference.fromHexString(
			"0535cd3dd8633b115996b51fdba0bf7914edef3ad4bcc36662802bcfd7cedf64",
		),
		ContractName.fromString("nft_multi_rewarded"),
		initRequestSchemaBase64,
	),
	addAgent: new ReceiveMethod<AddAgentRequest, never, AddAgentError>(
		ContractName.fromString("nft_multi_rewarded"),
		EntrypointName.fromString("addAgent"),
		addAgentRequestSchemaBase64,
		undefined,
		addAgentErrorSchemaBase64,
	),
	balanceOf: new ReceiveMethod<
		BalanceOfRequest,
		BalanceOfResponse,
		BalanceOfError
	>(
		ContractName.fromString("nft_multi_rewarded"),
		EntrypointName.fromString("balanceOf"),
		balanceOfRequestSchemaBase64,
		balanceOfResponseSchemaBase64,
		balanceOfErrorSchemaBase64,
	),
	isAgent: new ReceiveMethod<IsAgentRequest, IsAgentResponse, IsAgentError>(
		ContractName.fromString("nft_multi_rewarded"),
		EntrypointName.fromString("isAgent"),
		isAgentRequestSchemaBase64,
		isAgentResponseSchemaBase64,
		isAgentErrorSchemaBase64,
	),
	mint: new ReceiveMethod<MintRequest, never, MintError>(
		ContractName.fromString("nft_multi_rewarded"),
		EntrypointName.fromString("mint"),
		mintRequestSchemaBase64,
		undefined,
		mintErrorSchemaBase64,
	),
	mintAgent: new ReceiveMethod<MintAgentRequest, never, MintAgentError>(
		ContractName.fromString("nft_multi_rewarded"),
		EntrypointName.fromString("mintAgent"),
		mintAgentRequestSchemaBase64,
		undefined,
		mintAgentErrorSchemaBase64,
	),
	operatorOf: new ReceiveMethod<
		OperatorOfRequest,
		OperatorOfResponse,
		OperatorOfError
	>(
		ContractName.fromString("nft_multi_rewarded"),
		EntrypointName.fromString("operatorOf"),
		operatorOfRequestSchemaBase64,
		operatorOfResponseSchemaBase64,
		operatorOfErrorSchemaBase64,
	),
	removeAgent: new ReceiveMethod<RemoveAgentRequest, never, RemoveAgentError>(
		ContractName.fromString("nft_multi_rewarded"),
		EntrypointName.fromString("removeAgent"),
		removeAgentRequestSchemaBase64,
		undefined,
		removeAgentErrorSchemaBase64,
	),
	supports: new ReceiveMethod<SupportsRequest, SupportsResponse, SupportsError>(
		ContractName.fromString("nft_multi_rewarded"),
		EntrypointName.fromString("supports"),
		supportsRequestSchemaBase64,
		supportsResponseSchemaBase64,
		supportsErrorSchemaBase64,
	),
	tokenMetadata: new ReceiveMethod<
		TokenMetadataRequest,
		TokenMetadataResponse,
		TokenMetadataError
	>(
		ContractName.fromString("nft_multi_rewarded"),
		EntrypointName.fromString("tokenMetadata"),
		tokenMetadataRequestSchemaBase64,
		tokenMetadataResponseSchemaBase64,
		tokenMetadataErrorSchemaBase64,
	),
	transfer: new ReceiveMethod<TransferRequest, never, TransferError>(
		ContractName.fromString("nft_multi_rewarded"),
		EntrypointName.fromString("transfer"),
		transferRequestSchemaBase64,
		undefined,
		transferErrorSchemaBase64,
	),
	updateOperator: new ReceiveMethod<
		UpdateOperatorRequest,
		never,
		UpdateOperatorError
	>(
		ContractName.fromString("nft_multi_rewarded"),
		EntrypointName.fromString("updateOperator"),
		updateOperatorRequestSchemaBase64,
		undefined,
		updateOperatorErrorSchemaBase64,
	),
	deserializeEvent: (event: ContractEvent.Type): event => {
		return ContractEvent.parseWithSchemaTypeBase64(
			event,
			eventSchemaBase64,
		) as event;
	},
};
export default nftMultiRewarded;
