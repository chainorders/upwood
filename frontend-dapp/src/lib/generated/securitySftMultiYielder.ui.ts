// This file was generated by the build script. Do not edit it manually.
/* eslint-disable no-mixed-spaces-and-tabs */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* tslint:disable:no-unused-variable */
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
import { RJSFSchema, RegistryWidgetsType, UiSchema } from "@rjsf/utils";
import React from "react";
import { ContractAddress } from "@concordium/web-sdk";
import { default as client } from "./securitySftMultiYielder";
import * as types from "./securitySftMultiYielder";
import {
	GenericInit,
	GenericInvoke,
	GenericUpdate,
} from "../GenericContractUI";
export const initRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Init Request",
	properties: {
		treasury: {
			type: "object",
			title: "Treasury",
			properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
			required: ["tag"],
			dependencies: {
				tag: {
					oneOf: [
						{
							properties: {
								tag: { enum: ["Account"] },
								Account: {
									type: "array",
									items: { type: "string", title: "" },
								},
							},
						},
						{
							properties: {
								tag: { enum: ["Contract"] },
								Contract: {
									type: "array",
									items: {
										type: "object",
										title: "",
										properties: {
											index: { type: "integer", minimum: 0 },
											subindex: { type: "integer", minimum: 0 },
										},
									},
								},
							},
						},
					],
				},
			},
		},
		agents: {
			type: "array",
			items: {
				type: "object",
				title: "",
				properties: {
					address: {
						type: "object",
						title: "Address",
						properties: {
							tag: { type: "string", enum: ["Account", "Contract"] },
						},
						required: ["tag"],
						dependencies: {
							tag: {
								oneOf: [
									{
										properties: {
											tag: { enum: ["Account"] },
											Account: {
												type: "array",
												items: { type: "string", title: "" },
											},
										},
									},
									{
										properties: {
											tag: { enum: ["Contract"] },
											Contract: {
												type: "array",
												items: {
													type: "object",
													title: "",
													properties: {
														index: { type: "integer", minimum: 0 },
														subindex: { type: "integer", minimum: 0 },
													},
												},
											},
										},
									},
								],
							},
						},
					},
					roles: {
						type: "array",
						items: {
							type: "object",
							title: "",
							properties: {
								tag: {
									type: "string",
									enum: [
										"AddYield",
										"RemoveYield",
										"Operator",
										"UpdateTreasury",
									],
								},
							},
							required: ["tag"],
							dependencies: {
								tag: {
									oneOf: [
										{
											properties: {
												tag: { enum: ["AddYield"] },
												AddYield: {
													type: "object",
													title: "AddYield",
													properties: {},
												},
											},
										},
										{
											properties: {
												tag: { enum: ["RemoveYield"] },
												RemoveYield: {
													type: "object",
													title: "RemoveYield",
													properties: {},
												},
											},
										},
										{
											properties: {
												tag: { enum: ["Operator"] },
												Operator: {
													type: "object",
													title: "Operator",
													properties: {},
												},
											},
										},
										{
											properties: {
												tag: { enum: ["UpdateTreasury"] },
												UpdateTreasury: {
													type: "object",
													title: "UpdateTreasury",
													properties: {},
												},
											},
										},
									],
								},
							},
						},
						title: "Roles",
					},
				},
			},
			title: "Agents",
		},
	},
};
export type initRequestUi = {
	treasury:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
	agents: {
		address:
			| { tag: "Account"; Account: [string] }
			| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
		roles:
			| { tag: "AddYield"; AddYield: never }
			| { tag: "RemoveYield"; RemoveYield: never }
			| { tag: "Operator"; Operator: never }
			| { tag: "UpdateTreasury"; UpdateTreasury: never }[];
	}[];
};
export const initErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Init Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"UnAuthorized",
				"ParseError",
				"LogError",
				"AgentExists",
				"InvalidYield",
				"NoYield",
				"YieldCalculationError",
				"YieldDistribution",
				"TokenBurn",
				"TokenMint",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["UnAuthorized"] },
						UnAuthorized: {
							type: "object",
							title: "UnAuthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["AgentExists"] },
						AgentExists: {
							type: "object",
							title: "AgentExists",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidYield"] },
						InvalidYield: {
							type: "object",
							title: "InvalidYield",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["NoYield"] },
						NoYield: { type: "object", title: "NoYield", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["YieldCalculationError"] },
						YieldCalculationError: {
							type: "object",
							title: "YieldCalculationError",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["YieldDistribution"] },
						YieldDistribution: {
							type: "object",
							title: "YieldDistribution",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["TokenBurn"] },
						TokenBurn: { type: "object", title: "TokenBurn", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["TokenMint"] },
						TokenMint: { type: "object", title: "TokenMint", properties: {} },
					},
				},
			],
		},
	},
};
export type initErrorUi =
	| { tag: "UnAuthorized"; UnAuthorized: never }
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "AgentExists"; AgentExists: never }
	| { tag: "InvalidYield"; InvalidYield: never }
	| { tag: "NoYield"; NoYield: never }
	| { tag: "YieldCalculationError"; YieldCalculationError: never }
	| { tag: "YieldDistribution"; YieldDistribution: never }
	| { tag: "TokenBurn"; TokenBurn: never }
	| { tag: "TokenMint"; TokenMint: never };
export const addAgentRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Add Agent Request",
	properties: {
		address: {
			type: "object",
			title: "Address",
			properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
			required: ["tag"],
			dependencies: {
				tag: {
					oneOf: [
						{
							properties: {
								tag: { enum: ["Account"] },
								Account: {
									type: "array",
									items: { type: "string", title: "" },
								},
							},
						},
						{
							properties: {
								tag: { enum: ["Contract"] },
								Contract: {
									type: "array",
									items: {
										type: "object",
										title: "",
										properties: {
											index: { type: "integer", minimum: 0 },
											subindex: { type: "integer", minimum: 0 },
										},
									},
								},
							},
						},
					],
				},
			},
		},
		roles: {
			type: "array",
			items: {
				type: "object",
				title: "",
				properties: {
					tag: {
						type: "string",
						enum: ["AddYield", "RemoveYield", "Operator", "UpdateTreasury"],
					},
				},
				required: ["tag"],
				dependencies: {
					tag: {
						oneOf: [
							{
								properties: {
									tag: { enum: ["AddYield"] },
									AddYield: {
										type: "object",
										title: "AddYield",
										properties: {},
									},
								},
							},
							{
								properties: {
									tag: { enum: ["RemoveYield"] },
									RemoveYield: {
										type: "object",
										title: "RemoveYield",
										properties: {},
									},
								},
							},
							{
								properties: {
									tag: { enum: ["Operator"] },
									Operator: {
										type: "object",
										title: "Operator",
										properties: {},
									},
								},
							},
							{
								properties: {
									tag: { enum: ["UpdateTreasury"] },
									UpdateTreasury: {
										type: "object",
										title: "UpdateTreasury",
										properties: {},
									},
								},
							},
						],
					},
				},
			},
			title: "Roles",
		},
	},
};
export type AddAgentRequestUi = {
	address:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
	roles:
		| { tag: "AddYield"; AddYield: never }
		| { tag: "RemoveYield"; RemoveYield: never }
		| { tag: "Operator"; Operator: never }
		| { tag: "UpdateTreasury"; UpdateTreasury: never }[];
};
export const removeAgentRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Remove Agent Request",
	properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["Account"] },
						Account: { type: "array", items: { type: "string", title: "" } },
					},
				},
				{
					properties: {
						tag: { enum: ["Contract"] },
						Contract: {
							type: "array",
							items: {
								type: "object",
								title: "",
								properties: {
									index: { type: "integer", minimum: 0 },
									subindex: { type: "integer", minimum: 0 },
								},
							},
						},
					},
				},
			],
		},
	},
};
export type RemoveAgentRequestUi =
	| { tag: "Account"; Account: [string] }
	| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
export const removeYieldRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Remove Yield Request",
	properties: {
		token_contract: {
			type: "object",
			title: "Token Contract",
			properties: {
				index: { type: "integer", minimum: 0 },
				subindex: { type: "integer", minimum: 0 },
			},
		},
		token_id: {
			type: "string",
			title: "Token Id",
			default: "",
			format: "byte",
		},
	},
};
export type RemoveYieldRequestUi = {
	token_contract: { index: number; subindex: number };
	token_id: string;
};
export const setTreasuryRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Set Treasury Request",
	properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["Account"] },
						Account: { type: "array", items: { type: "string", title: "" } },
					},
				},
				{
					properties: {
						tag: { enum: ["Contract"] },
						Contract: {
							type: "array",
							items: {
								type: "object",
								title: "",
								properties: {
									index: { type: "integer", minimum: 0 },
									subindex: { type: "integer", minimum: 0 },
								},
							},
						},
					},
				},
			],
		},
	},
};
export type SetTreasuryRequestUi =
	| { tag: "Account"; Account: [string] }
	| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
export const upsertYieldRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Upsert Yield Request",
	properties: {
		token_contract: {
			type: "object",
			title: "Token Contract",
			properties: {
				index: { type: "integer", minimum: 0 },
				subindex: { type: "integer", minimum: 0 },
			},
		},
		token_id: {
			type: "string",
			title: "Token Id",
			default: "",
			format: "byte",
		},
		yields: {
			type: "array",
			items: {
				type: "object",
				title: "",
				properties: {
					contract: {
						type: "object",
						title: "Contract",
						properties: {
							index: { type: "integer", minimum: 0 },
							subindex: { type: "integer", minimum: 0 },
						},
					},
					token_id: {
						type: "string",
						title: "Token Id",
						default: "",
						format: "byte",
					},
					calculation: {
						type: "object",
						title: "Calculation",
						properties: {
							tag: { type: "string", enum: ["Quantity", "SimpleInterest"] },
						},
						required: ["tag"],
						dependencies: {
							tag: {
								oneOf: [
									{
										properties: {
											tag: { enum: ["Quantity"] },
											Quantity: {
												type: "array",
												items: {
													type: "object",
													title: "",
													properties: {
														numerator: {
															type: "integer",
															minimum: 0,
															title: "Numerator",
														},
														denominator: {
															type: "integer",
															minimum: 0,
															title: "Denominator",
														},
													},
												},
											},
										},
									},
									{
										properties: {
											tag: { enum: ["SimpleInterest"] },
											SimpleInterest: {
												type: "array",
												items: {
													type: "object",
													title: "",
													properties: {
														numerator: {
															type: "integer",
															minimum: 0,
															title: "Numerator",
														},
														denominator: {
															type: "integer",
															minimum: 0,
															title: "Denominator",
														},
													},
												},
											},
										},
									},
								],
							},
						},
					},
				},
			},
			title: "Yields",
		},
	},
};
export type UpsertYieldRequestUi = {
	token_contract: { index: number; subindex: number };
	token_id: string;
	yields: {
		contract: { index: number; subindex: number };
		token_id: string;
		calculation:
			| {
					tag: "Quantity";
					Quantity: [{ numerator: number; denominator: number }];
			  }
			| {
					tag: "SimpleInterest";
					SimpleInterest: [{ numerator: number; denominator: number }];
			  };
	}[];
};
export const yieldForRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Yield For Request",
	properties: {
		owner: { type: "string", title: "Owner" },
		yields: {
			type: "array",
			items: {
				type: "object",
				title: "",
				properties: {
					token_ver_from: {
						type: "string",
						title: "Token Ver From",
						default: "",
						format: "byte",
					},
					token_ver_to: {
						type: "string",
						title: "Token Ver To",
						default: "",
						format: "byte",
					},
					token_contract: {
						type: "object",
						title: "Token Contract",
						properties: {
							index: { type: "integer", minimum: 0 },
							subindex: { type: "integer", minimum: 0 },
						},
					},
					amount: { type: "string", title: "Amount" },
				},
			},
			title: "Yields",
		},
	},
};
export type YieldForRequestUi = {
	owner: string;
	yields: {
		token_ver_from: string;
		token_ver_to: string;
		token_contract: { index: number; subindex: number };
		amount: string;
	}[];
};
export const init = (props: {
	onInitialize: (contract: ContractAddress.Type) => void;
	uiSchema?: UiSchema;
	uiWidgets?: RegistryWidgetsType;
}) =>
	GenericInit<types.initRequest, initRequestUi>({
		onContractInitialized: props.onInitialize,
		uiSchema: props.uiSchema,
		uiWidgets: props.uiWidgets,
		method: client.init,
		requestJsonSchema: initRequestJsonSchema,
		requestSchemaBase64: types.initRequestSchemaBase64,
	});
export const ENTRYPOINTS_UI: {
	[key: keyof typeof types.ENTRYPOINTS]: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) => React.JSX.Element;
} = {
	addAgent: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<types.AddAgentRequest, AddAgentRequestUi, never, never>({
			...props,
			method: client.addAgent,
			requestJsonSchema: addAgentRequestJsonSchema,
			requestSchemaBase64: types.addAgentRequestSchemaBase64,
		}),
	removeAgent: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<types.RemoveAgentRequest, RemoveAgentRequestUi, never, never>(
			{
				...props,
				method: client.removeAgent,
				requestJsonSchema: removeAgentRequestJsonSchema,
				requestSchemaBase64: types.removeAgentRequestSchemaBase64,
			},
		),
	removeYield: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<types.RemoveYieldRequest, RemoveYieldRequestUi, never, never>(
			{
				...props,
				method: client.removeYield,
				requestJsonSchema: removeYieldRequestJsonSchema,
				requestSchemaBase64: types.removeYieldRequestSchemaBase64,
			},
		),
	setTreasury: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<types.SetTreasuryRequest, SetTreasuryRequestUi, never, never>(
			{
				...props,
				method: client.setTreasury,
				requestJsonSchema: setTreasuryRequestJsonSchema,
				requestSchemaBase64: types.setTreasuryRequestSchemaBase64,
			},
		),
	upsertYield: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<types.UpsertYieldRequest, UpsertYieldRequestUi, never, never>(
			{
				...props,
				method: client.upsertYield,
				requestJsonSchema: upsertYieldRequestJsonSchema,
				requestSchemaBase64: types.upsertYieldRequestSchemaBase64,
			},
		),
	yieldFor: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<types.YieldForRequest, YieldForRequestUi, never, never>({
			...props,
			method: client.yieldFor,
			requestJsonSchema: yieldForRequestJsonSchema,
			requestSchemaBase64: types.yieldForRequestSchemaBase64,
		}),
};
