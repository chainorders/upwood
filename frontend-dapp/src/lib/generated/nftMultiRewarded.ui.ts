// This file was generated by the build script. Do not edit it manually.
/* eslint-disable no-mixed-spaces-and-tabs */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* tslint:disable:no-unused-variable */
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
import { RJSFSchema, RegistryWidgetsType, UiSchema } from "@rjsf/utils";
import React from "react";
import { ContractAddress } from "@concordium/web-sdk";
import { default as client } from "./nftMultiRewarded";
import * as types from "./nftMultiRewarded";
import {
	GenericInit,
	GenericInvoke,
	GenericUpdate,
} from "../GenericContractUI";
export const initRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Init Request",
	properties: {
		reward_token: {
			type: "object",
			title: "Reward Token",
			properties: {
				contract: {
					type: "object",
					title: "Contract",
					properties: {
						index: { type: "integer", minimum: 0 },
						subindex: { type: "integer", minimum: 0 },
					},
				},
				id: { type: "string", title: "Id", default: "", format: "byte" },
			},
		},
	},
};
export type initRequestUi = {
	reward_token: { contract: { index: number; subindex: number }; id: string };
};
export const initErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Init Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"LogError",
				"InvalidTokenId",
				"InsufficientFunds",
				"Unauthorized",
				"InvalidAmount",
				"InvalidAddress",
				"TransferInvokeError",
				"UnauthorizedInvalidAgent",
				"CheckSignature",
				"InvalidSignature",
				"InvalidNonce",
				"InvalidContractAddress",
				"BurnError",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAmount"] },
						InvalidAmount: {
							type: "object",
							title: "InvalidAmount",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAddress"] },
						InvalidAddress: {
							type: "object",
							title: "InvalidAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["TransferInvokeError"] },
						TransferInvokeError: {
							type: "object",
							title: "TransferInvokeError",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["UnauthorizedInvalidAgent"] },
						UnauthorizedInvalidAgent: {
							type: "object",
							title: "UnauthorizedInvalidAgent",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CheckSignature"] },
						CheckSignature: {
							type: "object",
							title: "CheckSignature",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidSignature"] },
						InvalidSignature: {
							type: "object",
							title: "InvalidSignature",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidNonce"] },
						InvalidNonce: {
							type: "object",
							title: "InvalidNonce",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidContractAddress"] },
						InvalidContractAddress: {
							type: "object",
							title: "InvalidContractAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["BurnError"] },
						BurnError: { type: "object", title: "BurnError", properties: {} },
					},
				},
			],
		},
	},
};
export type initErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "InvalidAmount"; InvalidAmount: never }
	| { tag: "InvalidAddress"; InvalidAddress: never }
	| { tag: "TransferInvokeError"; TransferInvokeError: never }
	| { tag: "UnauthorizedInvalidAgent"; UnauthorizedInvalidAgent: never }
	| { tag: "CheckSignature"; CheckSignature: never }
	| { tag: "InvalidSignature"; InvalidSignature: never }
	| { tag: "InvalidNonce"; InvalidNonce: never }
	| { tag: "InvalidContractAddress"; InvalidContractAddress: never }
	| { tag: "BurnError"; BurnError: never };
export const addAgentRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Add Agent Request",
	properties: {
		address: {
			type: "object",
			title: "Address",
			properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
			required: ["tag"],
			dependencies: {
				tag: {
					oneOf: [
						{
							properties: {
								tag: { enum: ["Account"] },
								Account: {
									type: "array",
									items: { type: "string", title: "" },
								},
							},
						},
						{
							properties: {
								tag: { enum: ["Contract"] },
								Contract: {
									type: "array",
									items: {
										type: "object",
										title: "",
										properties: {
											index: { type: "integer", minimum: 0 },
											subindex: { type: "integer", minimum: 0 },
										},
									},
								},
							},
						},
					],
				},
			},
		},
	},
};
export type AddAgentRequestUi = {
	address:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
};
export const addAgentErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Add Agent Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"LogError",
				"InvalidTokenId",
				"InsufficientFunds",
				"Unauthorized",
				"InvalidAmount",
				"InvalidAddress",
				"TransferInvokeError",
				"UnauthorizedInvalidAgent",
				"CheckSignature",
				"InvalidSignature",
				"InvalidNonce",
				"InvalidContractAddress",
				"BurnError",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAmount"] },
						InvalidAmount: {
							type: "object",
							title: "InvalidAmount",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAddress"] },
						InvalidAddress: {
							type: "object",
							title: "InvalidAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["TransferInvokeError"] },
						TransferInvokeError: {
							type: "object",
							title: "TransferInvokeError",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["UnauthorizedInvalidAgent"] },
						UnauthorizedInvalidAgent: {
							type: "object",
							title: "UnauthorizedInvalidAgent",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CheckSignature"] },
						CheckSignature: {
							type: "object",
							title: "CheckSignature",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidSignature"] },
						InvalidSignature: {
							type: "object",
							title: "InvalidSignature",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidNonce"] },
						InvalidNonce: {
							type: "object",
							title: "InvalidNonce",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidContractAddress"] },
						InvalidContractAddress: {
							type: "object",
							title: "InvalidContractAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["BurnError"] },
						BurnError: { type: "object", title: "BurnError", properties: {} },
					},
				},
			],
		},
	},
};
export type AddAgentErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "InvalidAmount"; InvalidAmount: never }
	| { tag: "InvalidAddress"; InvalidAddress: never }
	| { tag: "TransferInvokeError"; TransferInvokeError: never }
	| { tag: "UnauthorizedInvalidAgent"; UnauthorizedInvalidAgent: never }
	| { tag: "CheckSignature"; CheckSignature: never }
	| { tag: "InvalidSignature"; InvalidSignature: never }
	| { tag: "InvalidNonce"; InvalidNonce: never }
	| { tag: "InvalidContractAddress"; InvalidContractAddress: never }
	| { tag: "BurnError"; BurnError: never };
export const balanceOfRequestJsonSchema: RJSFSchema = {
	type: "array",
	items: {
		type: "object",
		title: "",
		properties: {
			token_id: {
				type: "string",
				title: "Token Id",
				default: "",
				format: "byte",
			},
			address: {
				type: "object",
				title: "Address",
				properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
				required: ["tag"],
				dependencies: {
					tag: {
						oneOf: [
							{
								properties: {
									tag: { enum: ["Account"] },
									Account: {
										type: "array",
										items: { type: "string", title: "" },
									},
								},
							},
							{
								properties: {
									tag: { enum: ["Contract"] },
									Contract: {
										type: "array",
										items: {
											type: "object",
											title: "",
											properties: {
												index: { type: "integer", minimum: 0 },
												subindex: { type: "integer", minimum: 0 },
											},
										},
									},
								},
							},
						],
					},
				},
			},
		},
	},
	title: "Balance Of Request",
};
export type BalanceOfRequestUi = {
	token_id: string;
	address:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
}[];
export const balanceOfResponseJsonSchema: RJSFSchema = {
	type: "array",
	items: { type: "string", title: "" },
	title: "Balance Of Response",
};
export type BalanceOfResponseUi = string[];
export const balanceOfErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Balance Of Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"LogError",
				"InvalidTokenId",
				"InsufficientFunds",
				"Unauthorized",
				"InvalidAmount",
				"InvalidAddress",
				"TransferInvokeError",
				"UnauthorizedInvalidAgent",
				"CheckSignature",
				"InvalidSignature",
				"InvalidNonce",
				"InvalidContractAddress",
				"BurnError",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAmount"] },
						InvalidAmount: {
							type: "object",
							title: "InvalidAmount",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAddress"] },
						InvalidAddress: {
							type: "object",
							title: "InvalidAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["TransferInvokeError"] },
						TransferInvokeError: {
							type: "object",
							title: "TransferInvokeError",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["UnauthorizedInvalidAgent"] },
						UnauthorizedInvalidAgent: {
							type: "object",
							title: "UnauthorizedInvalidAgent",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CheckSignature"] },
						CheckSignature: {
							type: "object",
							title: "CheckSignature",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidSignature"] },
						InvalidSignature: {
							type: "object",
							title: "InvalidSignature",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidNonce"] },
						InvalidNonce: {
							type: "object",
							title: "InvalidNonce",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidContractAddress"] },
						InvalidContractAddress: {
							type: "object",
							title: "InvalidContractAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["BurnError"] },
						BurnError: { type: "object", title: "BurnError", properties: {} },
					},
				},
			],
		},
	},
};
export type BalanceOfErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "InvalidAmount"; InvalidAmount: never }
	| { tag: "InvalidAddress"; InvalidAddress: never }
	| { tag: "TransferInvokeError"; TransferInvokeError: never }
	| { tag: "UnauthorizedInvalidAgent"; UnauthorizedInvalidAgent: never }
	| { tag: "CheckSignature"; CheckSignature: never }
	| { tag: "InvalidSignature"; InvalidSignature: never }
	| { tag: "InvalidNonce"; InvalidNonce: never }
	| { tag: "InvalidContractAddress"; InvalidContractAddress: never }
	| { tag: "BurnError"; BurnError: never };
export const isAgentRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Is Agent Request",
	properties: {
		address: {
			type: "object",
			title: "Address",
			properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
			required: ["tag"],
			dependencies: {
				tag: {
					oneOf: [
						{
							properties: {
								tag: { enum: ["Account"] },
								Account: {
									type: "array",
									items: { type: "string", title: "" },
								},
							},
						},
						{
							properties: {
								tag: { enum: ["Contract"] },
								Contract: {
									type: "array",
									items: {
										type: "object",
										title: "",
										properties: {
											index: { type: "integer", minimum: 0 },
											subindex: { type: "integer", minimum: 0 },
										},
									},
								},
							},
						},
					],
				},
			},
		},
	},
};
export type IsAgentRequestUi = {
	address:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
};
export const isAgentResponseJsonSchema: RJSFSchema = {
	type: "boolean",
	title: "Is Agent Response",
};
export type IsAgentResponseUi = boolean;
export const isAgentErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Is Agent Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"LogError",
				"InvalidTokenId",
				"InsufficientFunds",
				"Unauthorized",
				"InvalidAmount",
				"InvalidAddress",
				"TransferInvokeError",
				"UnauthorizedInvalidAgent",
				"CheckSignature",
				"InvalidSignature",
				"InvalidNonce",
				"InvalidContractAddress",
				"BurnError",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAmount"] },
						InvalidAmount: {
							type: "object",
							title: "InvalidAmount",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAddress"] },
						InvalidAddress: {
							type: "object",
							title: "InvalidAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["TransferInvokeError"] },
						TransferInvokeError: {
							type: "object",
							title: "TransferInvokeError",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["UnauthorizedInvalidAgent"] },
						UnauthorizedInvalidAgent: {
							type: "object",
							title: "UnauthorizedInvalidAgent",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CheckSignature"] },
						CheckSignature: {
							type: "object",
							title: "CheckSignature",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidSignature"] },
						InvalidSignature: {
							type: "object",
							title: "InvalidSignature",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidNonce"] },
						InvalidNonce: {
							type: "object",
							title: "InvalidNonce",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidContractAddress"] },
						InvalidContractAddress: {
							type: "object",
							title: "InvalidContractAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["BurnError"] },
						BurnError: { type: "object", title: "BurnError", properties: {} },
					},
				},
			],
		},
	},
};
export type IsAgentErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "InvalidAmount"; InvalidAmount: never }
	| { tag: "InvalidAddress"; InvalidAddress: never }
	| { tag: "TransferInvokeError"; TransferInvokeError: never }
	| { tag: "UnauthorizedInvalidAgent"; UnauthorizedInvalidAgent: never }
	| { tag: "CheckSignature"; CheckSignature: never }
	| { tag: "InvalidSignature"; InvalidSignature: never }
	| { tag: "InvalidNonce"; InvalidNonce: never }
	| { tag: "InvalidContractAddress"; InvalidContractAddress: never }
	| { tag: "BurnError"; BurnError: never };
export const mintRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Mint Request",
	properties: {
		signed_metadata: {
			type: "object",
			title: "Signed Metadata",
			properties: {
				contract_address: {
					type: "object",
					title: "Contract Address",
					properties: {
						index: { type: "integer", minimum: 0 },
						subindex: { type: "integer", minimum: 0 },
					},
				},
				metadata_url: {
					type: "object",
					title: "Metadata Url",
					properties: {
						url: { type: "string", title: "Url", default: "" },
						hash: {
							type: "object",
							title: "Hash",
							properties: { tag: { type: "string", enum: ["None", "Some"] } },
							required: ["tag"],
							dependencies: {
								tag: {
									oneOf: [
										{
											properties: {
												tag: { enum: ["None"] },
												None: { type: "object", title: "None", properties: {} },
											},
										},
										{
											properties: {
												tag: { enum: ["Some"] },
												Some: {
													type: "array",
													items: {
														type: "string",
														title: "",
														default: "",
														format: "byte",
													},
												},
											},
										},
									],
								},
							},
						},
					},
				},
				account: { type: "string", title: "Account" },
				account_nonce: { type: "integer", minimum: 0, title: "Account Nonce" },
			},
		},
		signer: { type: "string", title: "Signer" },
		signature: {
			type: "array",
			items: [
				{ type: "integer", minimum: 0, maximum: 255, title: "Key" },
				{
					type: "array",
					items: [
						{ type: "integer", minimum: 0, maximum: 255, title: "Key" },
						{
							type: "object",
							title: "Value",
							properties: { tag: { type: "string", enum: ["Ed25519"] } },
							required: ["tag"],
							dependencies: {
								tag: {
									oneOf: [
										{
											properties: {
												tag: { enum: ["Ed25519"] },
												Ed25519: {
													type: "array",
													items: {
														type: "string",
														title: "",
														default: "",
														format: "byte",
													},
												},
											},
										},
									],
								},
							},
						},
					],
					title: "Value",
				},
			],
			title: "Signature",
		},
	},
};
export type MintRequestUi = {
	signed_metadata: {
		contract_address: { index: number; subindex: number };
		metadata_url: {
			url: string;
			hash: { tag: "None"; None: never } | { tag: "Some"; Some: [string] };
		};
		account: string;
		account_nonce: number;
	};
	signer: string;
	signature: [number, [number, { tag: "Ed25519"; Ed25519: [string] }][]][];
};
export const mintErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Mint Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"LogError",
				"InvalidTokenId",
				"InsufficientFunds",
				"Unauthorized",
				"InvalidAmount",
				"InvalidAddress",
				"TransferInvokeError",
				"UnauthorizedInvalidAgent",
				"CheckSignature",
				"InvalidSignature",
				"InvalidNonce",
				"InvalidContractAddress",
				"BurnError",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAmount"] },
						InvalidAmount: {
							type: "object",
							title: "InvalidAmount",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAddress"] },
						InvalidAddress: {
							type: "object",
							title: "InvalidAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["TransferInvokeError"] },
						TransferInvokeError: {
							type: "object",
							title: "TransferInvokeError",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["UnauthorizedInvalidAgent"] },
						UnauthorizedInvalidAgent: {
							type: "object",
							title: "UnauthorizedInvalidAgent",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CheckSignature"] },
						CheckSignature: {
							type: "object",
							title: "CheckSignature",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidSignature"] },
						InvalidSignature: {
							type: "object",
							title: "InvalidSignature",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidNonce"] },
						InvalidNonce: {
							type: "object",
							title: "InvalidNonce",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidContractAddress"] },
						InvalidContractAddress: {
							type: "object",
							title: "InvalidContractAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["BurnError"] },
						BurnError: { type: "object", title: "BurnError", properties: {} },
					},
				},
			],
		},
	},
};
export type MintErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "InvalidAmount"; InvalidAmount: never }
	| { tag: "InvalidAddress"; InvalidAddress: never }
	| { tag: "TransferInvokeError"; TransferInvokeError: never }
	| { tag: "UnauthorizedInvalidAgent"; UnauthorizedInvalidAgent: never }
	| { tag: "CheckSignature"; CheckSignature: never }
	| { tag: "InvalidSignature"; InvalidSignature: never }
	| { tag: "InvalidNonce"; InvalidNonce: never }
	| { tag: "InvalidContractAddress"; InvalidContractAddress: never }
	| { tag: "BurnError"; BurnError: never };
export const mintAgentRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Mint Agent Request",
	properties: {
		metadata_url: {
			type: "object",
			title: "Metadata Url",
			properties: {
				url: { type: "string", title: "Url", default: "" },
				hash: {
					type: "object",
					title: "Hash",
					properties: { tag: { type: "string", enum: ["None", "Some"] } },
					required: ["tag"],
					dependencies: {
						tag: {
							oneOf: [
								{
									properties: {
										tag: { enum: ["None"] },
										None: { type: "object", title: "None", properties: {} },
									},
								},
								{
									properties: {
										tag: { enum: ["Some"] },
										Some: {
											type: "array",
											items: { type: "string", title: "", default: "" },
										},
									},
								},
							],
						},
					},
				},
			},
		},
		account: { type: "string", title: "Account" },
	},
};
export type MintAgentRequestUi = {
	metadata_url: {
		url: string;
		hash: { tag: "None"; None: never } | { tag: "Some"; Some: [string] };
	};
	account: string;
};
export const mintAgentErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Mint Agent Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"LogError",
				"InvalidTokenId",
				"InsufficientFunds",
				"Unauthorized",
				"InvalidAmount",
				"InvalidAddress",
				"TransferInvokeError",
				"UnauthorizedInvalidAgent",
				"CheckSignature",
				"InvalidSignature",
				"InvalidNonce",
				"InvalidContractAddress",
				"BurnError",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAmount"] },
						InvalidAmount: {
							type: "object",
							title: "InvalidAmount",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAddress"] },
						InvalidAddress: {
							type: "object",
							title: "InvalidAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["TransferInvokeError"] },
						TransferInvokeError: {
							type: "object",
							title: "TransferInvokeError",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["UnauthorizedInvalidAgent"] },
						UnauthorizedInvalidAgent: {
							type: "object",
							title: "UnauthorizedInvalidAgent",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CheckSignature"] },
						CheckSignature: {
							type: "object",
							title: "CheckSignature",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidSignature"] },
						InvalidSignature: {
							type: "object",
							title: "InvalidSignature",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidNonce"] },
						InvalidNonce: {
							type: "object",
							title: "InvalidNonce",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidContractAddress"] },
						InvalidContractAddress: {
							type: "object",
							title: "InvalidContractAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["BurnError"] },
						BurnError: { type: "object", title: "BurnError", properties: {} },
					},
				},
			],
		},
	},
};
export type MintAgentErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "InvalidAmount"; InvalidAmount: never }
	| { tag: "InvalidAddress"; InvalidAddress: never }
	| { tag: "TransferInvokeError"; TransferInvokeError: never }
	| { tag: "UnauthorizedInvalidAgent"; UnauthorizedInvalidAgent: never }
	| { tag: "CheckSignature"; CheckSignature: never }
	| { tag: "InvalidSignature"; InvalidSignature: never }
	| { tag: "InvalidNonce"; InvalidNonce: never }
	| { tag: "InvalidContractAddress"; InvalidContractAddress: never }
	| { tag: "BurnError"; BurnError: never };
export const operatorOfRequestJsonSchema: RJSFSchema = {
	type: "array",
	items: {
		type: "object",
		title: "",
		properties: {
			owner: {
				type: "object",
				title: "Owner",
				properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
				required: ["tag"],
				dependencies: {
					tag: {
						oneOf: [
							{
								properties: {
									tag: { enum: ["Account"] },
									Account: {
										type: "array",
										items: { type: "string", title: "" },
									},
								},
							},
							{
								properties: {
									tag: { enum: ["Contract"] },
									Contract: {
										type: "array",
										items: {
											type: "object",
											title: "",
											properties: {
												index: { type: "integer", minimum: 0 },
												subindex: { type: "integer", minimum: 0 },
											},
										},
									},
								},
							},
						],
					},
				},
			},
			address: {
				type: "object",
				title: "Address",
				properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
				required: ["tag"],
				dependencies: {
					tag: {
						oneOf: [
							{
								properties: {
									tag: { enum: ["Account"] },
									Account: {
										type: "array",
										items: { type: "string", title: "" },
									},
								},
							},
							{
								properties: {
									tag: { enum: ["Contract"] },
									Contract: {
										type: "array",
										items: {
											type: "object",
											title: "",
											properties: {
												index: { type: "integer", minimum: 0 },
												subindex: { type: "integer", minimum: 0 },
											},
										},
									},
								},
							},
						],
					},
				},
			},
		},
	},
	title: "Operator Of Request",
};
export type OperatorOfRequestUi = {
	owner:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
	address:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
}[];
export const operatorOfResponseJsonSchema: RJSFSchema = {
	type: "array",
	items: { type: "boolean", title: "" },
	title: "Operator Of Response",
};
export type OperatorOfResponseUi = boolean[];
export const operatorOfErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Operator Of Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"LogError",
				"InvalidTokenId",
				"InsufficientFunds",
				"Unauthorized",
				"InvalidAmount",
				"InvalidAddress",
				"TransferInvokeError",
				"UnauthorizedInvalidAgent",
				"CheckSignature",
				"InvalidSignature",
				"InvalidNonce",
				"InvalidContractAddress",
				"BurnError",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAmount"] },
						InvalidAmount: {
							type: "object",
							title: "InvalidAmount",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAddress"] },
						InvalidAddress: {
							type: "object",
							title: "InvalidAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["TransferInvokeError"] },
						TransferInvokeError: {
							type: "object",
							title: "TransferInvokeError",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["UnauthorizedInvalidAgent"] },
						UnauthorizedInvalidAgent: {
							type: "object",
							title: "UnauthorizedInvalidAgent",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CheckSignature"] },
						CheckSignature: {
							type: "object",
							title: "CheckSignature",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidSignature"] },
						InvalidSignature: {
							type: "object",
							title: "InvalidSignature",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidNonce"] },
						InvalidNonce: {
							type: "object",
							title: "InvalidNonce",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidContractAddress"] },
						InvalidContractAddress: {
							type: "object",
							title: "InvalidContractAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["BurnError"] },
						BurnError: { type: "object", title: "BurnError", properties: {} },
					},
				},
			],
		},
	},
};
export type OperatorOfErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "InvalidAmount"; InvalidAmount: never }
	| { tag: "InvalidAddress"; InvalidAddress: never }
	| { tag: "TransferInvokeError"; TransferInvokeError: never }
	| { tag: "UnauthorizedInvalidAgent"; UnauthorizedInvalidAgent: never }
	| { tag: "CheckSignature"; CheckSignature: never }
	| { tag: "InvalidSignature"; InvalidSignature: never }
	| { tag: "InvalidNonce"; InvalidNonce: never }
	| { tag: "InvalidContractAddress"; InvalidContractAddress: never }
	| { tag: "BurnError"; BurnError: never };
export const removeAgentRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Remove Agent Request",
	properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["Account"] },
						Account: { type: "array", items: { type: "string", title: "" } },
					},
				},
				{
					properties: {
						tag: { enum: ["Contract"] },
						Contract: {
							type: "array",
							items: {
								type: "object",
								title: "",
								properties: {
									index: { type: "integer", minimum: 0 },
									subindex: { type: "integer", minimum: 0 },
								},
							},
						},
					},
				},
			],
		},
	},
};
export type RemoveAgentRequestUi =
	| { tag: "Account"; Account: [string] }
	| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
export const removeAgentErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Remove Agent Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"LogError",
				"InvalidTokenId",
				"InsufficientFunds",
				"Unauthorized",
				"InvalidAmount",
				"InvalidAddress",
				"TransferInvokeError",
				"UnauthorizedInvalidAgent",
				"CheckSignature",
				"InvalidSignature",
				"InvalidNonce",
				"InvalidContractAddress",
				"BurnError",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAmount"] },
						InvalidAmount: {
							type: "object",
							title: "InvalidAmount",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAddress"] },
						InvalidAddress: {
							type: "object",
							title: "InvalidAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["TransferInvokeError"] },
						TransferInvokeError: {
							type: "object",
							title: "TransferInvokeError",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["UnauthorizedInvalidAgent"] },
						UnauthorizedInvalidAgent: {
							type: "object",
							title: "UnauthorizedInvalidAgent",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CheckSignature"] },
						CheckSignature: {
							type: "object",
							title: "CheckSignature",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidSignature"] },
						InvalidSignature: {
							type: "object",
							title: "InvalidSignature",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidNonce"] },
						InvalidNonce: {
							type: "object",
							title: "InvalidNonce",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidContractAddress"] },
						InvalidContractAddress: {
							type: "object",
							title: "InvalidContractAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["BurnError"] },
						BurnError: { type: "object", title: "BurnError", properties: {} },
					},
				},
			],
		},
	},
};
export type RemoveAgentErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "InvalidAmount"; InvalidAmount: never }
	| { tag: "InvalidAddress"; InvalidAddress: never }
	| { tag: "TransferInvokeError"; TransferInvokeError: never }
	| { tag: "UnauthorizedInvalidAgent"; UnauthorizedInvalidAgent: never }
	| { tag: "CheckSignature"; CheckSignature: never }
	| { tag: "InvalidSignature"; InvalidSignature: never }
	| { tag: "InvalidNonce"; InvalidNonce: never }
	| { tag: "InvalidContractAddress"; InvalidContractAddress: never }
	| { tag: "BurnError"; BurnError: never };
export const supportsRequestJsonSchema: RJSFSchema = {
	type: "array",
	items: { type: "string", title: "", default: "" },
	title: "Supports Request",
};
export type SupportsRequestUi = string[];
export const supportsResponseJsonSchema: RJSFSchema = {
	type: "array",
	items: {
		type: "object",
		title: "",
		properties: {
			tag: { type: "string", enum: ["NoSupport", "Support", "SupportBy"] },
		},
		required: ["tag"],
		dependencies: {
			tag: {
				oneOf: [
					{
						properties: {
							tag: { enum: ["NoSupport"] },
							NoSupport: { type: "object", title: "NoSupport", properties: {} },
						},
					},
					{
						properties: {
							tag: { enum: ["Support"] },
							Support: { type: "object", title: "Support", properties: {} },
						},
					},
					{
						properties: {
							tag: { enum: ["SupportBy"] },
							SupportBy: {
								type: "array",
								items: {
									type: "array",
									items: {
										type: "object",
										title: "",
										properties: {
											index: { type: "integer", minimum: 0 },
											subindex: { type: "integer", minimum: 0 },
										},
									},
									title: "",
								},
							},
						},
					},
				],
			},
		},
	},
	title: "Supports Response",
};
export type SupportsResponseUi =
	| { tag: "NoSupport"; NoSupport: never }
	| { tag: "Support"; Support: never }
	| { tag: "SupportBy"; SupportBy: [{ index: number; subindex: number }[]] }[];
export const supportsErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Supports Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"LogError",
				"InvalidTokenId",
				"InsufficientFunds",
				"Unauthorized",
				"InvalidAmount",
				"InvalidAddress",
				"TransferInvokeError",
				"UnauthorizedInvalidAgent",
				"CheckSignature",
				"InvalidSignature",
				"InvalidNonce",
				"InvalidContractAddress",
				"BurnError",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAmount"] },
						InvalidAmount: {
							type: "object",
							title: "InvalidAmount",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAddress"] },
						InvalidAddress: {
							type: "object",
							title: "InvalidAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["TransferInvokeError"] },
						TransferInvokeError: {
							type: "object",
							title: "TransferInvokeError",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["UnauthorizedInvalidAgent"] },
						UnauthorizedInvalidAgent: {
							type: "object",
							title: "UnauthorizedInvalidAgent",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CheckSignature"] },
						CheckSignature: {
							type: "object",
							title: "CheckSignature",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidSignature"] },
						InvalidSignature: {
							type: "object",
							title: "InvalidSignature",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidNonce"] },
						InvalidNonce: {
							type: "object",
							title: "InvalidNonce",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidContractAddress"] },
						InvalidContractAddress: {
							type: "object",
							title: "InvalidContractAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["BurnError"] },
						BurnError: { type: "object", title: "BurnError", properties: {} },
					},
				},
			],
		},
	},
};
export type SupportsErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "InvalidAmount"; InvalidAmount: never }
	| { tag: "InvalidAddress"; InvalidAddress: never }
	| { tag: "TransferInvokeError"; TransferInvokeError: never }
	| { tag: "UnauthorizedInvalidAgent"; UnauthorizedInvalidAgent: never }
	| { tag: "CheckSignature"; CheckSignature: never }
	| { tag: "InvalidSignature"; InvalidSignature: never }
	| { tag: "InvalidNonce"; InvalidNonce: never }
	| { tag: "InvalidContractAddress"; InvalidContractAddress: never }
	| { tag: "BurnError"; BurnError: never };
export const tokenMetadataRequestJsonSchema: RJSFSchema = {
	type: "array",
	items: { type: "string", title: "", default: "", format: "byte" },
	title: "Token Metadata Request",
};
export type TokenMetadataRequestUi = string[];
export const tokenMetadataResponseJsonSchema: RJSFSchema = {
	type: "array",
	items: {
		type: "object",
		title: "",
		properties: {
			url: { type: "string", title: "Url", default: "" },
			hash: {
				type: "object",
				title: "Hash",
				properties: { tag: { type: "string", enum: ["None", "Some"] } },
				required: ["tag"],
				dependencies: {
					tag: {
						oneOf: [
							{
								properties: {
									tag: { enum: ["None"] },
									None: { type: "object", title: "None", properties: {} },
								},
							},
							{
								properties: {
									tag: { enum: ["Some"] },
									Some: {
										type: "array",
										items: {
											type: "string",
											title: "",
											default: "",
											format: "byte",
										},
									},
								},
							},
						],
					},
				},
			},
		},
	},
	title: "Token Metadata Response",
};
export type TokenMetadataResponseUi = {
	url: string;
	hash: { tag: "None"; None: never } | { tag: "Some"; Some: [string] };
}[];
export const tokenMetadataErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Token Metadata Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"LogError",
				"InvalidTokenId",
				"InsufficientFunds",
				"Unauthorized",
				"InvalidAmount",
				"InvalidAddress",
				"TransferInvokeError",
				"UnauthorizedInvalidAgent",
				"CheckSignature",
				"InvalidSignature",
				"InvalidNonce",
				"InvalidContractAddress",
				"BurnError",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAmount"] },
						InvalidAmount: {
							type: "object",
							title: "InvalidAmount",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAddress"] },
						InvalidAddress: {
							type: "object",
							title: "InvalidAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["TransferInvokeError"] },
						TransferInvokeError: {
							type: "object",
							title: "TransferInvokeError",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["UnauthorizedInvalidAgent"] },
						UnauthorizedInvalidAgent: {
							type: "object",
							title: "UnauthorizedInvalidAgent",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CheckSignature"] },
						CheckSignature: {
							type: "object",
							title: "CheckSignature",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidSignature"] },
						InvalidSignature: {
							type: "object",
							title: "InvalidSignature",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidNonce"] },
						InvalidNonce: {
							type: "object",
							title: "InvalidNonce",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidContractAddress"] },
						InvalidContractAddress: {
							type: "object",
							title: "InvalidContractAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["BurnError"] },
						BurnError: { type: "object", title: "BurnError", properties: {} },
					},
				},
			],
		},
	},
};
export type TokenMetadataErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "InvalidAmount"; InvalidAmount: never }
	| { tag: "InvalidAddress"; InvalidAddress: never }
	| { tag: "TransferInvokeError"; TransferInvokeError: never }
	| { tag: "UnauthorizedInvalidAgent"; UnauthorizedInvalidAgent: never }
	| { tag: "CheckSignature"; CheckSignature: never }
	| { tag: "InvalidSignature"; InvalidSignature: never }
	| { tag: "InvalidNonce"; InvalidNonce: never }
	| { tag: "InvalidContractAddress"; InvalidContractAddress: never }
	| { tag: "BurnError"; BurnError: never };
export const transferRequestJsonSchema: RJSFSchema = {
	type: "array",
	items: {
		type: "object",
		title: "",
		properties: {
			token_id: {
				type: "string",
				title: "Token Id",
				default: "",
				format: "byte",
			},
			amount: { type: "string", title: "Amount" },
			from: {
				type: "object",
				title: "From",
				properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
				required: ["tag"],
				dependencies: {
					tag: {
						oneOf: [
							{
								properties: {
									tag: { enum: ["Account"] },
									Account: {
										type: "array",
										items: { type: "string", title: "" },
									},
								},
							},
							{
								properties: {
									tag: { enum: ["Contract"] },
									Contract: {
										type: "array",
										items: {
											type: "object",
											title: "",
											properties: {
												index: { type: "integer", minimum: 0 },
												subindex: { type: "integer", minimum: 0 },
											},
										},
									},
								},
							},
						],
					},
				},
			},
			to: {
				type: "object",
				title: "To",
				properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
				required: ["tag"],
				dependencies: {
					tag: {
						oneOf: [
							{
								properties: {
									tag: { enum: ["Account"] },
									Account: {
										type: "array",
										items: { type: "string", title: "" },
									},
								},
							},
							{
								properties: {
									tag: { enum: ["Contract"] },
									Contract: {
										type: "array",
										items: [
											{
												type: "object",
												title: "",
												properties: {
													index: { type: "integer", minimum: 0 },
													subindex: { type: "integer", minimum: 0 },
												},
											},
											{ type: "string", title: "", default: "" },
										],
									},
								},
							},
						],
					},
				},
			},
			data: { type: "string", title: "Data", default: "", format: "byte" },
		},
	},
	title: "Transfer Request",
};
export type TransferRequestUi = {
	token_id: string;
	amount: string;
	from:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
	to:
		| { tag: "Account"; Account: [string] }
		| {
				tag: "Contract";
				Contract: [{ index: number; subindex: number }, string];
		  };
	data: string;
}[];
export const transferErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Transfer Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"LogError",
				"InvalidTokenId",
				"InsufficientFunds",
				"Unauthorized",
				"InvalidAmount",
				"InvalidAddress",
				"TransferInvokeError",
				"UnauthorizedInvalidAgent",
				"CheckSignature",
				"InvalidSignature",
				"InvalidNonce",
				"InvalidContractAddress",
				"BurnError",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAmount"] },
						InvalidAmount: {
							type: "object",
							title: "InvalidAmount",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAddress"] },
						InvalidAddress: {
							type: "object",
							title: "InvalidAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["TransferInvokeError"] },
						TransferInvokeError: {
							type: "object",
							title: "TransferInvokeError",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["UnauthorizedInvalidAgent"] },
						UnauthorizedInvalidAgent: {
							type: "object",
							title: "UnauthorizedInvalidAgent",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CheckSignature"] },
						CheckSignature: {
							type: "object",
							title: "CheckSignature",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidSignature"] },
						InvalidSignature: {
							type: "object",
							title: "InvalidSignature",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidNonce"] },
						InvalidNonce: {
							type: "object",
							title: "InvalidNonce",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidContractAddress"] },
						InvalidContractAddress: {
							type: "object",
							title: "InvalidContractAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["BurnError"] },
						BurnError: { type: "object", title: "BurnError", properties: {} },
					},
				},
			],
		},
	},
};
export type TransferErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "InvalidAmount"; InvalidAmount: never }
	| { tag: "InvalidAddress"; InvalidAddress: never }
	| { tag: "TransferInvokeError"; TransferInvokeError: never }
	| { tag: "UnauthorizedInvalidAgent"; UnauthorizedInvalidAgent: never }
	| { tag: "CheckSignature"; CheckSignature: never }
	| { tag: "InvalidSignature"; InvalidSignature: never }
	| { tag: "InvalidNonce"; InvalidNonce: never }
	| { tag: "InvalidContractAddress"; InvalidContractAddress: never }
	| { tag: "BurnError"; BurnError: never };
export const updateOperatorRequestJsonSchema: RJSFSchema = {
	type: "array",
	items: {
		type: "object",
		title: "",
		properties: {
			update: {
				type: "object",
				title: "Update",
				properties: { tag: { type: "string", enum: ["Remove", "Add"] } },
				required: ["tag"],
				dependencies: {
					tag: {
						oneOf: [
							{
								properties: {
									tag: { enum: ["Remove"] },
									Remove: { type: "object", title: "Remove", properties: {} },
								},
							},
							{
								properties: {
									tag: { enum: ["Add"] },
									Add: { type: "object", title: "Add", properties: {} },
								},
							},
						],
					},
				},
			},
			operator: {
				type: "object",
				title: "Operator",
				properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
				required: ["tag"],
				dependencies: {
					tag: {
						oneOf: [
							{
								properties: {
									tag: { enum: ["Account"] },
									Account: {
										type: "array",
										items: { type: "string", title: "" },
									},
								},
							},
							{
								properties: {
									tag: { enum: ["Contract"] },
									Contract: {
										type: "array",
										items: {
											type: "object",
											title: "",
											properties: {
												index: { type: "integer", minimum: 0 },
												subindex: { type: "integer", minimum: 0 },
											},
										},
									},
								},
							},
						],
					},
				},
			},
		},
	},
	title: "Update Operator Request",
};
export type UpdateOperatorRequestUi = {
	update: { tag: "Remove"; Remove: never } | { tag: "Add"; Add: never };
	operator:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
}[];
export const updateOperatorErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Update Operator Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"LogError",
				"InvalidTokenId",
				"InsufficientFunds",
				"Unauthorized",
				"InvalidAmount",
				"InvalidAddress",
				"TransferInvokeError",
				"UnauthorizedInvalidAgent",
				"CheckSignature",
				"InvalidSignature",
				"InvalidNonce",
				"InvalidContractAddress",
				"BurnError",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAmount"] },
						InvalidAmount: {
							type: "object",
							title: "InvalidAmount",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAddress"] },
						InvalidAddress: {
							type: "object",
							title: "InvalidAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["TransferInvokeError"] },
						TransferInvokeError: {
							type: "object",
							title: "TransferInvokeError",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["UnauthorizedInvalidAgent"] },
						UnauthorizedInvalidAgent: {
							type: "object",
							title: "UnauthorizedInvalidAgent",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CheckSignature"] },
						CheckSignature: {
							type: "object",
							title: "CheckSignature",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidSignature"] },
						InvalidSignature: {
							type: "object",
							title: "InvalidSignature",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidNonce"] },
						InvalidNonce: {
							type: "object",
							title: "InvalidNonce",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidContractAddress"] },
						InvalidContractAddress: {
							type: "object",
							title: "InvalidContractAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["BurnError"] },
						BurnError: { type: "object", title: "BurnError", properties: {} },
					},
				},
			],
		},
	},
};
export type UpdateOperatorErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "InvalidAmount"; InvalidAmount: never }
	| { tag: "InvalidAddress"; InvalidAddress: never }
	| { tag: "TransferInvokeError"; TransferInvokeError: never }
	| { tag: "UnauthorizedInvalidAgent"; UnauthorizedInvalidAgent: never }
	| { tag: "CheckSignature"; CheckSignature: never }
	| { tag: "InvalidSignature"; InvalidSignature: never }
	| { tag: "InvalidNonce"; InvalidNonce: never }
	| { tag: "InvalidContractAddress"; InvalidContractAddress: never }
	| { tag: "BurnError"; BurnError: never };
export const init = (props: {
	onInitialize: (contract: ContractAddress.Type) => void;
	uiSchema?: UiSchema;
	uiWidgets?: RegistryWidgetsType;
}) =>
	GenericInit<types.initRequest, initRequestUi>({
		onContractInitialized: props.onInitialize,
		uiSchema: props.uiSchema,
		uiWidgets: props.uiWidgets,
		method: client.init,
		requestJsonSchema: initRequestJsonSchema,
		requestSchemaBase64: types.initRequestSchemaBase64,
	});
export const ENTRYPOINTS_UI: {
	[key: keyof typeof types.ENTRYPOINTS]: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) => React.JSX.Element;
} = {
	addAgent: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.AddAgentRequest,
			AddAgentRequestUi,
			types.AddAgentError,
			AddAgentErrorUi
		>({
			...props,
			method: client.addAgent,
			requestJsonSchema: addAgentRequestJsonSchema,
			requestSchemaBase64: types.addAgentRequestSchemaBase64,
			errorJsonSchema: addAgentErrorJsonSchema,
			errorSchemaBase64: types.addAgentErrorSchemaBase64,
		}),
	balanceOf: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericInvoke<
			types.BalanceOfRequest,
			BalanceOfRequestUi,
			types.BalanceOfResponse,
			BalanceOfResponseUi,
			types.BalanceOfError,
			BalanceOfErrorUi
		>({
			...props,
			method: client.balanceOf,
			requestJsonSchema: balanceOfRequestJsonSchema,
			requestSchemaBase64: types.balanceOfRequestSchemaBase64,
			responseJsonSchema: balanceOfResponseJsonSchema,
			responseSchemaBase64: types.balanceOfResponseSchemaBase64,
			errorJsonSchema: balanceOfErrorJsonSchema,
			errorSchemaBase64: types.balanceOfErrorSchemaBase64,
		}),
	isAgent: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericInvoke<
			types.IsAgentRequest,
			IsAgentRequestUi,
			types.IsAgentResponse,
			IsAgentResponseUi,
			types.IsAgentError,
			IsAgentErrorUi
		>({
			...props,
			method: client.isAgent,
			requestJsonSchema: isAgentRequestJsonSchema,
			requestSchemaBase64: types.isAgentRequestSchemaBase64,
			responseJsonSchema: isAgentResponseJsonSchema,
			responseSchemaBase64: types.isAgentResponseSchemaBase64,
			errorJsonSchema: isAgentErrorJsonSchema,
			errorSchemaBase64: types.isAgentErrorSchemaBase64,
		}),
	mint: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.MintRequest,
			MintRequestUi,
			types.MintError,
			MintErrorUi
		>({
			...props,
			method: client.mint,
			requestJsonSchema: mintRequestJsonSchema,
			requestSchemaBase64: types.mintRequestSchemaBase64,
			errorJsonSchema: mintErrorJsonSchema,
			errorSchemaBase64: types.mintErrorSchemaBase64,
		}),
	mintAgent: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.MintAgentRequest,
			MintAgentRequestUi,
			types.MintAgentError,
			MintAgentErrorUi
		>({
			...props,
			method: client.mintAgent,
			requestJsonSchema: mintAgentRequestJsonSchema,
			requestSchemaBase64: types.mintAgentRequestSchemaBase64,
			errorJsonSchema: mintAgentErrorJsonSchema,
			errorSchemaBase64: types.mintAgentErrorSchemaBase64,
		}),
	operatorOf: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericInvoke<
			types.OperatorOfRequest,
			OperatorOfRequestUi,
			types.OperatorOfResponse,
			OperatorOfResponseUi,
			types.OperatorOfError,
			OperatorOfErrorUi
		>({
			...props,
			method: client.operatorOf,
			requestJsonSchema: operatorOfRequestJsonSchema,
			requestSchemaBase64: types.operatorOfRequestSchemaBase64,
			responseJsonSchema: operatorOfResponseJsonSchema,
			responseSchemaBase64: types.operatorOfResponseSchemaBase64,
			errorJsonSchema: operatorOfErrorJsonSchema,
			errorSchemaBase64: types.operatorOfErrorSchemaBase64,
		}),
	removeAgent: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.RemoveAgentRequest,
			RemoveAgentRequestUi,
			types.RemoveAgentError,
			RemoveAgentErrorUi
		>({
			...props,
			method: client.removeAgent,
			requestJsonSchema: removeAgentRequestJsonSchema,
			requestSchemaBase64: types.removeAgentRequestSchemaBase64,
			errorJsonSchema: removeAgentErrorJsonSchema,
			errorSchemaBase64: types.removeAgentErrorSchemaBase64,
		}),
	supports: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericInvoke<
			types.SupportsRequest,
			SupportsRequestUi,
			types.SupportsResponse,
			SupportsResponseUi,
			types.SupportsError,
			SupportsErrorUi
		>({
			...props,
			method: client.supports,
			requestJsonSchema: supportsRequestJsonSchema,
			requestSchemaBase64: types.supportsRequestSchemaBase64,
			responseJsonSchema: supportsResponseJsonSchema,
			responseSchemaBase64: types.supportsResponseSchemaBase64,
			errorJsonSchema: supportsErrorJsonSchema,
			errorSchemaBase64: types.supportsErrorSchemaBase64,
		}),
	tokenMetadata: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericInvoke<
			types.TokenMetadataRequest,
			TokenMetadataRequestUi,
			types.TokenMetadataResponse,
			TokenMetadataResponseUi,
			types.TokenMetadataError,
			TokenMetadataErrorUi
		>({
			...props,
			method: client.tokenMetadata,
			requestJsonSchema: tokenMetadataRequestJsonSchema,
			requestSchemaBase64: types.tokenMetadataRequestSchemaBase64,
			responseJsonSchema: tokenMetadataResponseJsonSchema,
			responseSchemaBase64: types.tokenMetadataResponseSchemaBase64,
			errorJsonSchema: tokenMetadataErrorJsonSchema,
			errorSchemaBase64: types.tokenMetadataErrorSchemaBase64,
		}),
	transfer: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.TransferRequest,
			TransferRequestUi,
			types.TransferError,
			TransferErrorUi
		>({
			...props,
			method: client.transfer,
			requestJsonSchema: transferRequestJsonSchema,
			requestSchemaBase64: types.transferRequestSchemaBase64,
			errorJsonSchema: transferErrorJsonSchema,
			errorSchemaBase64: types.transferErrorSchemaBase64,
		}),
	updateOperator: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.UpdateOperatorRequest,
			UpdateOperatorRequestUi,
			types.UpdateOperatorError,
			UpdateOperatorErrorUi
		>({
			...props,
			method: client.updateOperator,
			requestJsonSchema: updateOperatorRequestJsonSchema,
			requestSchemaBase64: types.updateOperatorRequestSchemaBase64,
			errorJsonSchema: updateOperatorErrorJsonSchema,
			errorSchemaBase64: types.updateOperatorErrorSchemaBase64,
		}),
};
