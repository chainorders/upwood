// This file was generated by the build script. Do not edit it manually.
/* eslint-disable no-mixed-spaces-and-tabs */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* tslint:disable:no-unused-variable */
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
import { RJSFSchema, RegistryWidgetsType, UiSchema } from "@rjsf/utils";
import React from "react";
import { ContractAddress } from "@concordium/web-sdk";
import { default as client } from "./securitySftSingle";
import * as types from "./securitySftSingle";
import {
	GenericInit,
	GenericInvoke,
	GenericUpdate,
} from "../GenericContractUI";
export const initRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Init Request",
	properties: {
		metadata_url: {
			type: "object",
			title: "Metadata Url",
			properties: {
				url: { type: "string", title: "Url", default: "" },
				hash: {
					type: "object",
					title: "Hash",
					properties: { tag: { type: "string", enum: ["None", "Some"] } },
					required: ["tag"],
					dependencies: {
						tag: {
							oneOf: [
								{
									properties: {
										tag: { enum: ["None"] },
										None: { type: "object", title: "None", properties: {} },
									},
								},
								{
									properties: {
										tag: { enum: ["Some"] },
										Some: {
											type: "array",
											items: { type: "string", title: "", default: "" },
										},
									},
								},
							],
						},
					},
				},
			},
		},
		security: {
			type: "object",
			title: "Security",
			properties: { tag: { type: "string", enum: ["None", "Some"] } },
			required: ["tag"],
			dependencies: {
				tag: {
					oneOf: [
						{
							properties: {
								tag: { enum: ["None"] },
								None: { type: "object", title: "None", properties: {} },
							},
						},
						{
							properties: {
								tag: { enum: ["Some"] },
								Some: {
									type: "array",
									items: {
										type: "object",
										title: "",
										properties: {
											identity_registry: {
												type: "object",
												title: "Identity Registry",
												properties: {
													index: { type: "integer", minimum: 0 },
													subindex: { type: "integer", minimum: 0 },
												},
											},
											compliance: {
												type: "object",
												title: "Compliance",
												properties: {
													index: { type: "integer", minimum: 0 },
													subindex: { type: "integer", minimum: 0 },
												},
											},
										},
									},
								},
							},
						},
					],
				},
			},
		},
		agents: {
			type: "array",
			items: {
				type: "object",
				title: "",
				properties: {
					address: {
						type: "object",
						title: "Address",
						properties: {
							tag: { type: "string", enum: ["Account", "Contract"] },
						},
						required: ["tag"],
						dependencies: {
							tag: {
								oneOf: [
									{
										properties: {
											tag: { enum: ["Account"] },
											Account: {
												type: "array",
												items: { type: "string", title: "" },
											},
										},
									},
									{
										properties: {
											tag: { enum: ["Contract"] },
											Contract: {
												type: "array",
												items: {
													type: "object",
													title: "",
													properties: {
														index: { type: "integer", minimum: 0 },
														subindex: { type: "integer", minimum: 0 },
													},
												},
											},
										},
									},
								],
							},
						},
					},
					roles: {
						type: "array",
						items: {
							type: "object",
							title: "",
							properties: {
								tag: {
									type: "string",
									enum: [
										"SetIdentityRegistry",
										"SetCompliance",
										"AddAgent",
										"Mint",
										"ForcedBurn",
										"ForcedTransfer",
										"Freeze",
										"UnFreeze",
										"HolderRecovery",
										"Pause",
										"UnPause",
										"Operator",
										"SetTokenMetadata",
									],
								},
							},
							required: ["tag"],
							dependencies: {
								tag: {
									oneOf: [
										{
											properties: {
												tag: { enum: ["SetIdentityRegistry"] },
												SetIdentityRegistry: {
													type: "object",
													title: "SetIdentityRegistry",
													properties: {},
												},
											},
										},
										{
											properties: {
												tag: { enum: ["SetCompliance"] },
												SetCompliance: {
													type: "object",
													title: "SetCompliance",
													properties: {},
												},
											},
										},
										{
											properties: {
												tag: { enum: ["AddAgent"] },
												AddAgent: {
													type: "object",
													title: "AddAgent",
													properties: {},
												},
											},
										},
										{
											properties: {
												tag: { enum: ["Mint"] },
												Mint: { type: "object", title: "Mint", properties: {} },
											},
										},
										{
											properties: {
												tag: { enum: ["ForcedBurn"] },
												ForcedBurn: {
													type: "object",
													title: "ForcedBurn",
													properties: {},
												},
											},
										},
										{
											properties: {
												tag: { enum: ["ForcedTransfer"] },
												ForcedTransfer: {
													type: "object",
													title: "ForcedTransfer",
													properties: {},
												},
											},
										},
										{
											properties: {
												tag: { enum: ["Freeze"] },
												Freeze: {
													type: "object",
													title: "Freeze",
													properties: {},
												},
											},
										},
										{
											properties: {
												tag: { enum: ["UnFreeze"] },
												UnFreeze: {
													type: "object",
													title: "UnFreeze",
													properties: {},
												},
											},
										},
										{
											properties: {
												tag: { enum: ["HolderRecovery"] },
												HolderRecovery: {
													type: "object",
													title: "HolderRecovery",
													properties: {},
												},
											},
										},
										{
											properties: {
												tag: { enum: ["Pause"] },
												Pause: {
													type: "object",
													title: "Pause",
													properties: {},
												},
											},
										},
										{
											properties: {
												tag: { enum: ["UnPause"] },
												UnPause: {
													type: "object",
													title: "UnPause",
													properties: {},
												},
											},
										},
										{
											properties: {
												tag: { enum: ["Operator"] },
												Operator: {
													type: "object",
													title: "Operator",
													properties: {},
												},
											},
										},
										{
											properties: {
												tag: { enum: ["SetTokenMetadata"] },
												SetTokenMetadata: {
													type: "object",
													title: "SetTokenMetadata",
													properties: {},
												},
											},
										},
									],
								},
							},
						},
						title: "Roles",
					},
				},
			},
			title: "Agents",
		},
	},
};
export type initRequestUi = {
	metadata_url: {
		url: string;
		hash: { tag: "None"; None: never } | { tag: "Some"; Some: [string] };
	};
	security:
		| { tag: "None"; None: never }
		| {
				tag: "Some";
				Some: [
					{
						identity_registry: { index: number; subindex: number };
						compliance: { index: number; subindex: number };
					},
				];
		  };
	agents: {
		address:
			| { tag: "Account"; Account: [string] }
			| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
		roles:
			| { tag: "SetIdentityRegistry"; SetIdentityRegistry: never }
			| { tag: "SetCompliance"; SetCompliance: never }
			| { tag: "AddAgent"; AddAgent: never }
			| { tag: "Mint"; Mint: never }
			| { tag: "ForcedBurn"; ForcedBurn: never }
			| { tag: "ForcedTransfer"; ForcedTransfer: never }
			| { tag: "Freeze"; Freeze: never }
			| { tag: "UnFreeze"; UnFreeze: never }
			| { tag: "HolderRecovery"; HolderRecovery: never }
			| { tag: "Pause"; Pause: never }
			| { tag: "UnPause"; UnPause: never }
			| { tag: "Operator"; Operator: never }
			| { tag: "SetTokenMetadata"; SetTokenMetadata: never }[];
	}[];
};
export const initErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Init Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"LogError",
				"InvalidTokenId",
				"InsufficientFunds",
				"Unauthorized",
				"UnVerifiedIdentity",
				"InCompliantTransfer",
				"CallContractError",
				"PausedToken",
				"InvalidAmount",
				"InvalidAddress",
				"RecoveredAddress",
				"SecurityNotSet",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["UnVerifiedIdentity"] },
						UnVerifiedIdentity: {
							type: "object",
							title: "UnVerifiedIdentity",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InCompliantTransfer"] },
						InCompliantTransfer: {
							type: "object",
							title: "InCompliantTransfer",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CallContractError"] },
						CallContractError: {
							type: "object",
							title: "CallContractError",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["PausedToken"] },
						PausedToken: {
							type: "object",
							title: "PausedToken",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAmount"] },
						InvalidAmount: {
							type: "object",
							title: "InvalidAmount",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAddress"] },
						InvalidAddress: {
							type: "object",
							title: "InvalidAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["RecoveredAddress"] },
						RecoveredAddress: {
							type: "object",
							title: "RecoveredAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["SecurityNotSet"] },
						SecurityNotSet: {
							type: "object",
							title: "SecurityNotSet",
							properties: {},
						},
					},
				},
			],
		},
	},
};
export type initErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "UnVerifiedIdentity"; UnVerifiedIdentity: never }
	| { tag: "InCompliantTransfer"; InCompliantTransfer: never }
	| { tag: "CallContractError"; CallContractError: never }
	| { tag: "PausedToken"; PausedToken: never }
	| { tag: "InvalidAmount"; InvalidAmount: never }
	| { tag: "InvalidAddress"; InvalidAddress: never }
	| { tag: "RecoveredAddress"; RecoveredAddress: never }
	| { tag: "SecurityNotSet"; SecurityNotSet: never };
export const addAgentRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Add Agent Request",
	properties: {
		address: {
			type: "object",
			title: "Address",
			properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
			required: ["tag"],
			dependencies: {
				tag: {
					oneOf: [
						{
							properties: {
								tag: { enum: ["Account"] },
								Account: {
									type: "array",
									items: { type: "string", title: "" },
								},
							},
						},
						{
							properties: {
								tag: { enum: ["Contract"] },
								Contract: {
									type: "array",
									items: {
										type: "object",
										title: "",
										properties: {
											index: { type: "integer", minimum: 0 },
											subindex: { type: "integer", minimum: 0 },
										},
									},
								},
							},
						},
					],
				},
			},
		},
		roles: {
			type: "array",
			items: {
				type: "object",
				title: "",
				properties: {
					tag: {
						type: "string",
						enum: [
							"SetIdentityRegistry",
							"SetCompliance",
							"AddAgent",
							"Mint",
							"ForcedBurn",
							"ForcedTransfer",
							"Freeze",
							"UnFreeze",
							"HolderRecovery",
							"Pause",
							"UnPause",
							"Operator",
							"SetTokenMetadata",
						],
					},
				},
				required: ["tag"],
				dependencies: {
					tag: {
						oneOf: [
							{
								properties: {
									tag: { enum: ["SetIdentityRegistry"] },
									SetIdentityRegistry: {
										type: "object",
										title: "SetIdentityRegistry",
										properties: {},
									},
								},
							},
							{
								properties: {
									tag: { enum: ["SetCompliance"] },
									SetCompliance: {
										type: "object",
										title: "SetCompliance",
										properties: {},
									},
								},
							},
							{
								properties: {
									tag: { enum: ["AddAgent"] },
									AddAgent: {
										type: "object",
										title: "AddAgent",
										properties: {},
									},
								},
							},
							{
								properties: {
									tag: { enum: ["Mint"] },
									Mint: { type: "object", title: "Mint", properties: {} },
								},
							},
							{
								properties: {
									tag: { enum: ["ForcedBurn"] },
									ForcedBurn: {
										type: "object",
										title: "ForcedBurn",
										properties: {},
									},
								},
							},
							{
								properties: {
									tag: { enum: ["ForcedTransfer"] },
									ForcedTransfer: {
										type: "object",
										title: "ForcedTransfer",
										properties: {},
									},
								},
							},
							{
								properties: {
									tag: { enum: ["Freeze"] },
									Freeze: { type: "object", title: "Freeze", properties: {} },
								},
							},
							{
								properties: {
									tag: { enum: ["UnFreeze"] },
									UnFreeze: {
										type: "object",
										title: "UnFreeze",
										properties: {},
									},
								},
							},
							{
								properties: {
									tag: { enum: ["HolderRecovery"] },
									HolderRecovery: {
										type: "object",
										title: "HolderRecovery",
										properties: {},
									},
								},
							},
							{
								properties: {
									tag: { enum: ["Pause"] },
									Pause: { type: "object", title: "Pause", properties: {} },
								},
							},
							{
								properties: {
									tag: { enum: ["UnPause"] },
									UnPause: { type: "object", title: "UnPause", properties: {} },
								},
							},
							{
								properties: {
									tag: { enum: ["Operator"] },
									Operator: {
										type: "object",
										title: "Operator",
										properties: {},
									},
								},
							},
							{
								properties: {
									tag: { enum: ["SetTokenMetadata"] },
									SetTokenMetadata: {
										type: "object",
										title: "SetTokenMetadata",
										properties: {},
									},
								},
							},
						],
					},
				},
			},
			title: "Roles",
		},
	},
};
export type AddAgentRequestUi = {
	address:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
	roles:
		| { tag: "SetIdentityRegistry"; SetIdentityRegistry: never }
		| { tag: "SetCompliance"; SetCompliance: never }
		| { tag: "AddAgent"; AddAgent: never }
		| { tag: "Mint"; Mint: never }
		| { tag: "ForcedBurn"; ForcedBurn: never }
		| { tag: "ForcedTransfer"; ForcedTransfer: never }
		| { tag: "Freeze"; Freeze: never }
		| { tag: "UnFreeze"; UnFreeze: never }
		| { tag: "HolderRecovery"; HolderRecovery: never }
		| { tag: "Pause"; Pause: never }
		| { tag: "UnPause"; UnPause: never }
		| { tag: "Operator"; Operator: never }
		| { tag: "SetTokenMetadata"; SetTokenMetadata: never }[];
};
export const addAgentErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Add Agent Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"LogError",
				"InvalidTokenId",
				"InsufficientFunds",
				"Unauthorized",
				"UnVerifiedIdentity",
				"InCompliantTransfer",
				"CallContractError",
				"PausedToken",
				"InvalidAmount",
				"InvalidAddress",
				"RecoveredAddress",
				"SecurityNotSet",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["UnVerifiedIdentity"] },
						UnVerifiedIdentity: {
							type: "object",
							title: "UnVerifiedIdentity",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InCompliantTransfer"] },
						InCompliantTransfer: {
							type: "object",
							title: "InCompliantTransfer",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CallContractError"] },
						CallContractError: {
							type: "object",
							title: "CallContractError",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["PausedToken"] },
						PausedToken: {
							type: "object",
							title: "PausedToken",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAmount"] },
						InvalidAmount: {
							type: "object",
							title: "InvalidAmount",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAddress"] },
						InvalidAddress: {
							type: "object",
							title: "InvalidAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["RecoveredAddress"] },
						RecoveredAddress: {
							type: "object",
							title: "RecoveredAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["SecurityNotSet"] },
						SecurityNotSet: {
							type: "object",
							title: "SecurityNotSet",
							properties: {},
						},
					},
				},
			],
		},
	},
};
export type AddAgentErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "UnVerifiedIdentity"; UnVerifiedIdentity: never }
	| { tag: "InCompliantTransfer"; InCompliantTransfer: never }
	| { tag: "CallContractError"; CallContractError: never }
	| { tag: "PausedToken"; PausedToken: never }
	| { tag: "InvalidAmount"; InvalidAmount: never }
	| { tag: "InvalidAddress"; InvalidAddress: never }
	| { tag: "RecoveredAddress"; RecoveredAddress: never }
	| { tag: "SecurityNotSet"; SecurityNotSet: never };
export const balanceOfRequestJsonSchema: RJSFSchema = {
	type: "array",
	items: {
		type: "object",
		title: "",
		properties: {
			token_id: {
				type: "string",
				title: "Token Id",
				default: "",
				format: "byte",
			},
			address: {
				type: "object",
				title: "Address",
				properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
				required: ["tag"],
				dependencies: {
					tag: {
						oneOf: [
							{
								properties: {
									tag: { enum: ["Account"] },
									Account: {
										type: "array",
										items: { type: "string", title: "" },
									},
								},
							},
							{
								properties: {
									tag: { enum: ["Contract"] },
									Contract: {
										type: "array",
										items: {
											type: "object",
											title: "",
											properties: {
												index: { type: "integer", minimum: 0 },
												subindex: { type: "integer", minimum: 0 },
											},
										},
									},
								},
							},
						],
					},
				},
			},
		},
	},
	title: "Balance Of Request",
};
export type BalanceOfRequestUi = {
	token_id: string;
	address:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
}[];
export const balanceOfResponseJsonSchema: RJSFSchema = {
	type: "array",
	items: { type: "string", title: "" },
	title: "Balance Of Response",
};
export type BalanceOfResponseUi = string[];
export const balanceOfErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Balance Of Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"LogError",
				"InvalidTokenId",
				"InsufficientFunds",
				"Unauthorized",
				"UnVerifiedIdentity",
				"InCompliantTransfer",
				"CallContractError",
				"PausedToken",
				"InvalidAmount",
				"InvalidAddress",
				"RecoveredAddress",
				"SecurityNotSet",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["UnVerifiedIdentity"] },
						UnVerifiedIdentity: {
							type: "object",
							title: "UnVerifiedIdentity",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InCompliantTransfer"] },
						InCompliantTransfer: {
							type: "object",
							title: "InCompliantTransfer",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CallContractError"] },
						CallContractError: {
							type: "object",
							title: "CallContractError",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["PausedToken"] },
						PausedToken: {
							type: "object",
							title: "PausedToken",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAmount"] },
						InvalidAmount: {
							type: "object",
							title: "InvalidAmount",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAddress"] },
						InvalidAddress: {
							type: "object",
							title: "InvalidAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["RecoveredAddress"] },
						RecoveredAddress: {
							type: "object",
							title: "RecoveredAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["SecurityNotSet"] },
						SecurityNotSet: {
							type: "object",
							title: "SecurityNotSet",
							properties: {},
						},
					},
				},
			],
		},
	},
};
export type BalanceOfErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "UnVerifiedIdentity"; UnVerifiedIdentity: never }
	| { tag: "InCompliantTransfer"; InCompliantTransfer: never }
	| { tag: "CallContractError"; CallContractError: never }
	| { tag: "PausedToken"; PausedToken: never }
	| { tag: "InvalidAmount"; InvalidAmount: never }
	| { tag: "InvalidAddress"; InvalidAddress: never }
	| { tag: "RecoveredAddress"; RecoveredAddress: never }
	| { tag: "SecurityNotSet"; SecurityNotSet: never };
export const balanceOfFrozenRequestJsonSchema: RJSFSchema = {
	type: "array",
	items: {
		type: "object",
		title: "",
		properties: {
			token_id: {
				type: "string",
				title: "Token Id",
				default: "",
				format: "byte",
			},
			address: {
				type: "object",
				title: "Address",
				properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
				required: ["tag"],
				dependencies: {
					tag: {
						oneOf: [
							{
								properties: {
									tag: { enum: ["Account"] },
									Account: {
										type: "array",
										items: { type: "string", title: "" },
									},
								},
							},
							{
								properties: {
									tag: { enum: ["Contract"] },
									Contract: {
										type: "array",
										items: {
											type: "object",
											title: "",
											properties: {
												index: { type: "integer", minimum: 0 },
												subindex: { type: "integer", minimum: 0 },
											},
										},
									},
								},
							},
						],
					},
				},
			},
		},
	},
	title: "Balance Of Frozen Request",
};
export type BalanceOfFrozenRequestUi = {
	token_id: string;
	address:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
}[];
export const balanceOfFrozenResponseJsonSchema: RJSFSchema = {
	type: "array",
	items: { type: "string", title: "" },
	title: "Balance Of Frozen Response",
};
export type BalanceOfFrozenResponseUi = string[];
export const balanceOfFrozenErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Balance Of Frozen Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"LogError",
				"InvalidTokenId",
				"InsufficientFunds",
				"Unauthorized",
				"UnVerifiedIdentity",
				"InCompliantTransfer",
				"CallContractError",
				"PausedToken",
				"InvalidAmount",
				"InvalidAddress",
				"RecoveredAddress",
				"SecurityNotSet",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["UnVerifiedIdentity"] },
						UnVerifiedIdentity: {
							type: "object",
							title: "UnVerifiedIdentity",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InCompliantTransfer"] },
						InCompliantTransfer: {
							type: "object",
							title: "InCompliantTransfer",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CallContractError"] },
						CallContractError: {
							type: "object",
							title: "CallContractError",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["PausedToken"] },
						PausedToken: {
							type: "object",
							title: "PausedToken",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAmount"] },
						InvalidAmount: {
							type: "object",
							title: "InvalidAmount",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAddress"] },
						InvalidAddress: {
							type: "object",
							title: "InvalidAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["RecoveredAddress"] },
						RecoveredAddress: {
							type: "object",
							title: "RecoveredAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["SecurityNotSet"] },
						SecurityNotSet: {
							type: "object",
							title: "SecurityNotSet",
							properties: {},
						},
					},
				},
			],
		},
	},
};
export type BalanceOfFrozenErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "UnVerifiedIdentity"; UnVerifiedIdentity: never }
	| { tag: "InCompliantTransfer"; InCompliantTransfer: never }
	| { tag: "CallContractError"; CallContractError: never }
	| { tag: "PausedToken"; PausedToken: never }
	| { tag: "InvalidAmount"; InvalidAmount: never }
	| { tag: "InvalidAddress"; InvalidAddress: never }
	| { tag: "RecoveredAddress"; RecoveredAddress: never }
	| { tag: "SecurityNotSet"; SecurityNotSet: never };
export const balanceOfUnFrozenRequestJsonSchema: RJSFSchema = {
	type: "array",
	items: {
		type: "object",
		title: "",
		properties: {
			token_id: {
				type: "string",
				title: "Token Id",
				default: "",
				format: "byte",
			},
			address: {
				type: "object",
				title: "Address",
				properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
				required: ["tag"],
				dependencies: {
					tag: {
						oneOf: [
							{
								properties: {
									tag: { enum: ["Account"] },
									Account: {
										type: "array",
										items: { type: "string", title: "" },
									},
								},
							},
							{
								properties: {
									tag: { enum: ["Contract"] },
									Contract: {
										type: "array",
										items: {
											type: "object",
											title: "",
											properties: {
												index: { type: "integer", minimum: 0 },
												subindex: { type: "integer", minimum: 0 },
											},
										},
									},
								},
							},
						],
					},
				},
			},
		},
	},
	title: "Balance Of Un Frozen Request",
};
export type BalanceOfUnFrozenRequestUi = {
	token_id: string;
	address:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
}[];
export const balanceOfUnFrozenResponseJsonSchema: RJSFSchema = {
	type: "array",
	items: { type: "string", title: "" },
	title: "Balance Of Un Frozen Response",
};
export type BalanceOfUnFrozenResponseUi = string[];
export const balanceOfUnFrozenErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Balance Of Un Frozen Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"LogError",
				"InvalidTokenId",
				"InsufficientFunds",
				"Unauthorized",
				"UnVerifiedIdentity",
				"InCompliantTransfer",
				"CallContractError",
				"PausedToken",
				"InvalidAmount",
				"InvalidAddress",
				"RecoveredAddress",
				"SecurityNotSet",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["UnVerifiedIdentity"] },
						UnVerifiedIdentity: {
							type: "object",
							title: "UnVerifiedIdentity",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InCompliantTransfer"] },
						InCompliantTransfer: {
							type: "object",
							title: "InCompliantTransfer",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CallContractError"] },
						CallContractError: {
							type: "object",
							title: "CallContractError",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["PausedToken"] },
						PausedToken: {
							type: "object",
							title: "PausedToken",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAmount"] },
						InvalidAmount: {
							type: "object",
							title: "InvalidAmount",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAddress"] },
						InvalidAddress: {
							type: "object",
							title: "InvalidAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["RecoveredAddress"] },
						RecoveredAddress: {
							type: "object",
							title: "RecoveredAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["SecurityNotSet"] },
						SecurityNotSet: {
							type: "object",
							title: "SecurityNotSet",
							properties: {},
						},
					},
				},
			],
		},
	},
};
export type BalanceOfUnFrozenErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "UnVerifiedIdentity"; UnVerifiedIdentity: never }
	| { tag: "InCompliantTransfer"; InCompliantTransfer: never }
	| { tag: "CallContractError"; CallContractError: never }
	| { tag: "PausedToken"; PausedToken: never }
	| { tag: "InvalidAmount"; InvalidAmount: never }
	| { tag: "InvalidAddress"; InvalidAddress: never }
	| { tag: "RecoveredAddress"; RecoveredAddress: never }
	| { tag: "SecurityNotSet"; SecurityNotSet: never };
export const burnRequestJsonSchema: RJSFSchema = {
	type: "array",
	items: {
		type: "object",
		title: "",
		properties: {
			token_id: {
				type: "string",
				title: "Token Id",
				default: "",
				format: "byte",
			},
			amount: { type: "string", title: "Amount" },
			owner: {
				type: "object",
				title: "Owner",
				properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
				required: ["tag"],
				dependencies: {
					tag: {
						oneOf: [
							{
								properties: {
									tag: { enum: ["Account"] },
									Account: {
										type: "array",
										items: { type: "string", title: "" },
									},
								},
							},
							{
								properties: {
									tag: { enum: ["Contract"] },
									Contract: {
										type: "array",
										items: {
											type: "object",
											title: "",
											properties: {
												index: { type: "integer", minimum: 0 },
												subindex: { type: "integer", minimum: 0 },
											},
										},
									},
								},
							},
						],
					},
				},
			},
		},
	},
	title: "Burn Request",
};
export type BurnRequestUi = {
	token_id: string;
	amount: string;
	owner:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
}[];
export const burnErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Burn Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"LogError",
				"InvalidTokenId",
				"InsufficientFunds",
				"Unauthorized",
				"UnVerifiedIdentity",
				"InCompliantTransfer",
				"CallContractError",
				"PausedToken",
				"InvalidAmount",
				"InvalidAddress",
				"RecoveredAddress",
				"SecurityNotSet",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["UnVerifiedIdentity"] },
						UnVerifiedIdentity: {
							type: "object",
							title: "UnVerifiedIdentity",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InCompliantTransfer"] },
						InCompliantTransfer: {
							type: "object",
							title: "InCompliantTransfer",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CallContractError"] },
						CallContractError: {
							type: "object",
							title: "CallContractError",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["PausedToken"] },
						PausedToken: {
							type: "object",
							title: "PausedToken",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAmount"] },
						InvalidAmount: {
							type: "object",
							title: "InvalidAmount",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAddress"] },
						InvalidAddress: {
							type: "object",
							title: "InvalidAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["RecoveredAddress"] },
						RecoveredAddress: {
							type: "object",
							title: "RecoveredAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["SecurityNotSet"] },
						SecurityNotSet: {
							type: "object",
							title: "SecurityNotSet",
							properties: {},
						},
					},
				},
			],
		},
	},
};
export type BurnErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "UnVerifiedIdentity"; UnVerifiedIdentity: never }
	| { tag: "InCompliantTransfer"; InCompliantTransfer: never }
	| { tag: "CallContractError"; CallContractError: never }
	| { tag: "PausedToken"; PausedToken: never }
	| { tag: "InvalidAmount"; InvalidAmount: never }
	| { tag: "InvalidAddress"; InvalidAddress: never }
	| { tag: "RecoveredAddress"; RecoveredAddress: never }
	| { tag: "SecurityNotSet"; SecurityNotSet: never };
export const complianceResponseJsonSchema: RJSFSchema = {
	type: "object",
	title: "Compliance Response",
	properties: {
		index: { type: "integer", minimum: 0 },
		subindex: { type: "integer", minimum: 0 },
	},
};
export type ComplianceResponseUi = { index: number; subindex: number };
export const freezeRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Freeze Request",
	properties: {
		owner: {
			type: "object",
			title: "Owner",
			properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
			required: ["tag"],
			dependencies: {
				tag: {
					oneOf: [
						{
							properties: {
								tag: { enum: ["Account"] },
								Account: {
									type: "array",
									items: { type: "string", title: "" },
								},
							},
						},
						{
							properties: {
								tag: { enum: ["Contract"] },
								Contract: {
									type: "array",
									items: {
										type: "object",
										title: "",
										properties: {
											index: { type: "integer", minimum: 0 },
											subindex: { type: "integer", minimum: 0 },
										},
									},
								},
							},
						},
					],
				},
			},
		},
		tokens: {
			type: "array",
			items: {
				type: "object",
				title: "",
				properties: {
					token_id: {
						type: "string",
						title: "Token Id",
						default: "",
						format: "byte",
					},
					token_amount: { type: "string", title: "Token Amount" },
				},
			},
			title: "Tokens",
		},
	},
};
export type FreezeRequestUi = {
	owner:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
	tokens: { token_id: string; token_amount: string }[];
};
export const freezeErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Freeze Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"LogError",
				"InvalidTokenId",
				"InsufficientFunds",
				"Unauthorized",
				"UnVerifiedIdentity",
				"InCompliantTransfer",
				"CallContractError",
				"PausedToken",
				"InvalidAmount",
				"InvalidAddress",
				"RecoveredAddress",
				"SecurityNotSet",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["UnVerifiedIdentity"] },
						UnVerifiedIdentity: {
							type: "object",
							title: "UnVerifiedIdentity",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InCompliantTransfer"] },
						InCompliantTransfer: {
							type: "object",
							title: "InCompliantTransfer",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CallContractError"] },
						CallContractError: {
							type: "object",
							title: "CallContractError",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["PausedToken"] },
						PausedToken: {
							type: "object",
							title: "PausedToken",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAmount"] },
						InvalidAmount: {
							type: "object",
							title: "InvalidAmount",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAddress"] },
						InvalidAddress: {
							type: "object",
							title: "InvalidAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["RecoveredAddress"] },
						RecoveredAddress: {
							type: "object",
							title: "RecoveredAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["SecurityNotSet"] },
						SecurityNotSet: {
							type: "object",
							title: "SecurityNotSet",
							properties: {},
						},
					},
				},
			],
		},
	},
};
export type FreezeErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "UnVerifiedIdentity"; UnVerifiedIdentity: never }
	| { tag: "InCompliantTransfer"; InCompliantTransfer: never }
	| { tag: "CallContractError"; CallContractError: never }
	| { tag: "PausedToken"; PausedToken: never }
	| { tag: "InvalidAmount"; InvalidAmount: never }
	| { tag: "InvalidAddress"; InvalidAddress: never }
	| { tag: "RecoveredAddress"; RecoveredAddress: never }
	| { tag: "SecurityNotSet"; SecurityNotSet: never };
export const identityRegistryResponseJsonSchema: RJSFSchema = {
	type: "object",
	title: "Identity Registry Response",
	properties: { tag: { type: "string", enum: ["None", "Some"] } },
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["None"] },
						None: { type: "object", title: "None", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["Some"] },
						Some: {
							type: "array",
							items: {
								type: "object",
								title: "",
								properties: {
									index: { type: "integer", minimum: 0 },
									subindex: { type: "integer", minimum: 0 },
								},
							},
						},
					},
				},
			],
		},
	},
};
export type IdentityRegistryResponseUi =
	| { tag: "None"; None: never }
	| { tag: "Some"; Some: [{ index: number; subindex: number }] };
export const identityRegistryErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Identity Registry Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"LogError",
				"InvalidTokenId",
				"InsufficientFunds",
				"Unauthorized",
				"UnVerifiedIdentity",
				"InCompliantTransfer",
				"CallContractError",
				"PausedToken",
				"InvalidAmount",
				"InvalidAddress",
				"RecoveredAddress",
				"SecurityNotSet",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["UnVerifiedIdentity"] },
						UnVerifiedIdentity: {
							type: "object",
							title: "UnVerifiedIdentity",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InCompliantTransfer"] },
						InCompliantTransfer: {
							type: "object",
							title: "InCompliantTransfer",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CallContractError"] },
						CallContractError: {
							type: "object",
							title: "CallContractError",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["PausedToken"] },
						PausedToken: {
							type: "object",
							title: "PausedToken",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAmount"] },
						InvalidAmount: {
							type: "object",
							title: "InvalidAmount",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAddress"] },
						InvalidAddress: {
							type: "object",
							title: "InvalidAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["RecoveredAddress"] },
						RecoveredAddress: {
							type: "object",
							title: "RecoveredAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["SecurityNotSet"] },
						SecurityNotSet: {
							type: "object",
							title: "SecurityNotSet",
							properties: {},
						},
					},
				},
			],
		},
	},
};
export type IdentityRegistryErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "UnVerifiedIdentity"; UnVerifiedIdentity: never }
	| { tag: "InCompliantTransfer"; InCompliantTransfer: never }
	| { tag: "CallContractError"; CallContractError: never }
	| { tag: "PausedToken"; PausedToken: never }
	| { tag: "InvalidAmount"; InvalidAmount: never }
	| { tag: "InvalidAddress"; InvalidAddress: never }
	| { tag: "RecoveredAddress"; RecoveredAddress: never }
	| { tag: "SecurityNotSet"; SecurityNotSet: never };
export const isAgentRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Is Agent Request",
	properties: {
		address: {
			type: "object",
			title: "Address",
			properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
			required: ["tag"],
			dependencies: {
				tag: {
					oneOf: [
						{
							properties: {
								tag: { enum: ["Account"] },
								Account: {
									type: "array",
									items: { type: "string", title: "" },
								},
							},
						},
						{
							properties: {
								tag: { enum: ["Contract"] },
								Contract: {
									type: "array",
									items: {
										type: "object",
										title: "",
										properties: {
											index: { type: "integer", minimum: 0 },
											subindex: { type: "integer", minimum: 0 },
										},
									},
								},
							},
						},
					],
				},
			},
		},
		roles: {
			type: "array",
			items: {
				type: "object",
				title: "",
				properties: {
					tag: {
						type: "string",
						enum: [
							"SetIdentityRegistry",
							"SetCompliance",
							"AddAgent",
							"Mint",
							"ForcedBurn",
							"ForcedTransfer",
							"Freeze",
							"UnFreeze",
							"HolderRecovery",
							"Pause",
							"UnPause",
							"Operator",
							"SetTokenMetadata",
						],
					},
				},
				required: ["tag"],
				dependencies: {
					tag: {
						oneOf: [
							{
								properties: {
									tag: { enum: ["SetIdentityRegistry"] },
									SetIdentityRegistry: {
										type: "object",
										title: "SetIdentityRegistry",
										properties: {},
									},
								},
							},
							{
								properties: {
									tag: { enum: ["SetCompliance"] },
									SetCompliance: {
										type: "object",
										title: "SetCompliance",
										properties: {},
									},
								},
							},
							{
								properties: {
									tag: { enum: ["AddAgent"] },
									AddAgent: {
										type: "object",
										title: "AddAgent",
										properties: {},
									},
								},
							},
							{
								properties: {
									tag: { enum: ["Mint"] },
									Mint: { type: "object", title: "Mint", properties: {} },
								},
							},
							{
								properties: {
									tag: { enum: ["ForcedBurn"] },
									ForcedBurn: {
										type: "object",
										title: "ForcedBurn",
										properties: {},
									},
								},
							},
							{
								properties: {
									tag: { enum: ["ForcedTransfer"] },
									ForcedTransfer: {
										type: "object",
										title: "ForcedTransfer",
										properties: {},
									},
								},
							},
							{
								properties: {
									tag: { enum: ["Freeze"] },
									Freeze: { type: "object", title: "Freeze", properties: {} },
								},
							},
							{
								properties: {
									tag: { enum: ["UnFreeze"] },
									UnFreeze: {
										type: "object",
										title: "UnFreeze",
										properties: {},
									},
								},
							},
							{
								properties: {
									tag: { enum: ["HolderRecovery"] },
									HolderRecovery: {
										type: "object",
										title: "HolderRecovery",
										properties: {},
									},
								},
							},
							{
								properties: {
									tag: { enum: ["Pause"] },
									Pause: { type: "object", title: "Pause", properties: {} },
								},
							},
							{
								properties: {
									tag: { enum: ["UnPause"] },
									UnPause: { type: "object", title: "UnPause", properties: {} },
								},
							},
							{
								properties: {
									tag: { enum: ["Operator"] },
									Operator: {
										type: "object",
										title: "Operator",
										properties: {},
									},
								},
							},
							{
								properties: {
									tag: { enum: ["SetTokenMetadata"] },
									SetTokenMetadata: {
										type: "object",
										title: "SetTokenMetadata",
										properties: {},
									},
								},
							},
						],
					},
				},
			},
			title: "Roles",
		},
	},
};
export type IsAgentRequestUi = {
	address:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
	roles:
		| { tag: "SetIdentityRegistry"; SetIdentityRegistry: never }
		| { tag: "SetCompliance"; SetCompliance: never }
		| { tag: "AddAgent"; AddAgent: never }
		| { tag: "Mint"; Mint: never }
		| { tag: "ForcedBurn"; ForcedBurn: never }
		| { tag: "ForcedTransfer"; ForcedTransfer: never }
		| { tag: "Freeze"; Freeze: never }
		| { tag: "UnFreeze"; UnFreeze: never }
		| { tag: "HolderRecovery"; HolderRecovery: never }
		| { tag: "Pause"; Pause: never }
		| { tag: "UnPause"; UnPause: never }
		| { tag: "Operator"; Operator: never }
		| { tag: "SetTokenMetadata"; SetTokenMetadata: never }[];
};
export const isAgentResponseJsonSchema: RJSFSchema = {
	type: "boolean",
	title: "Is Agent Response",
};
export type IsAgentResponseUi = boolean;
export const isAgentErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Is Agent Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"LogError",
				"InvalidTokenId",
				"InsufficientFunds",
				"Unauthorized",
				"UnVerifiedIdentity",
				"InCompliantTransfer",
				"CallContractError",
				"PausedToken",
				"InvalidAmount",
				"InvalidAddress",
				"RecoveredAddress",
				"SecurityNotSet",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["UnVerifiedIdentity"] },
						UnVerifiedIdentity: {
							type: "object",
							title: "UnVerifiedIdentity",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InCompliantTransfer"] },
						InCompliantTransfer: {
							type: "object",
							title: "InCompliantTransfer",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CallContractError"] },
						CallContractError: {
							type: "object",
							title: "CallContractError",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["PausedToken"] },
						PausedToken: {
							type: "object",
							title: "PausedToken",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAmount"] },
						InvalidAmount: {
							type: "object",
							title: "InvalidAmount",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAddress"] },
						InvalidAddress: {
							type: "object",
							title: "InvalidAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["RecoveredAddress"] },
						RecoveredAddress: {
							type: "object",
							title: "RecoveredAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["SecurityNotSet"] },
						SecurityNotSet: {
							type: "object",
							title: "SecurityNotSet",
							properties: {},
						},
					},
				},
			],
		},
	},
};
export type IsAgentErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "UnVerifiedIdentity"; UnVerifiedIdentity: never }
	| { tag: "InCompliantTransfer"; InCompliantTransfer: never }
	| { tag: "CallContractError"; CallContractError: never }
	| { tag: "PausedToken"; PausedToken: never }
	| { tag: "InvalidAmount"; InvalidAmount: never }
	| { tag: "InvalidAddress"; InvalidAddress: never }
	| { tag: "RecoveredAddress"; RecoveredAddress: never }
	| { tag: "SecurityNotSet"; SecurityNotSet: never };
export const isPausedRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Is Paused Request",
	properties: {
		tokens: {
			type: "array",
			items: {
				type: "object",
				title: "",
				properties: {
					token_id: {
						type: "string",
						title: "Token Id",
						default: "",
						format: "byte",
					},
				},
			},
			title: "Tokens",
		},
	},
};
export type IsPausedRequestUi = { tokens: { token_id: string }[] };
export const isPausedResponseJsonSchema: RJSFSchema = {
	type: "object",
	title: "Is Paused Response",
	properties: {
		tokens: {
			type: "array",
			items: { type: "boolean", title: "" },
			title: "Tokens",
		},
	},
};
export type IsPausedResponseUi = { tokens: boolean[] };
export const isPausedErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Is Paused Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"LogError",
				"InvalidTokenId",
				"InsufficientFunds",
				"Unauthorized",
				"UnVerifiedIdentity",
				"InCompliantTransfer",
				"CallContractError",
				"PausedToken",
				"InvalidAmount",
				"InvalidAddress",
				"RecoveredAddress",
				"SecurityNotSet",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["UnVerifiedIdentity"] },
						UnVerifiedIdentity: {
							type: "object",
							title: "UnVerifiedIdentity",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InCompliantTransfer"] },
						InCompliantTransfer: {
							type: "object",
							title: "InCompliantTransfer",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CallContractError"] },
						CallContractError: {
							type: "object",
							title: "CallContractError",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["PausedToken"] },
						PausedToken: {
							type: "object",
							title: "PausedToken",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAmount"] },
						InvalidAmount: {
							type: "object",
							title: "InvalidAmount",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAddress"] },
						InvalidAddress: {
							type: "object",
							title: "InvalidAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["RecoveredAddress"] },
						RecoveredAddress: {
							type: "object",
							title: "RecoveredAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["SecurityNotSet"] },
						SecurityNotSet: {
							type: "object",
							title: "SecurityNotSet",
							properties: {},
						},
					},
				},
			],
		},
	},
};
export type IsPausedErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "UnVerifiedIdentity"; UnVerifiedIdentity: never }
	| { tag: "InCompliantTransfer"; InCompliantTransfer: never }
	| { tag: "CallContractError"; CallContractError: never }
	| { tag: "PausedToken"; PausedToken: never }
	| { tag: "InvalidAmount"; InvalidAmount: never }
	| { tag: "InvalidAddress"; InvalidAddress: never }
	| { tag: "RecoveredAddress"; RecoveredAddress: never }
	| { tag: "SecurityNotSet"; SecurityNotSet: never };
export const mintRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Mint Request",
	properties: {
		token_id: {
			type: "string",
			title: "Token Id",
			default: "",
			format: "byte",
		},
		owners: {
			type: "array",
			items: {
				type: "object",
				title: "",
				properties: {
					address: {
						type: "object",
						title: "Address",
						properties: {
							tag: { type: "string", enum: ["Account", "Contract"] },
						},
						required: ["tag"],
						dependencies: {
							tag: {
								oneOf: [
									{
										properties: {
											tag: { enum: ["Account"] },
											Account: {
												type: "array",
												items: { type: "string", title: "" },
											},
										},
									},
									{
										properties: {
											tag: { enum: ["Contract"] },
											Contract: {
												type: "array",
												items: [
													{
														type: "object",
														title: "",
														properties: {
															index: { type: "integer", minimum: 0 },
															subindex: { type: "integer", minimum: 0 },
														},
													},
													{ type: "string", title: "", default: "" },
												],
											},
										},
									},
								],
							},
						},
					},
					amount: {
						type: "object",
						title: "Amount",
						properties: {
							frozen: { type: "string", title: "Frozen" },
							un_frozen: { type: "string", title: "Un Frozen" },
						},
					},
				},
			},
			title: "Owners",
		},
	},
};
export type MintRequestUi = {
	token_id: string;
	owners: {
		address:
			| { tag: "Account"; Account: [string] }
			| {
					tag: "Contract";
					Contract: [{ index: number; subindex: number }, string];
			  };
		amount: { frozen: string; un_frozen: string };
	}[];
};
export const mintErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Mint Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"LogError",
				"InvalidTokenId",
				"InsufficientFunds",
				"Unauthorized",
				"UnVerifiedIdentity",
				"InCompliantTransfer",
				"CallContractError",
				"PausedToken",
				"InvalidAmount",
				"InvalidAddress",
				"RecoveredAddress",
				"SecurityNotSet",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["UnVerifiedIdentity"] },
						UnVerifiedIdentity: {
							type: "object",
							title: "UnVerifiedIdentity",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InCompliantTransfer"] },
						InCompliantTransfer: {
							type: "object",
							title: "InCompliantTransfer",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CallContractError"] },
						CallContractError: {
							type: "object",
							title: "CallContractError",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["PausedToken"] },
						PausedToken: {
							type: "object",
							title: "PausedToken",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAmount"] },
						InvalidAmount: {
							type: "object",
							title: "InvalidAmount",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAddress"] },
						InvalidAddress: {
							type: "object",
							title: "InvalidAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["RecoveredAddress"] },
						RecoveredAddress: {
							type: "object",
							title: "RecoveredAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["SecurityNotSet"] },
						SecurityNotSet: {
							type: "object",
							title: "SecurityNotSet",
							properties: {},
						},
					},
				},
			],
		},
	},
};
export type MintErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "UnVerifiedIdentity"; UnVerifiedIdentity: never }
	| { tag: "InCompliantTransfer"; InCompliantTransfer: never }
	| { tag: "CallContractError"; CallContractError: never }
	| { tag: "PausedToken"; PausedToken: never }
	| { tag: "InvalidAmount"; InvalidAmount: never }
	| { tag: "InvalidAddress"; InvalidAddress: never }
	| { tag: "RecoveredAddress"; RecoveredAddress: never }
	| { tag: "SecurityNotSet"; SecurityNotSet: never };
export const operatorOfRequestJsonSchema: RJSFSchema = {
	type: "array",
	items: {
		type: "object",
		title: "",
		properties: {
			owner: {
				type: "object",
				title: "Owner",
				properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
				required: ["tag"],
				dependencies: {
					tag: {
						oneOf: [
							{
								properties: {
									tag: { enum: ["Account"] },
									Account: {
										type: "array",
										items: { type: "string", title: "" },
									},
								},
							},
							{
								properties: {
									tag: { enum: ["Contract"] },
									Contract: {
										type: "array",
										items: {
											type: "object",
											title: "",
											properties: {
												index: { type: "integer", minimum: 0 },
												subindex: { type: "integer", minimum: 0 },
											},
										},
									},
								},
							},
						],
					},
				},
			},
			address: {
				type: "object",
				title: "Address",
				properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
				required: ["tag"],
				dependencies: {
					tag: {
						oneOf: [
							{
								properties: {
									tag: { enum: ["Account"] },
									Account: {
										type: "array",
										items: { type: "string", title: "" },
									},
								},
							},
							{
								properties: {
									tag: { enum: ["Contract"] },
									Contract: {
										type: "array",
										items: {
											type: "object",
											title: "",
											properties: {
												index: { type: "integer", minimum: 0 },
												subindex: { type: "integer", minimum: 0 },
											},
										},
									},
								},
							},
						],
					},
				},
			},
		},
	},
	title: "Operator Of Request",
};
export type OperatorOfRequestUi = {
	owner:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
	address:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
}[];
export const operatorOfResponseJsonSchema: RJSFSchema = {
	type: "array",
	items: { type: "boolean", title: "" },
	title: "Operator Of Response",
};
export type OperatorOfResponseUi = boolean[];
export const operatorOfErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Operator Of Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"LogError",
				"InvalidTokenId",
				"InsufficientFunds",
				"Unauthorized",
				"UnVerifiedIdentity",
				"InCompliantTransfer",
				"CallContractError",
				"PausedToken",
				"InvalidAmount",
				"InvalidAddress",
				"RecoveredAddress",
				"SecurityNotSet",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["UnVerifiedIdentity"] },
						UnVerifiedIdentity: {
							type: "object",
							title: "UnVerifiedIdentity",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InCompliantTransfer"] },
						InCompliantTransfer: {
							type: "object",
							title: "InCompliantTransfer",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CallContractError"] },
						CallContractError: {
							type: "object",
							title: "CallContractError",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["PausedToken"] },
						PausedToken: {
							type: "object",
							title: "PausedToken",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAmount"] },
						InvalidAmount: {
							type: "object",
							title: "InvalidAmount",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAddress"] },
						InvalidAddress: {
							type: "object",
							title: "InvalidAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["RecoveredAddress"] },
						RecoveredAddress: {
							type: "object",
							title: "RecoveredAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["SecurityNotSet"] },
						SecurityNotSet: {
							type: "object",
							title: "SecurityNotSet",
							properties: {},
						},
					},
				},
			],
		},
	},
};
export type OperatorOfErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "UnVerifiedIdentity"; UnVerifiedIdentity: never }
	| { tag: "InCompliantTransfer"; InCompliantTransfer: never }
	| { tag: "CallContractError"; CallContractError: never }
	| { tag: "PausedToken"; PausedToken: never }
	| { tag: "InvalidAmount"; InvalidAmount: never }
	| { tag: "InvalidAddress"; InvalidAddress: never }
	| { tag: "RecoveredAddress"; RecoveredAddress: never }
	| { tag: "SecurityNotSet"; SecurityNotSet: never };
export const pauseRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Pause Request",
	properties: {
		tokens: {
			type: "array",
			items: {
				type: "object",
				title: "",
				properties: {
					token_id: {
						type: "string",
						title: "Token Id",
						default: "",
						format: "byte",
					},
				},
			},
			title: "Tokens",
		},
	},
};
export type PauseRequestUi = { tokens: { token_id: string }[] };
export const pauseErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Pause Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"LogError",
				"InvalidTokenId",
				"InsufficientFunds",
				"Unauthorized",
				"UnVerifiedIdentity",
				"InCompliantTransfer",
				"CallContractError",
				"PausedToken",
				"InvalidAmount",
				"InvalidAddress",
				"RecoveredAddress",
				"SecurityNotSet",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["UnVerifiedIdentity"] },
						UnVerifiedIdentity: {
							type: "object",
							title: "UnVerifiedIdentity",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InCompliantTransfer"] },
						InCompliantTransfer: {
							type: "object",
							title: "InCompliantTransfer",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CallContractError"] },
						CallContractError: {
							type: "object",
							title: "CallContractError",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["PausedToken"] },
						PausedToken: {
							type: "object",
							title: "PausedToken",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAmount"] },
						InvalidAmount: {
							type: "object",
							title: "InvalidAmount",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAddress"] },
						InvalidAddress: {
							type: "object",
							title: "InvalidAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["RecoveredAddress"] },
						RecoveredAddress: {
							type: "object",
							title: "RecoveredAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["SecurityNotSet"] },
						SecurityNotSet: {
							type: "object",
							title: "SecurityNotSet",
							properties: {},
						},
					},
				},
			],
		},
	},
};
export type PauseErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "UnVerifiedIdentity"; UnVerifiedIdentity: never }
	| { tag: "InCompliantTransfer"; InCompliantTransfer: never }
	| { tag: "CallContractError"; CallContractError: never }
	| { tag: "PausedToken"; PausedToken: never }
	| { tag: "InvalidAmount"; InvalidAmount: never }
	| { tag: "InvalidAddress"; InvalidAddress: never }
	| { tag: "RecoveredAddress"; RecoveredAddress: never }
	| { tag: "SecurityNotSet"; SecurityNotSet: never };
export const recoverRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Recover Request",
	properties: {
		lost_account: {
			type: "object",
			title: "Lost Account",
			properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
			required: ["tag"],
			dependencies: {
				tag: {
					oneOf: [
						{
							properties: {
								tag: { enum: ["Account"] },
								Account: {
									type: "array",
									items: { type: "string", title: "" },
								},
							},
						},
						{
							properties: {
								tag: { enum: ["Contract"] },
								Contract: {
									type: "array",
									items: {
										type: "object",
										title: "",
										properties: {
											index: { type: "integer", minimum: 0 },
											subindex: { type: "integer", minimum: 0 },
										},
									},
								},
							},
						},
					],
				},
			},
		},
		new_account: {
			type: "object",
			title: "New Account",
			properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
			required: ["tag"],
			dependencies: {
				tag: {
					oneOf: [
						{
							properties: {
								tag: { enum: ["Account"] },
								Account: {
									type: "array",
									items: { type: "string", title: "" },
								},
							},
						},
						{
							properties: {
								tag: { enum: ["Contract"] },
								Contract: {
									type: "array",
									items: {
										type: "object",
										title: "",
										properties: {
											index: { type: "integer", minimum: 0 },
											subindex: { type: "integer", minimum: 0 },
										},
									},
								},
							},
						},
					],
				},
			},
		},
	},
};
export type RecoverRequestUi = {
	lost_account:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
	new_account:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
};
export const recoverErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Recover Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"LogError",
				"InvalidTokenId",
				"InsufficientFunds",
				"Unauthorized",
				"UnVerifiedIdentity",
				"InCompliantTransfer",
				"CallContractError",
				"PausedToken",
				"InvalidAmount",
				"InvalidAddress",
				"RecoveredAddress",
				"SecurityNotSet",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["UnVerifiedIdentity"] },
						UnVerifiedIdentity: {
							type: "object",
							title: "UnVerifiedIdentity",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InCompliantTransfer"] },
						InCompliantTransfer: {
							type: "object",
							title: "InCompliantTransfer",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CallContractError"] },
						CallContractError: {
							type: "object",
							title: "CallContractError",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["PausedToken"] },
						PausedToken: {
							type: "object",
							title: "PausedToken",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAmount"] },
						InvalidAmount: {
							type: "object",
							title: "InvalidAmount",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAddress"] },
						InvalidAddress: {
							type: "object",
							title: "InvalidAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["RecoveredAddress"] },
						RecoveredAddress: {
							type: "object",
							title: "RecoveredAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["SecurityNotSet"] },
						SecurityNotSet: {
							type: "object",
							title: "SecurityNotSet",
							properties: {},
						},
					},
				},
			],
		},
	},
};
export type RecoverErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "UnVerifiedIdentity"; UnVerifiedIdentity: never }
	| { tag: "InCompliantTransfer"; InCompliantTransfer: never }
	| { tag: "CallContractError"; CallContractError: never }
	| { tag: "PausedToken"; PausedToken: never }
	| { tag: "InvalidAmount"; InvalidAmount: never }
	| { tag: "InvalidAddress"; InvalidAddress: never }
	| { tag: "RecoveredAddress"; RecoveredAddress: never }
	| { tag: "SecurityNotSet"; SecurityNotSet: never };
export const recoveryAddressRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Recovery Address Request",
	properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["Account"] },
						Account: { type: "array", items: { type: "string", title: "" } },
					},
				},
				{
					properties: {
						tag: { enum: ["Contract"] },
						Contract: {
							type: "array",
							items: {
								type: "object",
								title: "",
								properties: {
									index: { type: "integer", minimum: 0 },
									subindex: { type: "integer", minimum: 0 },
								},
							},
						},
					},
				},
			],
		},
	},
};
export type RecoveryAddressRequestUi =
	| { tag: "Account"; Account: [string] }
	| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
export const recoveryAddressResponseJsonSchema: RJSFSchema = {
	type: "object",
	title: "Recovery Address Response",
	properties: { tag: { type: "string", enum: ["None", "Some"] } },
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["None"] },
						None: { type: "object", title: "None", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["Some"] },
						Some: {
							type: "array",
							items: {
								type: "object",
								title: "",
								properties: {
									tag: { type: "string", enum: ["Account", "Contract"] },
								},
								required: ["tag"],
								dependencies: {
									tag: {
										oneOf: [
											{
												properties: {
													tag: { enum: ["Account"] },
													Account: {
														type: "array",
														items: { type: "string", title: "" },
													},
												},
											},
											{
												properties: {
													tag: { enum: ["Contract"] },
													Contract: {
														type: "array",
														items: {
															type: "object",
															title: "",
															properties: {
																index: { type: "integer", minimum: 0 },
																subindex: { type: "integer", minimum: 0 },
															},
														},
													},
												},
											},
										],
									},
								},
							},
						},
					},
				},
			],
		},
	},
};
export type RecoveryAddressResponseUi =
	| { tag: "None"; None: never }
	| {
			tag: "Some";
			Some: [
				| { tag: "Account"; Account: [string] }
				| { tag: "Contract"; Contract: [{ index: number; subindex: number }] },
			];
	  };
export const recoveryAddressErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Recovery Address Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"LogError",
				"InvalidTokenId",
				"InsufficientFunds",
				"Unauthorized",
				"UnVerifiedIdentity",
				"InCompliantTransfer",
				"CallContractError",
				"PausedToken",
				"InvalidAmount",
				"InvalidAddress",
				"RecoveredAddress",
				"SecurityNotSet",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["UnVerifiedIdentity"] },
						UnVerifiedIdentity: {
							type: "object",
							title: "UnVerifiedIdentity",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InCompliantTransfer"] },
						InCompliantTransfer: {
							type: "object",
							title: "InCompliantTransfer",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CallContractError"] },
						CallContractError: {
							type: "object",
							title: "CallContractError",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["PausedToken"] },
						PausedToken: {
							type: "object",
							title: "PausedToken",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAmount"] },
						InvalidAmount: {
							type: "object",
							title: "InvalidAmount",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAddress"] },
						InvalidAddress: {
							type: "object",
							title: "InvalidAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["RecoveredAddress"] },
						RecoveredAddress: {
							type: "object",
							title: "RecoveredAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["SecurityNotSet"] },
						SecurityNotSet: {
							type: "object",
							title: "SecurityNotSet",
							properties: {},
						},
					},
				},
			],
		},
	},
};
export type RecoveryAddressErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "UnVerifiedIdentity"; UnVerifiedIdentity: never }
	| { tag: "InCompliantTransfer"; InCompliantTransfer: never }
	| { tag: "CallContractError"; CallContractError: never }
	| { tag: "PausedToken"; PausedToken: never }
	| { tag: "InvalidAmount"; InvalidAmount: never }
	| { tag: "InvalidAddress"; InvalidAddress: never }
	| { tag: "RecoveredAddress"; RecoveredAddress: never }
	| { tag: "SecurityNotSet"; SecurityNotSet: never };
export const removeAgentRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Remove Agent Request",
	properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["Account"] },
						Account: { type: "array", items: { type: "string", title: "" } },
					},
				},
				{
					properties: {
						tag: { enum: ["Contract"] },
						Contract: {
							type: "array",
							items: {
								type: "object",
								title: "",
								properties: {
									index: { type: "integer", minimum: 0 },
									subindex: { type: "integer", minimum: 0 },
								},
							},
						},
					},
				},
			],
		},
	},
};
export type RemoveAgentRequestUi =
	| { tag: "Account"; Account: [string] }
	| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
export const removeAgentErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Remove Agent Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"LogError",
				"InvalidTokenId",
				"InsufficientFunds",
				"Unauthorized",
				"UnVerifiedIdentity",
				"InCompliantTransfer",
				"CallContractError",
				"PausedToken",
				"InvalidAmount",
				"InvalidAddress",
				"RecoveredAddress",
				"SecurityNotSet",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["UnVerifiedIdentity"] },
						UnVerifiedIdentity: {
							type: "object",
							title: "UnVerifiedIdentity",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InCompliantTransfer"] },
						InCompliantTransfer: {
							type: "object",
							title: "InCompliantTransfer",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CallContractError"] },
						CallContractError: {
							type: "object",
							title: "CallContractError",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["PausedToken"] },
						PausedToken: {
							type: "object",
							title: "PausedToken",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAmount"] },
						InvalidAmount: {
							type: "object",
							title: "InvalidAmount",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAddress"] },
						InvalidAddress: {
							type: "object",
							title: "InvalidAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["RecoveredAddress"] },
						RecoveredAddress: {
							type: "object",
							title: "RecoveredAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["SecurityNotSet"] },
						SecurityNotSet: {
							type: "object",
							title: "SecurityNotSet",
							properties: {},
						},
					},
				},
			],
		},
	},
};
export type RemoveAgentErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "UnVerifiedIdentity"; UnVerifiedIdentity: never }
	| { tag: "InCompliantTransfer"; InCompliantTransfer: never }
	| { tag: "CallContractError"; CallContractError: never }
	| { tag: "PausedToken"; PausedToken: never }
	| { tag: "InvalidAmount"; InvalidAmount: never }
	| { tag: "InvalidAddress"; InvalidAddress: never }
	| { tag: "RecoveredAddress"; RecoveredAddress: never }
	| { tag: "SecurityNotSet"; SecurityNotSet: never };
export const setComplianceRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Set Compliance Request",
	properties: {
		index: { type: "integer", minimum: 0 },
		subindex: { type: "integer", minimum: 0 },
	},
};
export type SetComplianceRequestUi = { index: number; subindex: number };
export const setComplianceErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Set Compliance Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"LogError",
				"InvalidTokenId",
				"InsufficientFunds",
				"Unauthorized",
				"UnVerifiedIdentity",
				"InCompliantTransfer",
				"CallContractError",
				"PausedToken",
				"InvalidAmount",
				"InvalidAddress",
				"RecoveredAddress",
				"SecurityNotSet",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["UnVerifiedIdentity"] },
						UnVerifiedIdentity: {
							type: "object",
							title: "UnVerifiedIdentity",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InCompliantTransfer"] },
						InCompliantTransfer: {
							type: "object",
							title: "InCompliantTransfer",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CallContractError"] },
						CallContractError: {
							type: "object",
							title: "CallContractError",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["PausedToken"] },
						PausedToken: {
							type: "object",
							title: "PausedToken",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAmount"] },
						InvalidAmount: {
							type: "object",
							title: "InvalidAmount",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAddress"] },
						InvalidAddress: {
							type: "object",
							title: "InvalidAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["RecoveredAddress"] },
						RecoveredAddress: {
							type: "object",
							title: "RecoveredAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["SecurityNotSet"] },
						SecurityNotSet: {
							type: "object",
							title: "SecurityNotSet",
							properties: {},
						},
					},
				},
			],
		},
	},
};
export type SetComplianceErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "UnVerifiedIdentity"; UnVerifiedIdentity: never }
	| { tag: "InCompliantTransfer"; InCompliantTransfer: never }
	| { tag: "CallContractError"; CallContractError: never }
	| { tag: "PausedToken"; PausedToken: never }
	| { tag: "InvalidAmount"; InvalidAmount: never }
	| { tag: "InvalidAddress"; InvalidAddress: never }
	| { tag: "RecoveredAddress"; RecoveredAddress: never }
	| { tag: "SecurityNotSet"; SecurityNotSet: never };
export const setIdentityRegistryRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Set Identity Registry Request",
	properties: {
		index: { type: "integer", minimum: 0 },
		subindex: { type: "integer", minimum: 0 },
	},
};
export type SetIdentityRegistryRequestUi = { index: number; subindex: number };
export const setIdentityRegistryErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Set Identity Registry Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"LogError",
				"InvalidTokenId",
				"InsufficientFunds",
				"Unauthorized",
				"UnVerifiedIdentity",
				"InCompliantTransfer",
				"CallContractError",
				"PausedToken",
				"InvalidAmount",
				"InvalidAddress",
				"RecoveredAddress",
				"SecurityNotSet",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["UnVerifiedIdentity"] },
						UnVerifiedIdentity: {
							type: "object",
							title: "UnVerifiedIdentity",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InCompliantTransfer"] },
						InCompliantTransfer: {
							type: "object",
							title: "InCompliantTransfer",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CallContractError"] },
						CallContractError: {
							type: "object",
							title: "CallContractError",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["PausedToken"] },
						PausedToken: {
							type: "object",
							title: "PausedToken",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAmount"] },
						InvalidAmount: {
							type: "object",
							title: "InvalidAmount",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAddress"] },
						InvalidAddress: {
							type: "object",
							title: "InvalidAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["RecoveredAddress"] },
						RecoveredAddress: {
							type: "object",
							title: "RecoveredAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["SecurityNotSet"] },
						SecurityNotSet: {
							type: "object",
							title: "SecurityNotSet",
							properties: {},
						},
					},
				},
			],
		},
	},
};
export type SetIdentityRegistryErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "UnVerifiedIdentity"; UnVerifiedIdentity: never }
	| { tag: "InCompliantTransfer"; InCompliantTransfer: never }
	| { tag: "CallContractError"; CallContractError: never }
	| { tag: "PausedToken"; PausedToken: never }
	| { tag: "InvalidAmount"; InvalidAmount: never }
	| { tag: "InvalidAddress"; InvalidAddress: never }
	| { tag: "RecoveredAddress"; RecoveredAddress: never }
	| { tag: "SecurityNotSet"; SecurityNotSet: never };
export const setTokenMetadataRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Set Token Metadata Request",
	properties: {
		params: {
			type: "array",
			items: {
				type: "object",
				title: "",
				properties: {
					token_id: {
						type: "string",
						title: "Token Id",
						default: "",
						format: "byte",
					},
					token_metadata: {
						type: "object",
						title: "Token Metadata",
						properties: {
							url: { type: "string", title: "Url", default: "" },
							hash: {
								type: "object",
								title: "Hash",
								properties: { tag: { type: "string", enum: ["None", "Some"] } },
								required: ["tag"],
								dependencies: {
									tag: {
										oneOf: [
											{
												properties: {
													tag: { enum: ["None"] },
													None: {
														type: "object",
														title: "None",
														properties: {},
													},
												},
											},
											{
												properties: {
													tag: { enum: ["Some"] },
													Some: {
														type: "array",
														items: { type: "string", title: "", default: "" },
													},
												},
											},
										],
									},
								},
							},
						},
					},
				},
			},
			title: "Params",
		},
	},
};
export type SetTokenMetadataRequestUi = {
	params: {
		token_id: string;
		token_metadata: {
			url: string;
			hash: { tag: "None"; None: never } | { tag: "Some"; Some: [string] };
		};
	}[];
};
export const setTokenMetadataErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Set Token Metadata Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"LogError",
				"InvalidTokenId",
				"InsufficientFunds",
				"Unauthorized",
				"UnVerifiedIdentity",
				"InCompliantTransfer",
				"CallContractError",
				"PausedToken",
				"InvalidAmount",
				"InvalidAddress",
				"RecoveredAddress",
				"SecurityNotSet",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["UnVerifiedIdentity"] },
						UnVerifiedIdentity: {
							type: "object",
							title: "UnVerifiedIdentity",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InCompliantTransfer"] },
						InCompliantTransfer: {
							type: "object",
							title: "InCompliantTransfer",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CallContractError"] },
						CallContractError: {
							type: "object",
							title: "CallContractError",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["PausedToken"] },
						PausedToken: {
							type: "object",
							title: "PausedToken",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAmount"] },
						InvalidAmount: {
							type: "object",
							title: "InvalidAmount",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAddress"] },
						InvalidAddress: {
							type: "object",
							title: "InvalidAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["RecoveredAddress"] },
						RecoveredAddress: {
							type: "object",
							title: "RecoveredAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["SecurityNotSet"] },
						SecurityNotSet: {
							type: "object",
							title: "SecurityNotSet",
							properties: {},
						},
					},
				},
			],
		},
	},
};
export type SetTokenMetadataErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "UnVerifiedIdentity"; UnVerifiedIdentity: never }
	| { tag: "InCompliantTransfer"; InCompliantTransfer: never }
	| { tag: "CallContractError"; CallContractError: never }
	| { tag: "PausedToken"; PausedToken: never }
	| { tag: "InvalidAmount"; InvalidAmount: never }
	| { tag: "InvalidAddress"; InvalidAddress: never }
	| { tag: "RecoveredAddress"; RecoveredAddress: never }
	| { tag: "SecurityNotSet"; SecurityNotSet: never };
export const supportsRequestJsonSchema: RJSFSchema = {
	type: "array",
	items: { type: "string", title: "", default: "" },
	title: "Supports Request",
};
export type SupportsRequestUi = string[];
export const supportsResponseJsonSchema: RJSFSchema = {
	type: "array",
	items: {
		type: "object",
		title: "",
		properties: {
			tag: { type: "string", enum: ["NoSupport", "Support", "SupportBy"] },
		},
		required: ["tag"],
		dependencies: {
			tag: {
				oneOf: [
					{
						properties: {
							tag: { enum: ["NoSupport"] },
							NoSupport: { type: "object", title: "NoSupport", properties: {} },
						},
					},
					{
						properties: {
							tag: { enum: ["Support"] },
							Support: { type: "object", title: "Support", properties: {} },
						},
					},
					{
						properties: {
							tag: { enum: ["SupportBy"] },
							SupportBy: {
								type: "array",
								items: {
									type: "array",
									items: {
										type: "object",
										title: "",
										properties: {
											index: { type: "integer", minimum: 0 },
											subindex: { type: "integer", minimum: 0 },
										},
									},
									title: "",
								},
							},
						},
					},
				],
			},
		},
	},
	title: "Supports Response",
};
export type SupportsResponseUi =
	| { tag: "NoSupport"; NoSupport: never }
	| { tag: "Support"; Support: never }
	| { tag: "SupportBy"; SupportBy: [{ index: number; subindex: number }[]] }[];
export const supportsErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Supports Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"LogError",
				"InvalidTokenId",
				"InsufficientFunds",
				"Unauthorized",
				"UnVerifiedIdentity",
				"InCompliantTransfer",
				"CallContractError",
				"PausedToken",
				"InvalidAmount",
				"InvalidAddress",
				"RecoveredAddress",
				"SecurityNotSet",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["UnVerifiedIdentity"] },
						UnVerifiedIdentity: {
							type: "object",
							title: "UnVerifiedIdentity",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InCompliantTransfer"] },
						InCompliantTransfer: {
							type: "object",
							title: "InCompliantTransfer",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CallContractError"] },
						CallContractError: {
							type: "object",
							title: "CallContractError",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["PausedToken"] },
						PausedToken: {
							type: "object",
							title: "PausedToken",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAmount"] },
						InvalidAmount: {
							type: "object",
							title: "InvalidAmount",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAddress"] },
						InvalidAddress: {
							type: "object",
							title: "InvalidAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["RecoveredAddress"] },
						RecoveredAddress: {
							type: "object",
							title: "RecoveredAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["SecurityNotSet"] },
						SecurityNotSet: {
							type: "object",
							title: "SecurityNotSet",
							properties: {},
						},
					},
				},
			],
		},
	},
};
export type SupportsErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "UnVerifiedIdentity"; UnVerifiedIdentity: never }
	| { tag: "InCompliantTransfer"; InCompliantTransfer: never }
	| { tag: "CallContractError"; CallContractError: never }
	| { tag: "PausedToken"; PausedToken: never }
	| { tag: "InvalidAmount"; InvalidAmount: never }
	| { tag: "InvalidAddress"; InvalidAddress: never }
	| { tag: "RecoveredAddress"; RecoveredAddress: never }
	| { tag: "SecurityNotSet"; SecurityNotSet: never };
export const tokenMetadataRequestJsonSchema: RJSFSchema = {
	type: "array",
	items: { type: "string", title: "", default: "", format: "byte" },
	title: "Token Metadata Request",
};
export type TokenMetadataRequestUi = string[];
export const tokenMetadataResponseJsonSchema: RJSFSchema = {
	type: "array",
	items: {
		type: "object",
		title: "",
		properties: {
			url: { type: "string", title: "Url", default: "" },
			hash: {
				type: "object",
				title: "Hash",
				properties: { tag: { type: "string", enum: ["None", "Some"] } },
				required: ["tag"],
				dependencies: {
					tag: {
						oneOf: [
							{
								properties: {
									tag: { enum: ["None"] },
									None: { type: "object", title: "None", properties: {} },
								},
							},
							{
								properties: {
									tag: { enum: ["Some"] },
									Some: {
										type: "array",
										items: {
											type: "string",
											title: "",
											default: "",
											format: "byte",
										},
									},
								},
							},
						],
					},
				},
			},
		},
	},
	title: "Token Metadata Response",
};
export type TokenMetadataResponseUi = {
	url: string;
	hash: { tag: "None"; None: never } | { tag: "Some"; Some: [string] };
}[];
export const tokenMetadataErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Token Metadata Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"LogError",
				"InvalidTokenId",
				"InsufficientFunds",
				"Unauthorized",
				"UnVerifiedIdentity",
				"InCompliantTransfer",
				"CallContractError",
				"PausedToken",
				"InvalidAmount",
				"InvalidAddress",
				"RecoveredAddress",
				"SecurityNotSet",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["UnVerifiedIdentity"] },
						UnVerifiedIdentity: {
							type: "object",
							title: "UnVerifiedIdentity",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InCompliantTransfer"] },
						InCompliantTransfer: {
							type: "object",
							title: "InCompliantTransfer",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CallContractError"] },
						CallContractError: {
							type: "object",
							title: "CallContractError",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["PausedToken"] },
						PausedToken: {
							type: "object",
							title: "PausedToken",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAmount"] },
						InvalidAmount: {
							type: "object",
							title: "InvalidAmount",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAddress"] },
						InvalidAddress: {
							type: "object",
							title: "InvalidAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["RecoveredAddress"] },
						RecoveredAddress: {
							type: "object",
							title: "RecoveredAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["SecurityNotSet"] },
						SecurityNotSet: {
							type: "object",
							title: "SecurityNotSet",
							properties: {},
						},
					},
				},
			],
		},
	},
};
export type TokenMetadataErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "UnVerifiedIdentity"; UnVerifiedIdentity: never }
	| { tag: "InCompliantTransfer"; InCompliantTransfer: never }
	| { tag: "CallContractError"; CallContractError: never }
	| { tag: "PausedToken"; PausedToken: never }
	| { tag: "InvalidAmount"; InvalidAmount: never }
	| { tag: "InvalidAddress"; InvalidAddress: never }
	| { tag: "RecoveredAddress"; RecoveredAddress: never }
	| { tag: "SecurityNotSet"; SecurityNotSet: never };
export const transferRequestJsonSchema: RJSFSchema = {
	type: "array",
	items: {
		type: "object",
		title: "",
		properties: {
			token_id: {
				type: "string",
				title: "Token Id",
				default: "",
				format: "byte",
			},
			amount: { type: "string", title: "Amount" },
			from: {
				type: "object",
				title: "From",
				properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
				required: ["tag"],
				dependencies: {
					tag: {
						oneOf: [
							{
								properties: {
									tag: { enum: ["Account"] },
									Account: {
										type: "array",
										items: { type: "string", title: "" },
									},
								},
							},
							{
								properties: {
									tag: { enum: ["Contract"] },
									Contract: {
										type: "array",
										items: {
											type: "object",
											title: "",
											properties: {
												index: { type: "integer", minimum: 0 },
												subindex: { type: "integer", minimum: 0 },
											},
										},
									},
								},
							},
						],
					},
				},
			},
			to: {
				type: "object",
				title: "To",
				properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
				required: ["tag"],
				dependencies: {
					tag: {
						oneOf: [
							{
								properties: {
									tag: { enum: ["Account"] },
									Account: {
										type: "array",
										items: { type: "string", title: "" },
									},
								},
							},
							{
								properties: {
									tag: { enum: ["Contract"] },
									Contract: {
										type: "array",
										items: [
											{
												type: "object",
												title: "",
												properties: {
													index: { type: "integer", minimum: 0 },
													subindex: { type: "integer", minimum: 0 },
												},
											},
											{ type: "string", title: "", default: "" },
										],
									},
								},
							},
						],
					},
				},
			},
			data: { type: "string", title: "Data", default: "", format: "byte" },
		},
	},
	title: "Transfer Request",
};
export type TransferRequestUi = {
	token_id: string;
	amount: string;
	from:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
	to:
		| { tag: "Account"; Account: [string] }
		| {
				tag: "Contract";
				Contract: [{ index: number; subindex: number }, string];
		  };
	data: string;
}[];
export const transferErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Transfer Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"LogError",
				"InvalidTokenId",
				"InsufficientFunds",
				"Unauthorized",
				"UnVerifiedIdentity",
				"InCompliantTransfer",
				"CallContractError",
				"PausedToken",
				"InvalidAmount",
				"InvalidAddress",
				"RecoveredAddress",
				"SecurityNotSet",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["UnVerifiedIdentity"] },
						UnVerifiedIdentity: {
							type: "object",
							title: "UnVerifiedIdentity",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InCompliantTransfer"] },
						InCompliantTransfer: {
							type: "object",
							title: "InCompliantTransfer",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CallContractError"] },
						CallContractError: {
							type: "object",
							title: "CallContractError",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["PausedToken"] },
						PausedToken: {
							type: "object",
							title: "PausedToken",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAmount"] },
						InvalidAmount: {
							type: "object",
							title: "InvalidAmount",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAddress"] },
						InvalidAddress: {
							type: "object",
							title: "InvalidAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["RecoveredAddress"] },
						RecoveredAddress: {
							type: "object",
							title: "RecoveredAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["SecurityNotSet"] },
						SecurityNotSet: {
							type: "object",
							title: "SecurityNotSet",
							properties: {},
						},
					},
				},
			],
		},
	},
};
export type TransferErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "UnVerifiedIdentity"; UnVerifiedIdentity: never }
	| { tag: "InCompliantTransfer"; InCompliantTransfer: never }
	| { tag: "CallContractError"; CallContractError: never }
	| { tag: "PausedToken"; PausedToken: never }
	| { tag: "InvalidAmount"; InvalidAmount: never }
	| { tag: "InvalidAddress"; InvalidAddress: never }
	| { tag: "RecoveredAddress"; RecoveredAddress: never }
	| { tag: "SecurityNotSet"; SecurityNotSet: never };
export const unFreezeRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Un Freeze Request",
	properties: {
		owner: {
			type: "object",
			title: "Owner",
			properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
			required: ["tag"],
			dependencies: {
				tag: {
					oneOf: [
						{
							properties: {
								tag: { enum: ["Account"] },
								Account: {
									type: "array",
									items: { type: "string", title: "" },
								},
							},
						},
						{
							properties: {
								tag: { enum: ["Contract"] },
								Contract: {
									type: "array",
									items: {
										type: "object",
										title: "",
										properties: {
											index: { type: "integer", minimum: 0 },
											subindex: { type: "integer", minimum: 0 },
										},
									},
								},
							},
						},
					],
				},
			},
		},
		tokens: {
			type: "array",
			items: {
				type: "object",
				title: "",
				properties: {
					token_id: {
						type: "string",
						title: "Token Id",
						default: "",
						format: "byte",
					},
					token_amount: { type: "string", title: "Token Amount" },
				},
			},
			title: "Tokens",
		},
	},
};
export type UnFreezeRequestUi = {
	owner:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
	tokens: { token_id: string; token_amount: string }[];
};
export const unFreezeErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Un Freeze Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"LogError",
				"InvalidTokenId",
				"InsufficientFunds",
				"Unauthorized",
				"UnVerifiedIdentity",
				"InCompliantTransfer",
				"CallContractError",
				"PausedToken",
				"InvalidAmount",
				"InvalidAddress",
				"RecoveredAddress",
				"SecurityNotSet",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["UnVerifiedIdentity"] },
						UnVerifiedIdentity: {
							type: "object",
							title: "UnVerifiedIdentity",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InCompliantTransfer"] },
						InCompliantTransfer: {
							type: "object",
							title: "InCompliantTransfer",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CallContractError"] },
						CallContractError: {
							type: "object",
							title: "CallContractError",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["PausedToken"] },
						PausedToken: {
							type: "object",
							title: "PausedToken",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAmount"] },
						InvalidAmount: {
							type: "object",
							title: "InvalidAmount",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAddress"] },
						InvalidAddress: {
							type: "object",
							title: "InvalidAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["RecoveredAddress"] },
						RecoveredAddress: {
							type: "object",
							title: "RecoveredAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["SecurityNotSet"] },
						SecurityNotSet: {
							type: "object",
							title: "SecurityNotSet",
							properties: {},
						},
					},
				},
			],
		},
	},
};
export type UnFreezeErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "UnVerifiedIdentity"; UnVerifiedIdentity: never }
	| { tag: "InCompliantTransfer"; InCompliantTransfer: never }
	| { tag: "CallContractError"; CallContractError: never }
	| { tag: "PausedToken"; PausedToken: never }
	| { tag: "InvalidAmount"; InvalidAmount: never }
	| { tag: "InvalidAddress"; InvalidAddress: never }
	| { tag: "RecoveredAddress"; RecoveredAddress: never }
	| { tag: "SecurityNotSet"; SecurityNotSet: never };
export const unPauseRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Un Pause Request",
	properties: {
		tokens: {
			type: "array",
			items: {
				type: "object",
				title: "",
				properties: {
					token_id: {
						type: "string",
						title: "Token Id",
						default: "",
						format: "byte",
					},
				},
			},
			title: "Tokens",
		},
	},
};
export type UnPauseRequestUi = { tokens: { token_id: string }[] };
export const unPauseErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Un Pause Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"LogError",
				"InvalidTokenId",
				"InsufficientFunds",
				"Unauthorized",
				"UnVerifiedIdentity",
				"InCompliantTransfer",
				"CallContractError",
				"PausedToken",
				"InvalidAmount",
				"InvalidAddress",
				"RecoveredAddress",
				"SecurityNotSet",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["UnVerifiedIdentity"] },
						UnVerifiedIdentity: {
							type: "object",
							title: "UnVerifiedIdentity",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InCompliantTransfer"] },
						InCompliantTransfer: {
							type: "object",
							title: "InCompliantTransfer",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CallContractError"] },
						CallContractError: {
							type: "object",
							title: "CallContractError",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["PausedToken"] },
						PausedToken: {
							type: "object",
							title: "PausedToken",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAmount"] },
						InvalidAmount: {
							type: "object",
							title: "InvalidAmount",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAddress"] },
						InvalidAddress: {
							type: "object",
							title: "InvalidAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["RecoveredAddress"] },
						RecoveredAddress: {
							type: "object",
							title: "RecoveredAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["SecurityNotSet"] },
						SecurityNotSet: {
							type: "object",
							title: "SecurityNotSet",
							properties: {},
						},
					},
				},
			],
		},
	},
};
export type UnPauseErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "UnVerifiedIdentity"; UnVerifiedIdentity: never }
	| { tag: "InCompliantTransfer"; InCompliantTransfer: never }
	| { tag: "CallContractError"; CallContractError: never }
	| { tag: "PausedToken"; PausedToken: never }
	| { tag: "InvalidAmount"; InvalidAmount: never }
	| { tag: "InvalidAddress"; InvalidAddress: never }
	| { tag: "RecoveredAddress"; RecoveredAddress: never }
	| { tag: "SecurityNotSet"; SecurityNotSet: never };
export const updateOperatorRequestJsonSchema: RJSFSchema = {
	type: "array",
	items: {
		type: "object",
		title: "",
		properties: {
			update: {
				type: "object",
				title: "Update",
				properties: { tag: { type: "string", enum: ["Remove", "Add"] } },
				required: ["tag"],
				dependencies: {
					tag: {
						oneOf: [
							{
								properties: {
									tag: { enum: ["Remove"] },
									Remove: { type: "object", title: "Remove", properties: {} },
								},
							},
							{
								properties: {
									tag: { enum: ["Add"] },
									Add: { type: "object", title: "Add", properties: {} },
								},
							},
						],
					},
				},
			},
			operator: {
				type: "object",
				title: "Operator",
				properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
				required: ["tag"],
				dependencies: {
					tag: {
						oneOf: [
							{
								properties: {
									tag: { enum: ["Account"] },
									Account: {
										type: "array",
										items: { type: "string", title: "" },
									},
								},
							},
							{
								properties: {
									tag: { enum: ["Contract"] },
									Contract: {
										type: "array",
										items: {
											type: "object",
											title: "",
											properties: {
												index: { type: "integer", minimum: 0 },
												subindex: { type: "integer", minimum: 0 },
											},
										},
									},
								},
							},
						],
					},
				},
			},
		},
	},
	title: "Update Operator Request",
};
export type UpdateOperatorRequestUi = {
	update: { tag: "Remove"; Remove: never } | { tag: "Add"; Add: never };
	operator:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
}[];
export const updateOperatorErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Update Operator Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"LogError",
				"InvalidTokenId",
				"InsufficientFunds",
				"Unauthorized",
				"UnVerifiedIdentity",
				"InCompliantTransfer",
				"CallContractError",
				"PausedToken",
				"InvalidAmount",
				"InvalidAddress",
				"RecoveredAddress",
				"SecurityNotSet",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidTokenId"] },
						InvalidTokenId: {
							type: "object",
							title: "InvalidTokenId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InsufficientFunds"] },
						InsufficientFunds: {
							type: "object",
							title: "InsufficientFunds",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["UnVerifiedIdentity"] },
						UnVerifiedIdentity: {
							type: "object",
							title: "UnVerifiedIdentity",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InCompliantTransfer"] },
						InCompliantTransfer: {
							type: "object",
							title: "InCompliantTransfer",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CallContractError"] },
						CallContractError: {
							type: "object",
							title: "CallContractError",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["PausedToken"] },
						PausedToken: {
							type: "object",
							title: "PausedToken",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAmount"] },
						InvalidAmount: {
							type: "object",
							title: "InvalidAmount",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidAddress"] },
						InvalidAddress: {
							type: "object",
							title: "InvalidAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["RecoveredAddress"] },
						RecoveredAddress: {
							type: "object",
							title: "RecoveredAddress",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["SecurityNotSet"] },
						SecurityNotSet: {
							type: "object",
							title: "SecurityNotSet",
							properties: {},
						},
					},
				},
			],
		},
	},
};
export type UpdateOperatorErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "InvalidTokenId"; InvalidTokenId: never }
	| { tag: "InsufficientFunds"; InsufficientFunds: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "UnVerifiedIdentity"; UnVerifiedIdentity: never }
	| { tag: "InCompliantTransfer"; InCompliantTransfer: never }
	| { tag: "CallContractError"; CallContractError: never }
	| { tag: "PausedToken"; PausedToken: never }
	| { tag: "InvalidAmount"; InvalidAmount: never }
	| { tag: "InvalidAddress"; InvalidAddress: never }
	| { tag: "RecoveredAddress"; RecoveredAddress: never }
	| { tag: "SecurityNotSet"; SecurityNotSet: never };
export const init = (props: {
	onInitialize: (contract: ContractAddress.Type) => void;
	uiSchema?: UiSchema;
	uiWidgets?: RegistryWidgetsType;
}) =>
	GenericInit<types.initRequest, initRequestUi>({
		onContractInitialized: props.onInitialize,
		uiSchema: props.uiSchema,
		uiWidgets: props.uiWidgets,
		method: client.init,
		requestJsonSchema: initRequestJsonSchema,
		requestSchemaBase64: types.initRequestSchemaBase64,
	});
export const ENTRYPOINTS_UI: {
	[key: keyof typeof types.ENTRYPOINTS]: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) => React.JSX.Element;
} = {
	addAgent: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.AddAgentRequest,
			AddAgentRequestUi,
			types.AddAgentError,
			AddAgentErrorUi
		>({
			...props,
			method: client.addAgent,
			requestJsonSchema: addAgentRequestJsonSchema,
			requestSchemaBase64: types.addAgentRequestSchemaBase64,
			errorJsonSchema: addAgentErrorJsonSchema,
			errorSchemaBase64: types.addAgentErrorSchemaBase64,
		}),
	balanceOf: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericInvoke<
			types.BalanceOfRequest,
			BalanceOfRequestUi,
			types.BalanceOfResponse,
			BalanceOfResponseUi,
			types.BalanceOfError,
			BalanceOfErrorUi
		>({
			...props,
			method: client.balanceOf,
			requestJsonSchema: balanceOfRequestJsonSchema,
			requestSchemaBase64: types.balanceOfRequestSchemaBase64,
			responseJsonSchema: balanceOfResponseJsonSchema,
			responseSchemaBase64: types.balanceOfResponseSchemaBase64,
			errorJsonSchema: balanceOfErrorJsonSchema,
			errorSchemaBase64: types.balanceOfErrorSchemaBase64,
		}),
	balanceOfFrozen: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericInvoke<
			types.BalanceOfFrozenRequest,
			BalanceOfFrozenRequestUi,
			types.BalanceOfFrozenResponse,
			BalanceOfFrozenResponseUi,
			types.BalanceOfFrozenError,
			BalanceOfFrozenErrorUi
		>({
			...props,
			method: client.balanceOfFrozen,
			requestJsonSchema: balanceOfFrozenRequestJsonSchema,
			requestSchemaBase64: types.balanceOfFrozenRequestSchemaBase64,
			responseJsonSchema: balanceOfFrozenResponseJsonSchema,
			responseSchemaBase64: types.balanceOfFrozenResponseSchemaBase64,
			errorJsonSchema: balanceOfFrozenErrorJsonSchema,
			errorSchemaBase64: types.balanceOfFrozenErrorSchemaBase64,
		}),
	balanceOfUnFrozen: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericInvoke<
			types.BalanceOfUnFrozenRequest,
			BalanceOfUnFrozenRequestUi,
			types.BalanceOfUnFrozenResponse,
			BalanceOfUnFrozenResponseUi,
			types.BalanceOfUnFrozenError,
			BalanceOfUnFrozenErrorUi
		>({
			...props,
			method: client.balanceOfUnFrozen,
			requestJsonSchema: balanceOfUnFrozenRequestJsonSchema,
			requestSchemaBase64: types.balanceOfUnFrozenRequestSchemaBase64,
			responseJsonSchema: balanceOfUnFrozenResponseJsonSchema,
			responseSchemaBase64: types.balanceOfUnFrozenResponseSchemaBase64,
			errorJsonSchema: balanceOfUnFrozenErrorJsonSchema,
			errorSchemaBase64: types.balanceOfUnFrozenErrorSchemaBase64,
		}),
	burn: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.BurnRequest,
			BurnRequestUi,
			types.BurnError,
			BurnErrorUi
		>({
			...props,
			method: client.burn,
			requestJsonSchema: burnRequestJsonSchema,
			requestSchemaBase64: types.burnRequestSchemaBase64,
			errorJsonSchema: burnErrorJsonSchema,
			errorSchemaBase64: types.burnErrorSchemaBase64,
		}),
	compliance: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericInvoke<
			never,
			never,
			types.ComplianceResponse,
			ComplianceResponseUi,
			never,
			never
		>({
			...props,
			method: client.compliance,
			responseJsonSchema: complianceResponseJsonSchema,
			responseSchemaBase64: types.complianceResponseSchemaBase64,
		}),
	freeze: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.FreezeRequest,
			FreezeRequestUi,
			types.FreezeError,
			FreezeErrorUi
		>({
			...props,
			method: client.freeze,
			requestJsonSchema: freezeRequestJsonSchema,
			requestSchemaBase64: types.freezeRequestSchemaBase64,
			errorJsonSchema: freezeErrorJsonSchema,
			errorSchemaBase64: types.freezeErrorSchemaBase64,
		}),
	identityRegistry: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericInvoke<
			never,
			never,
			types.IdentityRegistryResponse,
			IdentityRegistryResponseUi,
			types.IdentityRegistryError,
			IdentityRegistryErrorUi
		>({
			...props,
			method: client.identityRegistry,
			responseJsonSchema: identityRegistryResponseJsonSchema,
			responseSchemaBase64: types.identityRegistryResponseSchemaBase64,
			errorJsonSchema: identityRegistryErrorJsonSchema,
			errorSchemaBase64: types.identityRegistryErrorSchemaBase64,
		}),
	isAgent: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericInvoke<
			types.IsAgentRequest,
			IsAgentRequestUi,
			types.IsAgentResponse,
			IsAgentResponseUi,
			types.IsAgentError,
			IsAgentErrorUi
		>({
			...props,
			method: client.isAgent,
			requestJsonSchema: isAgentRequestJsonSchema,
			requestSchemaBase64: types.isAgentRequestSchemaBase64,
			responseJsonSchema: isAgentResponseJsonSchema,
			responseSchemaBase64: types.isAgentResponseSchemaBase64,
			errorJsonSchema: isAgentErrorJsonSchema,
			errorSchemaBase64: types.isAgentErrorSchemaBase64,
		}),
	isPaused: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericInvoke<
			types.IsPausedRequest,
			IsPausedRequestUi,
			types.IsPausedResponse,
			IsPausedResponseUi,
			types.IsPausedError,
			IsPausedErrorUi
		>({
			...props,
			method: client.isPaused,
			requestJsonSchema: isPausedRequestJsonSchema,
			requestSchemaBase64: types.isPausedRequestSchemaBase64,
			responseJsonSchema: isPausedResponseJsonSchema,
			responseSchemaBase64: types.isPausedResponseSchemaBase64,
			errorJsonSchema: isPausedErrorJsonSchema,
			errorSchemaBase64: types.isPausedErrorSchemaBase64,
		}),
	mint: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.MintRequest,
			MintRequestUi,
			types.MintError,
			MintErrorUi
		>({
			...props,
			method: client.mint,
			requestJsonSchema: mintRequestJsonSchema,
			requestSchemaBase64: types.mintRequestSchemaBase64,
			errorJsonSchema: mintErrorJsonSchema,
			errorSchemaBase64: types.mintErrorSchemaBase64,
		}),
	operatorOf: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericInvoke<
			types.OperatorOfRequest,
			OperatorOfRequestUi,
			types.OperatorOfResponse,
			OperatorOfResponseUi,
			types.OperatorOfError,
			OperatorOfErrorUi
		>({
			...props,
			method: client.operatorOf,
			requestJsonSchema: operatorOfRequestJsonSchema,
			requestSchemaBase64: types.operatorOfRequestSchemaBase64,
			responseJsonSchema: operatorOfResponseJsonSchema,
			responseSchemaBase64: types.operatorOfResponseSchemaBase64,
			errorJsonSchema: operatorOfErrorJsonSchema,
			errorSchemaBase64: types.operatorOfErrorSchemaBase64,
		}),
	pause: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.PauseRequest,
			PauseRequestUi,
			types.PauseError,
			PauseErrorUi
		>({
			...props,
			method: client.pause,
			requestJsonSchema: pauseRequestJsonSchema,
			requestSchemaBase64: types.pauseRequestSchemaBase64,
			errorJsonSchema: pauseErrorJsonSchema,
			errorSchemaBase64: types.pauseErrorSchemaBase64,
		}),
	recover: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.RecoverRequest,
			RecoverRequestUi,
			types.RecoverError,
			RecoverErrorUi
		>({
			...props,
			method: client.recover,
			requestJsonSchema: recoverRequestJsonSchema,
			requestSchemaBase64: types.recoverRequestSchemaBase64,
			errorJsonSchema: recoverErrorJsonSchema,
			errorSchemaBase64: types.recoverErrorSchemaBase64,
		}),
	recoveryAddress: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericInvoke<
			types.RecoveryAddressRequest,
			RecoveryAddressRequestUi,
			types.RecoveryAddressResponse,
			RecoveryAddressResponseUi,
			types.RecoveryAddressError,
			RecoveryAddressErrorUi
		>({
			...props,
			method: client.recoveryAddress,
			requestJsonSchema: recoveryAddressRequestJsonSchema,
			requestSchemaBase64: types.recoveryAddressRequestSchemaBase64,
			responseJsonSchema: recoveryAddressResponseJsonSchema,
			responseSchemaBase64: types.recoveryAddressResponseSchemaBase64,
			errorJsonSchema: recoveryAddressErrorJsonSchema,
			errorSchemaBase64: types.recoveryAddressErrorSchemaBase64,
		}),
	removeAgent: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.RemoveAgentRequest,
			RemoveAgentRequestUi,
			types.RemoveAgentError,
			RemoveAgentErrorUi
		>({
			...props,
			method: client.removeAgent,
			requestJsonSchema: removeAgentRequestJsonSchema,
			requestSchemaBase64: types.removeAgentRequestSchemaBase64,
			errorJsonSchema: removeAgentErrorJsonSchema,
			errorSchemaBase64: types.removeAgentErrorSchemaBase64,
		}),
	setCompliance: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.SetComplianceRequest,
			SetComplianceRequestUi,
			types.SetComplianceError,
			SetComplianceErrorUi
		>({
			...props,
			method: client.setCompliance,
			requestJsonSchema: setComplianceRequestJsonSchema,
			requestSchemaBase64: types.setComplianceRequestSchemaBase64,
			errorJsonSchema: setComplianceErrorJsonSchema,
			errorSchemaBase64: types.setComplianceErrorSchemaBase64,
		}),
	setIdentityRegistry: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.SetIdentityRegistryRequest,
			SetIdentityRegistryRequestUi,
			types.SetIdentityRegistryError,
			SetIdentityRegistryErrorUi
		>({
			...props,
			method: client.setIdentityRegistry,
			requestJsonSchema: setIdentityRegistryRequestJsonSchema,
			requestSchemaBase64: types.setIdentityRegistryRequestSchemaBase64,
			errorJsonSchema: setIdentityRegistryErrorJsonSchema,
			errorSchemaBase64: types.setIdentityRegistryErrorSchemaBase64,
		}),
	setTokenMetadata: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.SetTokenMetadataRequest,
			SetTokenMetadataRequestUi,
			types.SetTokenMetadataError,
			SetTokenMetadataErrorUi
		>({
			...props,
			method: client.setTokenMetadata,
			requestJsonSchema: setTokenMetadataRequestJsonSchema,
			requestSchemaBase64: types.setTokenMetadataRequestSchemaBase64,
			errorJsonSchema: setTokenMetadataErrorJsonSchema,
			errorSchemaBase64: types.setTokenMetadataErrorSchemaBase64,
		}),
	supports: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericInvoke<
			types.SupportsRequest,
			SupportsRequestUi,
			types.SupportsResponse,
			SupportsResponseUi,
			types.SupportsError,
			SupportsErrorUi
		>({
			...props,
			method: client.supports,
			requestJsonSchema: supportsRequestJsonSchema,
			requestSchemaBase64: types.supportsRequestSchemaBase64,
			responseJsonSchema: supportsResponseJsonSchema,
			responseSchemaBase64: types.supportsResponseSchemaBase64,
			errorJsonSchema: supportsErrorJsonSchema,
			errorSchemaBase64: types.supportsErrorSchemaBase64,
		}),
	tokenMetadata: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericInvoke<
			types.TokenMetadataRequest,
			TokenMetadataRequestUi,
			types.TokenMetadataResponse,
			TokenMetadataResponseUi,
			types.TokenMetadataError,
			TokenMetadataErrorUi
		>({
			...props,
			method: client.tokenMetadata,
			requestJsonSchema: tokenMetadataRequestJsonSchema,
			requestSchemaBase64: types.tokenMetadataRequestSchemaBase64,
			responseJsonSchema: tokenMetadataResponseJsonSchema,
			responseSchemaBase64: types.tokenMetadataResponseSchemaBase64,
			errorJsonSchema: tokenMetadataErrorJsonSchema,
			errorSchemaBase64: types.tokenMetadataErrorSchemaBase64,
		}),
	transfer: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.TransferRequest,
			TransferRequestUi,
			types.TransferError,
			TransferErrorUi
		>({
			...props,
			method: client.transfer,
			requestJsonSchema: transferRequestJsonSchema,
			requestSchemaBase64: types.transferRequestSchemaBase64,
			errorJsonSchema: transferErrorJsonSchema,
			errorSchemaBase64: types.transferErrorSchemaBase64,
		}),
	unFreeze: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.UnFreezeRequest,
			UnFreezeRequestUi,
			types.UnFreezeError,
			UnFreezeErrorUi
		>({
			...props,
			method: client.unFreeze,
			requestJsonSchema: unFreezeRequestJsonSchema,
			requestSchemaBase64: types.unFreezeRequestSchemaBase64,
			errorJsonSchema: unFreezeErrorJsonSchema,
			errorSchemaBase64: types.unFreezeErrorSchemaBase64,
		}),
	unPause: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.UnPauseRequest,
			UnPauseRequestUi,
			types.UnPauseError,
			UnPauseErrorUi
		>({
			...props,
			method: client.unPause,
			requestJsonSchema: unPauseRequestJsonSchema,
			requestSchemaBase64: types.unPauseRequestSchemaBase64,
			errorJsonSchema: unPauseErrorJsonSchema,
			errorSchemaBase64: types.unPauseErrorSchemaBase64,
		}),
	updateOperator: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.UpdateOperatorRequest,
			UpdateOperatorRequestUi,
			types.UpdateOperatorError,
			UpdateOperatorErrorUi
		>({
			...props,
			method: client.updateOperator,
			requestJsonSchema: updateOperatorRequestJsonSchema,
			requestSchemaBase64: types.updateOperatorRequestSchemaBase64,
			errorJsonSchema: updateOperatorErrorJsonSchema,
			errorSchemaBase64: types.updateOperatorErrorSchemaBase64,
		}),
};
