// This file was generated by the build script. Do not edit it manually.
/* eslint-disable no-mixed-spaces-and-tabs */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* tslint:disable:no-unused-variable */
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
import {
	ContractEvent,
	ContractName,
	EntrypointName,
	ModuleReference,
} from "@concordium/web-sdk";
import { InitMethod, ReceiveMethod } from "../GenericContract";
export const CONTRACT_NAME = "security_sft_multi_yielder";
export type initRequest = {
	treasury:
		| { Account: [string] }
		| { Contract: [{ index: number; subindex: number }] };
	agents: Array<{
		address:
			| { Account: [string] }
			| { Contract: [{ index: number; subindex: number }] };
		roles: Array<
			| { AddYield: Record<string, never> }
			| { RemoveYield: Record<string, never> }
			| { Operator: Record<string, never> }
			| { UpdateTreasury: Record<string, never> }
		>;
	}>;
};
export const initRequestSchemaBase64 =
	"FAACAAAACAAAAHRyZWFzdXJ5FQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADAYAAABhZ2VudHMQAhQAAgAAAAcAAABhZGRyZXNzFQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADAUAAAByb2xlcxACFQQAAAAIAAAAQWRkWWllbGQCCwAAAFJlbW92ZVlpZWxkAggAAABPcGVyYXRvcgIOAAAAVXBkYXRlVHJlYXN1cnkC";
export const initErrorSchemaBase64 =
	"FQoAAAAMAAAAVW5BdXRob3JpemVkAgoAAABQYXJzZUVycm9yAggAAABMb2dFcnJvcgILAAAAQWdlbnRFeGlzdHMCDAAAAEludmFsaWRZaWVsZAIHAAAATm9ZaWVsZAIVAAAAWWllbGRDYWxjdWxhdGlvbkVycm9yAhEAAABZaWVsZERpc3RyaWJ1dGlvbgIJAAAAVG9rZW5CdXJuAgkAAABUb2tlbk1pbnQC";
export type AddAgentRequest = {
	address:
		| { Account: [string] }
		| { Contract: [{ index: number; subindex: number }] };
	roles: Array<
		| { AddYield: Record<string, never> }
		| { RemoveYield: Record<string, never> }
		| { Operator: Record<string, never> }
		| { UpdateTreasury: Record<string, never> }
	>;
};
export const addAgentRequestSchemaBase64 =
	"FAACAAAABwAAAGFkZHJlc3MVAgAAAAcAAABBY2NvdW50AQEAAAALCAAAAENvbnRyYWN0AQEAAAAMBQAAAHJvbGVzEAIVBAAAAAgAAABBZGRZaWVsZAILAAAAUmVtb3ZlWWllbGQCCAAAAE9wZXJhdG9yAg4AAABVcGRhdGVUcmVhc3VyeQI=";
export type RemoveAgentRequest =
	| { Account: [string] }
	| { Contract: [{ index: number; subindex: number }] };
export const removeAgentRequestSchemaBase64 =
	"FQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADA==";
export type RemoveYieldRequest = {
	token_contract: { index: number; subindex: number };
	token_id: string;
};
export const removeYieldRequestSchemaBase64 =
	"FAACAAAADgAAAHRva2VuX2NvbnRyYWN0DAgAAAB0b2tlbl9pZB0A";
export type SetTreasuryRequest =
	| { Account: [string] }
	| { Contract: [{ index: number; subindex: number }] };
export const setTreasuryRequestSchemaBase64 =
	"FQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADA==";
export type UpsertYieldRequest = {
	token_contract: { index: number; subindex: number };
	token_id: string;
	yields: Array<{
		contract: { index: number; subindex: number };
		token_id: string;
		calculation:
			| { Quantity: [{ numerator: bigint; denominator: bigint }] }
			| { SimpleInterest: [{ numerator: bigint; denominator: bigint }] };
	}>;
};
export const upsertYieldRequestSchemaBase64 =
	"FAADAAAADgAAAHRva2VuX2NvbnRyYWN0DAgAAAB0b2tlbl9pZB0ABgAAAHlpZWxkcxACFAADAAAACAAAAGNvbnRyYWN0DAgAAAB0b2tlbl9pZB0ACwAAAGNhbGN1bGF0aW9uFQIAAAAIAAAAUXVhbnRpdHkBAQAAABQAAgAAAAkAAABudW1lcmF0b3IFCwAAAGRlbm9taW5hdG9yBQ4AAABTaW1wbGVJbnRlcmVzdAEBAAAAFAACAAAACQAAAG51bWVyYXRvcgULAAAAZGVub21pbmF0b3IF";
export type YieldForRequest = {
	owner: string;
	yields: Array<{
		token_ver_from: string;
		token_ver_to: string;
		token_contract: { index: number; subindex: number };
		amount: string;
	}>;
};
export const yieldForRequestSchemaBase64 =
	"FAACAAAABQAAAG93bmVyCwYAAAB5aWVsZHMQAhQABAAAAA4AAAB0b2tlbl92ZXJfZnJvbR0ADAAAAHRva2VuX3Zlcl90bx0ADgAAAHRva2VuX2NvbnRyYWN0DAYAAABhbW91bnQbJQAAAA==";
export type event =
	| {
			AgentAdded: [
				{
					address:
						| { Account: [string] }
						| { Contract: [{ index: number; subindex: number }] };
					roles: Array<
						| { AddYield: Record<string, never> }
						| { RemoveYield: Record<string, never> }
						| { Operator: Record<string, never> }
						| { UpdateTreasury: Record<string, never> }
					>;
				},
			];
	  }
	| {
			AgentRemoved: [
				| { Account: [string] }
				| { Contract: [{ index: number; subindex: number }] },
			];
	  }
	| {
			YieldAdded: [
				{
					token_contract: { index: number; subindex: number };
					token_id: string;
					yields: Array<{
						contract: { index: number; subindex: number };
						token_id: string;
						calculation:
							| { Quantity: [{ numerator: bigint; denominator: bigint }] }
							| {
									SimpleInterest: [{ numerator: bigint; denominator: bigint }];
							  };
					}>;
				},
			];
	  }
	| {
			YieldRemoved: [
				{
					token_contract: { index: number; subindex: number };
					token_id: string;
				},
			];
	  }
	| {
			YieldDistributed: [
				{
					from_token: string;
					to_token: string;
					contract: { index: number; subindex: number };
					amount: string;
					to: string;
				},
			];
	  }
	| {
			TreasuryUpdated: [
				| { Account: [string] }
				| { Contract: [{ index: number; subindex: number }] },
			];
	  };
export const eventSchemaBase64 =
	"FQYAAAAKAAAAQWdlbnRBZGRlZAEBAAAAFAACAAAABwAAAGFkZHJlc3MVAgAAAAcAAABBY2NvdW50AQEAAAALCAAAAENvbnRyYWN0AQEAAAAMBQAAAHJvbGVzEAIVBAAAAAgAAABBZGRZaWVsZAILAAAAUmVtb3ZlWWllbGQCCAAAAE9wZXJhdG9yAg4AAABVcGRhdGVUcmVhc3VyeQIMAAAAQWdlbnRSZW1vdmVkAQEAAAAVAgAAAAcAAABBY2NvdW50AQEAAAALCAAAAENvbnRyYWN0AQEAAAAMCgAAAFlpZWxkQWRkZWQBAQAAABQAAwAAAA4AAAB0b2tlbl9jb250cmFjdAwIAAAAdG9rZW5faWQdAAYAAAB5aWVsZHMQAhQAAwAAAAgAAABjb250cmFjdAwIAAAAdG9rZW5faWQdAAsAAABjYWxjdWxhdGlvbhUCAAAACAAAAFF1YW50aXR5AQEAAAAUAAIAAAAJAAAAbnVtZXJhdG9yBQsAAABkZW5vbWluYXRvcgUOAAAAU2ltcGxlSW50ZXJlc3QBAQAAABQAAgAAAAkAAABudW1lcmF0b3IFCwAAAGRlbm9taW5hdG9yBQwAAABZaWVsZFJlbW92ZWQBAQAAABQAAgAAAA4AAAB0b2tlbl9jb250cmFjdAwIAAAAdG9rZW5faWQdABAAAABZaWVsZERpc3RyaWJ1dGVkAQEAAAAUAAUAAAAKAAAAZnJvbV90b2tlbh0ACAAAAHRvX3Rva2VuHQAIAAAAY29udHJhY3QMBgAAAGFtb3VudBslAAAAAgAAAHRvCw8AAABUcmVhc3VyeVVwZGF0ZWQBAQAAABUCAAAABwAAAEFjY291bnQBAQAAAAsIAAAAQ29udHJhY3QBAQAAAAw=";
export const ENTRYPOINTS: Record<string, EntrypointName.Type> = {
	addAgent: EntrypointName.fromString("addAgent"),
	removeAgent: EntrypointName.fromString("removeAgent"),
	removeYield: EntrypointName.fromString("removeYield"),
	setTreasury: EntrypointName.fromString("setTreasury"),
	upsertYield: EntrypointName.fromString("upsertYield"),
	yieldFor: EntrypointName.fromString("yieldFor"),
};
export const ENTRYPOINT_DISPLAY_NAMES: Record<string, string> = {
	addAgent: "Add Agent",
	removeAgent: "Remove Agent",
	removeYield: "Remove Yield",
	setTreasury: "Set Treasury",
	upsertYield: "Upsert Yield",
	yieldFor: "Yield For",
};
export const securitySftMultiYielder = {
	init: new InitMethod<initRequest>(
		ModuleReference.fromHexString(
			"5479d6aa5a7d9bc920bff2ef2d5430b6bad2d545f3bdbbfd409593152424a8bc",
		),
		ContractName.fromString("security_sft_multi_yielder"),
		initRequestSchemaBase64,
	),
	addAgent: new ReceiveMethod<AddAgentRequest>(
		ContractName.fromString("security_sft_multi_yielder"),
		EntrypointName.fromString("addAgent"),
		addAgentRequestSchemaBase64,
	),
	removeAgent: new ReceiveMethod<RemoveAgentRequest>(
		ContractName.fromString("security_sft_multi_yielder"),
		EntrypointName.fromString("removeAgent"),
		removeAgentRequestSchemaBase64,
	),
	removeYield: new ReceiveMethod<RemoveYieldRequest>(
		ContractName.fromString("security_sft_multi_yielder"),
		EntrypointName.fromString("removeYield"),
		removeYieldRequestSchemaBase64,
	),
	setTreasury: new ReceiveMethod<SetTreasuryRequest>(
		ContractName.fromString("security_sft_multi_yielder"),
		EntrypointName.fromString("setTreasury"),
		setTreasuryRequestSchemaBase64,
	),
	upsertYield: new ReceiveMethod<UpsertYieldRequest>(
		ContractName.fromString("security_sft_multi_yielder"),
		EntrypointName.fromString("upsertYield"),
		upsertYieldRequestSchemaBase64,
	),
	yieldFor: new ReceiveMethod<YieldForRequest>(
		ContractName.fromString("security_sft_multi_yielder"),
		EntrypointName.fromString("yieldFor"),
		yieldForRequestSchemaBase64,
	),
	deserializeEvent: (event: ContractEvent.Type): event => {
		return ContractEvent.parseWithSchemaTypeBase64(
			event,
			eventSchemaBase64,
		) as event;
	},
};
export default securitySftMultiYielder;
