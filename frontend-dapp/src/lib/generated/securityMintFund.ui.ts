// This file was generated by the build script. Do not edit it manually.
/* eslint-disable no-mixed-spaces-and-tabs */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* tslint:disable:no-unused-variable */
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
import { RJSFSchema, RegistryWidgetsType, UiSchema } from "@rjsf/utils";
import React from "react";
import { ContractAddress } from "@concordium/web-sdk";
import { default as client } from "./securityMintFund";
import * as types from "./securityMintFund";
import {
	GenericInit,
	GenericInvoke,
	GenericUpdate,
} from "../GenericContractUI";
export const initRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Init Request",
	properties: {
		currency_token: {
			type: "object",
			title: "Currency Token",
			properties: {
				contract: {
					type: "object",
					title: "Contract",
					properties: {
						index: { type: "integer", minimum: 0 },
						subindex: { type: "integer", minimum: 0 },
					},
				},
				id: { type: "string", title: "Id", default: "", format: "byte" },
			},
		},
		agents: {
			type: "array",
			items: {
				type: "object",
				title: "",
				properties: {
					address: {
						type: "object",
						title: "Address",
						properties: {
							tag: { type: "string", enum: ["Account", "Contract"] },
						},
						required: ["tag"],
						dependencies: {
							tag: {
								oneOf: [
									{
										properties: {
											tag: { enum: ["Account"] },
											Account: {
												type: "array",
												items: { type: "string", title: "" },
											},
										},
									},
									{
										properties: {
											tag: { enum: ["Contract"] },
											Contract: {
												type: "array",
												items: {
													type: "object",
													title: "",
													properties: {
														index: { type: "integer", minimum: 0 },
														subindex: { type: "integer", minimum: 0 },
													},
												},
											},
										},
									},
								],
							},
						},
					},
					roles: {
						type: "array",
						items: {
							type: "object",
							title: "",
							properties: {
								tag: {
									type: "string",
									enum: [
										"AddFund",
										"RemoveFund",
										"UpdateFundState",
										"Operator",
									],
								},
							},
							required: ["tag"],
							dependencies: {
								tag: {
									oneOf: [
										{
											properties: {
												tag: { enum: ["AddFund"] },
												AddFund: {
													type: "object",
													title: "AddFund",
													properties: {},
												},
											},
										},
										{
											properties: {
												tag: { enum: ["RemoveFund"] },
												RemoveFund: {
													type: "object",
													title: "RemoveFund",
													properties: {},
												},
											},
										},
										{
											properties: {
												tag: { enum: ["UpdateFundState"] },
												UpdateFundState: {
													type: "object",
													title: "UpdateFundState",
													properties: {},
												},
											},
										},
										{
											properties: {
												tag: { enum: ["Operator"] },
												Operator: {
													type: "object",
													title: "Operator",
													properties: {},
												},
											},
										},
									],
								},
							},
						},
						title: "Roles",
					},
				},
			},
			title: "Agents",
		},
	},
};
export type initRequestUi = {
	currency_token: { contract: { index: number; subindex: number }; id: string };
	agents: {
		address:
			| { tag: "Account"; Account: [string] }
			| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
		roles:
			| { tag: "AddFund"; AddFund: never }
			| { tag: "RemoveFund"; RemoveFund: never }
			| { tag: "UpdateFundState"; UpdateFundState: never }
			| { tag: "Operator"; Operator: never }[];
	}[];
};
export const initErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Init Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"UnAuthorized",
				"ParseError",
				"LogError",
				"CurrencyTokenTransfer",
				"InvalidConversion",
				"InvalidFundState",
				"TokenMint",
				"TokenBurn",
				"TokenBalance",
				"TokenUnFreeze",
				"InvalidFundId",
				"InvalidInvestor",
				"NonExistentToken",
				"AgentExists",
				"FundExists",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["UnAuthorized"] },
						UnAuthorized: {
							type: "object",
							title: "UnAuthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["CurrencyTokenTransfer"] },
						CurrencyTokenTransfer: {
							type: "object",
							title: "CurrencyTokenTransfer",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidConversion"] },
						InvalidConversion: {
							type: "object",
							title: "InvalidConversion",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidFundState"] },
						InvalidFundState: {
							type: "object",
							title: "InvalidFundState",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["TokenMint"] },
						TokenMint: { type: "object", title: "TokenMint", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["TokenBurn"] },
						TokenBurn: { type: "object", title: "TokenBurn", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["TokenBalance"] },
						TokenBalance: {
							type: "object",
							title: "TokenBalance",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["TokenUnFreeze"] },
						TokenUnFreeze: {
							type: "object",
							title: "TokenUnFreeze",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidFundId"] },
						InvalidFundId: {
							type: "object",
							title: "InvalidFundId",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidInvestor"] },
						InvalidInvestor: {
							type: "object",
							title: "InvalidInvestor",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["NonExistentToken"] },
						NonExistentToken: {
							type: "object",
							title: "NonExistentToken",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["AgentExists"] },
						AgentExists: {
							type: "object",
							title: "AgentExists",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["FundExists"] },
						FundExists: { type: "object", title: "FundExists", properties: {} },
					},
				},
			],
		},
	},
};
export type initErrorUi =
	| { tag: "UnAuthorized"; UnAuthorized: never }
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "CurrencyTokenTransfer"; CurrencyTokenTransfer: never }
	| { tag: "InvalidConversion"; InvalidConversion: never }
	| { tag: "InvalidFundState"; InvalidFundState: never }
	| { tag: "TokenMint"; TokenMint: never }
	| { tag: "TokenBurn"; TokenBurn: never }
	| { tag: "TokenBalance"; TokenBalance: never }
	| { tag: "TokenUnFreeze"; TokenUnFreeze: never }
	| { tag: "InvalidFundId"; InvalidFundId: never }
	| { tag: "InvalidInvestor"; InvalidInvestor: never }
	| { tag: "NonExistentToken"; NonExistentToken: never }
	| { tag: "AgentExists"; AgentExists: never }
	| { tag: "FundExists"; FundExists: never };
export const addAgentRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Add Agent Request",
	properties: {
		address: {
			type: "object",
			title: "Address",
			properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
			required: ["tag"],
			dependencies: {
				tag: {
					oneOf: [
						{
							properties: {
								tag: { enum: ["Account"] },
								Account: {
									type: "array",
									items: { type: "string", title: "" },
								},
							},
						},
						{
							properties: {
								tag: { enum: ["Contract"] },
								Contract: {
									type: "array",
									items: {
										type: "object",
										title: "",
										properties: {
											index: { type: "integer", minimum: 0 },
											subindex: { type: "integer", minimum: 0 },
										},
									},
								},
							},
						},
					],
				},
			},
		},
		roles: {
			type: "array",
			items: {
				type: "object",
				title: "",
				properties: {
					tag: {
						type: "string",
						enum: ["AddFund", "RemoveFund", "UpdateFundState", "Operator"],
					},
				},
				required: ["tag"],
				dependencies: {
					tag: {
						oneOf: [
							{
								properties: {
									tag: { enum: ["AddFund"] },
									AddFund: { type: "object", title: "AddFund", properties: {} },
								},
							},
							{
								properties: {
									tag: { enum: ["RemoveFund"] },
									RemoveFund: {
										type: "object",
										title: "RemoveFund",
										properties: {},
									},
								},
							},
							{
								properties: {
									tag: { enum: ["UpdateFundState"] },
									UpdateFundState: {
										type: "object",
										title: "UpdateFundState",
										properties: {},
									},
								},
							},
							{
								properties: {
									tag: { enum: ["Operator"] },
									Operator: {
										type: "object",
										title: "Operator",
										properties: {},
									},
								},
							},
						],
					},
				},
			},
			title: "Roles",
		},
	},
};
export type AddAgentRequestUi = {
	address:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
	roles:
		| { tag: "AddFund"; AddFund: never }
		| { tag: "RemoveFund"; RemoveFund: never }
		| { tag: "UpdateFundState"; UpdateFundState: never }
		| { tag: "Operator"; Operator: never }[];
};
export const addFundRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Add Fund Request",
	properties: {
		token: {
			type: "object",
			title: "Token",
			properties: {
				contract: {
					type: "object",
					title: "Contract",
					properties: {
						index: { type: "integer", minimum: 0 },
						subindex: { type: "integer", minimum: 0 },
					},
				},
				id: { type: "string", title: "Id", default: "", format: "byte" },
			},
		},
		rate: {
			type: "object",
			title: "Rate",
			properties: {
				numerator: { type: "integer", minimum: 0, title: "Numerator" },
				denominator: { type: "integer", minimum: 0, title: "Denominator" },
			},
		},
		security_token: {
			type: "object",
			title: "Security Token",
			properties: {
				contract: {
					type: "object",
					title: "Contract",
					properties: {
						index: { type: "integer", minimum: 0 },
						subindex: { type: "integer", minimum: 0 },
					},
				},
				id: { type: "string", title: "Id", default: "", format: "byte" },
			},
		},
	},
};
export type AddFundRequestUi = {
	token: { contract: { index: number; subindex: number }; id: string };
	rate: { numerator: number; denominator: number };
	security_token: { contract: { index: number; subindex: number }; id: string };
};
export const claimInvestmentRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Claim Investment Request",
	properties: {
		investments: {
			type: "array",
			items: {
				type: "object",
				title: "",
				properties: {
					security_token: {
						type: "object",
						title: "Security Token",
						properties: {
							contract: {
								type: "object",
								title: "Contract",
								properties: {
									index: { type: "integer", minimum: 0 },
									subindex: { type: "integer", minimum: 0 },
								},
							},
							id: { type: "string", title: "Id", default: "", format: "byte" },
						},
					},
					investor: { type: "string", title: "Investor" },
				},
			},
			title: "Investments",
		},
	},
};
export type ClaimInvestmentRequestUi = {
	investments: {
		security_token: {
			contract: { index: number; subindex: number };
			id: string;
		};
		investor: string;
	}[];
};
export const investRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Invest Request",
	properties: {
		token_id: {
			type: "string",
			title: "Token Id",
			default: "",
			format: "byte",
		},
		amount: { type: "string", title: "Amount" },
		from: {
			type: "object",
			title: "From",
			properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
			required: ["tag"],
			dependencies: {
				tag: {
					oneOf: [
						{
							properties: {
								tag: { enum: ["Account"] },
								Account: {
									type: "array",
									items: { type: "string", title: "" },
								},
							},
						},
						{
							properties: {
								tag: { enum: ["Contract"] },
								Contract: {
									type: "array",
									items: {
										type: "object",
										title: "",
										properties: {
											index: { type: "integer", minimum: 0 },
											subindex: { type: "integer", minimum: 0 },
										},
									},
								},
							},
						},
					],
				},
			},
		},
		data: {
			type: "object",
			title: "Data",
			properties: {
				contract: {
					type: "object",
					title: "Contract",
					properties: {
						index: { type: "integer", minimum: 0 },
						subindex: { type: "integer", minimum: 0 },
					},
				},
				id: { type: "string", title: "Id", default: "", format: "byte" },
			},
		},
	},
};
export type InvestRequestUi = {
	token_id: string;
	amount: string;
	from:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
	data: { contract: { index: number; subindex: number }; id: string };
};
export const removeAgentRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Remove Agent Request",
	properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["Account"] },
						Account: { type: "array", items: { type: "string", title: "" } },
					},
				},
				{
					properties: {
						tag: { enum: ["Contract"] },
						Contract: {
							type: "array",
							items: {
								type: "object",
								title: "",
								properties: {
									index: { type: "integer", minimum: 0 },
									subindex: { type: "integer", minimum: 0 },
								},
							},
						},
					},
				},
			],
		},
	},
};
export type RemoveAgentRequestUi =
	| { tag: "Account"; Account: [string] }
	| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
export const removeFundRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Remove Fund Request",
	properties: {
		contract: {
			type: "object",
			title: "Contract",
			properties: {
				index: { type: "integer", minimum: 0 },
				subindex: { type: "integer", minimum: 0 },
			},
		},
		id: { type: "string", title: "Id", default: "", format: "byte" },
	},
};
export type RemoveFundRequestUi = {
	contract: { index: number; subindex: number };
	id: string;
};
export const transferInvestRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Transfer Invest Request",
	properties: {
		amount: { type: "string", title: "Amount" },
		security_token: {
			type: "object",
			title: "Security Token",
			properties: {
				contract: {
					type: "object",
					title: "Contract",
					properties: {
						index: { type: "integer", minimum: 0 },
						subindex: { type: "integer", minimum: 0 },
					},
				},
				id: { type: "string", title: "Id", default: "", format: "byte" },
			},
		},
	},
};
export type TransferInvestRequestUi = {
	amount: string;
	security_token: { contract: { index: number; subindex: number }; id: string };
};
export const updateFundStateRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Update Fund State Request",
	properties: {
		security_token: {
			type: "object",
			title: "Security Token",
			properties: {
				contract: {
					type: "object",
					title: "Contract",
					properties: {
						index: { type: "integer", minimum: 0 },
						subindex: { type: "integer", minimum: 0 },
					},
				},
				id: { type: "string", title: "Id", default: "", format: "byte" },
			},
		},
		state: {
			type: "object",
			title: "State",
			properties: { tag: { type: "string", enum: ["Success", "Fail"] } },
			required: ["tag"],
			dependencies: {
				tag: {
					oneOf: [
						{
							properties: {
								tag: { enum: ["Success"] },
								Success: {
									type: "array",
									items: {
										type: "object",
										title: "",
										properties: {
											tag: { type: "string", enum: ["Account", "Contract"] },
										},
										required: ["tag"],
										dependencies: {
											tag: {
												oneOf: [
													{
														properties: {
															tag: { enum: ["Account"] },
															Account: {
																type: "array",
																items: { type: "string", title: "" },
															},
														},
													},
													{
														properties: {
															tag: { enum: ["Contract"] },
															Contract: {
																type: "array",
																items: [
																	{
																		type: "object",
																		title: "",
																		properties: {
																			index: { type: "integer", minimum: 0 },
																			subindex: { type: "integer", minimum: 0 },
																		},
																	},
																	{ type: "string", title: "", default: "" },
																],
															},
														},
													},
												],
											},
										},
									},
								},
							},
						},
						{
							properties: {
								tag: { enum: ["Fail"] },
								Fail: { type: "object", title: "Fail", properties: {} },
							},
						},
					],
				},
			},
		},
	},
};
export type UpdateFundStateRequestUi = {
	security_token: { contract: { index: number; subindex: number }; id: string };
	state:
		| {
				tag: "Success";
				Success: [
					| { tag: "Account"; Account: [string] }
					| {
							tag: "Contract";
							Contract: [{ index: number; subindex: number }, string];
					  },
				];
		  }
		| { tag: "Fail"; Fail: never };
};
export const init = (props: {
	onInitialize: (contract: ContractAddress.Type) => void;
	uiSchema?: UiSchema;
	uiWidgets?: RegistryWidgetsType;
}) =>
	GenericInit<types.initRequest, initRequestUi>({
		onContractInitialized: props.onInitialize,
		uiSchema: props.uiSchema,
		uiWidgets: props.uiWidgets,
		method: client.init,
		requestJsonSchema: initRequestJsonSchema,
		requestSchemaBase64: types.initRequestSchemaBase64,
	});
export const ENTRYPOINTS_UI: {
	[key: keyof typeof types.ENTRYPOINTS]: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) => React.JSX.Element;
} = {
	addAgent: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<types.AddAgentRequest, AddAgentRequestUi, never, never>({
			...props,
			method: client.addAgent,
			requestJsonSchema: addAgentRequestJsonSchema,
			requestSchemaBase64: types.addAgentRequestSchemaBase64,
		}),
	addFund: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<types.AddFundRequest, AddFundRequestUi, never, never>({
			...props,
			method: client.addFund,
			requestJsonSchema: addFundRequestJsonSchema,
			requestSchemaBase64: types.addFundRequestSchemaBase64,
		}),
	claimInvestment: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.ClaimInvestmentRequest,
			ClaimInvestmentRequestUi,
			never,
			never
		>({
			...props,
			method: client.claimInvestment,
			requestJsonSchema: claimInvestmentRequestJsonSchema,
			requestSchemaBase64: types.claimInvestmentRequestSchemaBase64,
		}),
	invest: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<types.InvestRequest, InvestRequestUi, never, never>({
			...props,
			method: client.invest,
			requestJsonSchema: investRequestJsonSchema,
			requestSchemaBase64: types.investRequestSchemaBase64,
		}),
	removeAgent: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<types.RemoveAgentRequest, RemoveAgentRequestUi, never, never>(
			{
				...props,
				method: client.removeAgent,
				requestJsonSchema: removeAgentRequestJsonSchema,
				requestSchemaBase64: types.removeAgentRequestSchemaBase64,
			},
		),
	removeFund: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<types.RemoveFundRequest, RemoveFundRequestUi, never, never>({
			...props,
			method: client.removeFund,
			requestJsonSchema: removeFundRequestJsonSchema,
			requestSchemaBase64: types.removeFundRequestSchemaBase64,
		}),
	transferInvest: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.TransferInvestRequest,
			TransferInvestRequestUi,
			never,
			never
		>({
			...props,
			method: client.transferInvest,
			requestJsonSchema: transferInvestRequestJsonSchema,
			requestSchemaBase64: types.transferInvestRequestSchemaBase64,
		}),
	updateFundState: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.UpdateFundStateRequest,
			UpdateFundStateRequestUi,
			never,
			never
		>({
			...props,
			method: client.updateFundState,
			requestJsonSchema: updateFundStateRequestJsonSchema,
			requestSchemaBase64: types.updateFundStateRequestSchemaBase64,
		}),
};
