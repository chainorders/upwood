// This file was generated by the build script. Do not edit it manually.
/* eslint-disable no-mixed-spaces-and-tabs */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* tslint:disable:no-unused-variable */
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
import { RJSFSchema, RegistryWidgetsType, UiSchema } from "@rjsf/utils";
import React from "react";
import { ContractAddress } from "@concordium/web-sdk";
import { default as client } from "./securityP2PTrading";
import * as types from "./securityP2PTrading";
import {
	GenericInit,
	GenericInvoke,
	GenericUpdate,
} from "../GenericContractUI";
export const initRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Init Request",
	properties: {
		currency: {
			type: "object",
			title: "Currency",
			properties: {
				contract: {
					type: "object",
					title: "Contract",
					properties: {
						index: { type: "integer", minimum: 0 },
						subindex: { type: "integer", minimum: 0 },
					},
				},
				id: { type: "string", title: "Id", default: "", format: "byte" },
			},
		},
		agents: {
			type: "array",
			items: {
				type: "object",
				title: "",
				properties: {
					address: {
						type: "object",
						title: "Address",
						properties: {
							tag: { type: "string", enum: ["Account", "Contract"] },
						},
						required: ["tag"],
						dependencies: {
							tag: {
								oneOf: [
									{
										properties: {
											tag: { enum: ["Account"] },
											Account: {
												type: "array",
												items: { type: "string", title: "" },
											},
										},
									},
									{
										properties: {
											tag: { enum: ["Contract"] },
											Contract: {
												type: "array",
												items: {
													type: "object",
													title: "",
													properties: {
														index: { type: "integer", minimum: 0 },
														subindex: { type: "integer", minimum: 0 },
													},
												},
											},
										},
									},
								],
							},
						},
					},
					roles: {
						type: "array",
						items: {
							type: "object",
							title: "",
							properties: {
								tag: {
									type: "string",
									enum: ["AddMarket", "RemoveMarket", "Operator"],
								},
							},
							required: ["tag"],
							dependencies: {
								tag: {
									oneOf: [
										{
											properties: {
												tag: { enum: ["AddMarket"] },
												AddMarket: {
													type: "object",
													title: "AddMarket",
													properties: {},
												},
											},
										},
										{
											properties: {
												tag: { enum: ["RemoveMarket"] },
												RemoveMarket: {
													type: "object",
													title: "RemoveMarket",
													properties: {},
												},
											},
										},
										{
											properties: {
												tag: { enum: ["Operator"] },
												Operator: {
													type: "object",
													title: "Operator",
													properties: {},
												},
											},
										},
									],
								},
							},
						},
						title: "Roles",
					},
				},
			},
			title: "Agents",
		},
	},
};
export type initRequestUi = {
	currency: { contract: { index: number; subindex: number }; id: string };
	agents: {
		address:
			| { tag: "Account"; Account: [string] }
			| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
		roles:
			| { tag: "AddMarket"; AddMarket: never }
			| { tag: "RemoveMarket"; RemoveMarket: never }
			| { tag: "Operator"; Operator: never }[];
	}[];
};
export const initErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Init Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"Unauthorized",
				"InvalidConversion",
				"LogError",
				"AgentExists",
				"InvalidMarket",
				"TokenTransfer",
				"CurrencyTransfer",
				"InvalidRate",
				"MintMarketNotStarted",
				"AddToken",
				"TokenMint",
				"InvalidMarketType",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidConversion"] },
						InvalidConversion: {
							type: "object",
							title: "InvalidConversion",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["AgentExists"] },
						AgentExists: {
							type: "object",
							title: "AgentExists",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidMarket"] },
						InvalidMarket: {
							type: "object",
							title: "InvalidMarket",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["TokenTransfer"] },
						TokenTransfer: {
							type: "object",
							title: "TokenTransfer",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CurrencyTransfer"] },
						CurrencyTransfer: {
							type: "object",
							title: "CurrencyTransfer",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidRate"] },
						InvalidRate: {
							type: "object",
							title: "InvalidRate",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["MintMarketNotStarted"] },
						MintMarketNotStarted: {
							type: "object",
							title: "MintMarketNotStarted",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["AddToken"] },
						AddToken: { type: "object", title: "AddToken", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["TokenMint"] },
						TokenMint: { type: "object", title: "TokenMint", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidMarketType"] },
						InvalidMarketType: {
							type: "object",
							title: "InvalidMarketType",
							properties: {},
						},
					},
				},
			],
		},
	},
};
export type initErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "InvalidConversion"; InvalidConversion: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "AgentExists"; AgentExists: never }
	| { tag: "InvalidMarket"; InvalidMarket: never }
	| { tag: "TokenTransfer"; TokenTransfer: never }
	| { tag: "CurrencyTransfer"; CurrencyTransfer: never }
	| { tag: "InvalidRate"; InvalidRate: never }
	| { tag: "MintMarketNotStarted"; MintMarketNotStarted: never }
	| { tag: "AddToken"; AddToken: never }
	| { tag: "TokenMint"; TokenMint: never }
	| { tag: "InvalidMarketType"; InvalidMarketType: never };
export const addAgentRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Add Agent Request",
	properties: {
		address: {
			type: "object",
			title: "Address",
			properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
			required: ["tag"],
			dependencies: {
				tag: {
					oneOf: [
						{
							properties: {
								tag: { enum: ["Account"] },
								Account: {
									type: "array",
									items: { type: "string", title: "" },
								},
							},
						},
						{
							properties: {
								tag: { enum: ["Contract"] },
								Contract: {
									type: "array",
									items: {
										type: "object",
										title: "",
										properties: {
											index: { type: "integer", minimum: 0 },
											subindex: { type: "integer", minimum: 0 },
										},
									},
								},
							},
						},
					],
				},
			},
		},
		roles: {
			type: "array",
			items: {
				type: "object",
				title: "",
				properties: {
					tag: {
						type: "string",
						enum: ["AddMarket", "RemoveMarket", "Operator"],
					},
				},
				required: ["tag"],
				dependencies: {
					tag: {
						oneOf: [
							{
								properties: {
									tag: { enum: ["AddMarket"] },
									AddMarket: {
										type: "object",
										title: "AddMarket",
										properties: {},
									},
								},
							},
							{
								properties: {
									tag: { enum: ["RemoveMarket"] },
									RemoveMarket: {
										type: "object",
										title: "RemoveMarket",
										properties: {},
									},
								},
							},
							{
								properties: {
									tag: { enum: ["Operator"] },
									Operator: {
										type: "object",
										title: "Operator",
										properties: {},
									},
								},
							},
						],
					},
				},
			},
			title: "Roles",
		},
	},
};
export type AddAgentRequestUi = {
	address:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
	roles:
		| { tag: "AddMarket"; AddMarket: never }
		| { tag: "RemoveMarket"; RemoveMarket: never }
		| { tag: "Operator"; Operator: never }[];
};
export const addMarketRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Add Market Request",
	properties: {
		token_contract: {
			type: "object",
			title: "Token Contract",
			properties: {
				index: { type: "integer", minimum: 0 },
				subindex: { type: "integer", minimum: 0 },
			},
		},
		market: {
			type: "object",
			title: "Market",
			properties: { tag: { type: "string", enum: ["Mint", "Transfer"] } },
			required: ["tag"],
			dependencies: {
				tag: {
					oneOf: [
						{
							properties: {
								tag: { enum: ["Mint"] },
								Mint: {
									type: "array",
									items: {
										type: "object",
										title: "",
										properties: {
											token_id: {
												type: "object",
												title: "Token Id",
												properties: {
													start: {
														type: "string",
														format: "date-time",
														title: "Start",
													},
													diff_millis: {
														type: "integer",
														minimum: 0,
														title: "Diff Millis",
													},
												},
											},
											rate: {
												type: "object",
												title: "Rate",
												properties: {
													numerator: {
														type: "integer",
														minimum: 0,
														title: "Numerator",
													},
													denominator: {
														type: "integer",
														minimum: 0,
														title: "Denominator",
													},
												},
											},
											token_metadata_url: {
												type: "object",
												title: "Token Metadata Url",
												properties: {
													url: { type: "string", title: "Url", default: "" },
													hash: {
														type: "object",
														title: "Hash",
														properties: {
															tag: { type: "string", enum: ["None", "Some"] },
														},
														required: ["tag"],
														dependencies: {
															tag: {
																oneOf: [
																	{
																		properties: {
																			tag: { enum: ["None"] },
																			None: {
																				type: "object",
																				title: "None",
																				properties: {},
																			},
																		},
																	},
																	{
																		properties: {
																			tag: { enum: ["Some"] },
																			Some: {
																				type: "array",
																				items: {
																					type: "string",
																					title: "",
																					default: "",
																				},
																			},
																		},
																	},
																],
															},
														},
													},
												},
											},
											liquidity_provider: {
												type: "string",
												title: "Liquidity Provider",
											},
										},
									},
								},
							},
						},
						{
							properties: {
								tag: { enum: ["Transfer"] },
								Transfer: {
									type: "array",
									items: {
										type: "object",
										title: "",
										properties: {
											token_id: {
												type: "string",
												title: "Token Id",
												default: "",
												format: "byte",
											},
											liquidity_provider: {
												type: "string",
												title: "Liquidity Provider",
											},
											buy_rate: {
												type: "object",
												title: "Buy Rate",
												properties: {
													numerator: {
														type: "integer",
														minimum: 0,
														title: "Numerator",
													},
													denominator: {
														type: "integer",
														minimum: 0,
														title: "Denominator",
													},
												},
											},
											sell_rate: {
												type: "object",
												title: "Sell Rate",
												properties: {
													numerator: {
														type: "integer",
														minimum: 0,
														title: "Numerator",
													},
													denominator: {
														type: "integer",
														minimum: 0,
														title: "Denominator",
													},
												},
											},
										},
									},
								},
							},
						},
					],
				},
			},
		},
	},
};
export type AddMarketRequestUi = {
	token_contract: { index: number; subindex: number };
	market:
		| {
				tag: "Mint";
				Mint: [
					{
						token_id: { start: string; diff_millis: number };
						rate: { numerator: number; denominator: number };
						token_metadata_url: {
							url: string;
							hash:
								| { tag: "None"; None: never }
								| { tag: "Some"; Some: [string] };
						};
						liquidity_provider: string;
					},
				];
		  }
		| {
				tag: "Transfer";
				Transfer: [
					{
						token_id: string;
						liquidity_provider: string;
						buy_rate: { numerator: number; denominator: number };
						sell_rate: { numerator: number; denominator: number };
					},
				];
		  };
};
export const buyRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Buy Request",
	properties: {
		contract: {
			type: "object",
			title: "Contract",
			properties: {
				index: { type: "integer", minimum: 0 },
				subindex: { type: "integer", minimum: 0 },
			},
		},
		amount: { type: "string", title: "Amount" },
		rate: {
			type: "object",
			title: "Rate",
			properties: {
				numerator: { type: "integer", minimum: 0, title: "Numerator" },
				denominator: { type: "integer", minimum: 0, title: "Denominator" },
			},
		},
	},
};
export type BuyRequestUi = {
	contract: { index: number; subindex: number };
	amount: string;
	rate: { numerator: number; denominator: number };
};
export const buyErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Buy Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"Unauthorized",
				"InvalidConversion",
				"LogError",
				"AgentExists",
				"InvalidMarket",
				"TokenTransfer",
				"CurrencyTransfer",
				"InvalidRate",
				"MintMarketNotStarted",
				"AddToken",
				"TokenMint",
				"InvalidMarketType",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidConversion"] },
						InvalidConversion: {
							type: "object",
							title: "InvalidConversion",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["AgentExists"] },
						AgentExists: {
							type: "object",
							title: "AgentExists",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidMarket"] },
						InvalidMarket: {
							type: "object",
							title: "InvalidMarket",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["TokenTransfer"] },
						TokenTransfer: {
							type: "object",
							title: "TokenTransfer",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CurrencyTransfer"] },
						CurrencyTransfer: {
							type: "object",
							title: "CurrencyTransfer",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidRate"] },
						InvalidRate: {
							type: "object",
							title: "InvalidRate",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["MintMarketNotStarted"] },
						MintMarketNotStarted: {
							type: "object",
							title: "MintMarketNotStarted",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["AddToken"] },
						AddToken: { type: "object", title: "AddToken", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["TokenMint"] },
						TokenMint: { type: "object", title: "TokenMint", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidMarketType"] },
						InvalidMarketType: {
							type: "object",
							title: "InvalidMarketType",
							properties: {},
						},
					},
				},
			],
		},
	},
};
export type BuyErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "InvalidConversion"; InvalidConversion: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "AgentExists"; AgentExists: never }
	| { tag: "InvalidMarket"; InvalidMarket: never }
	| { tag: "TokenTransfer"; TokenTransfer: never }
	| { tag: "CurrencyTransfer"; CurrencyTransfer: never }
	| { tag: "InvalidRate"; InvalidRate: never }
	| { tag: "MintMarketNotStarted"; MintMarketNotStarted: never }
	| { tag: "AddToken"; AddToken: never }
	| { tag: "TokenMint"; TokenMint: never }
	| { tag: "InvalidMarketType"; InvalidMarketType: never };
export const getMarketRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Get Market Request",
	properties: {
		index: { type: "integer", minimum: 0 },
		subindex: { type: "integer", minimum: 0 },
	},
};
export type GetMarketRequestUi = { index: number; subindex: number };
export const mintRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Mint Request",
	properties: {
		token_contract: {
			type: "object",
			title: "Token Contract",
			properties: {
				index: { type: "integer", minimum: 0 },
				subindex: { type: "integer", minimum: 0 },
			},
		},
		amount: { type: "string", title: "Amount" },
		rate: {
			type: "object",
			title: "Rate",
			properties: {
				numerator: { type: "integer", minimum: 0, title: "Numerator" },
				denominator: { type: "integer", minimum: 0, title: "Denominator" },
			},
		},
	},
};
export type MintRequestUi = {
	token_contract: { index: number; subindex: number };
	amount: string;
	rate: { numerator: number; denominator: number };
};
export const mintErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Mint Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"Unauthorized",
				"InvalidConversion",
				"LogError",
				"AgentExists",
				"InvalidMarket",
				"TokenTransfer",
				"CurrencyTransfer",
				"InvalidRate",
				"MintMarketNotStarted",
				"AddToken",
				"TokenMint",
				"InvalidMarketType",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidConversion"] },
						InvalidConversion: {
							type: "object",
							title: "InvalidConversion",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["AgentExists"] },
						AgentExists: {
							type: "object",
							title: "AgentExists",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidMarket"] },
						InvalidMarket: {
							type: "object",
							title: "InvalidMarket",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["TokenTransfer"] },
						TokenTransfer: {
							type: "object",
							title: "TokenTransfer",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CurrencyTransfer"] },
						CurrencyTransfer: {
							type: "object",
							title: "CurrencyTransfer",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidRate"] },
						InvalidRate: {
							type: "object",
							title: "InvalidRate",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["MintMarketNotStarted"] },
						MintMarketNotStarted: {
							type: "object",
							title: "MintMarketNotStarted",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["AddToken"] },
						AddToken: { type: "object", title: "AddToken", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["TokenMint"] },
						TokenMint: { type: "object", title: "TokenMint", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidMarketType"] },
						InvalidMarketType: {
							type: "object",
							title: "InvalidMarketType",
							properties: {},
						},
					},
				},
			],
		},
	},
};
export type MintErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "InvalidConversion"; InvalidConversion: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "AgentExists"; AgentExists: never }
	| { tag: "InvalidMarket"; InvalidMarket: never }
	| { tag: "TokenTransfer"; TokenTransfer: never }
	| { tag: "CurrencyTransfer"; CurrencyTransfer: never }
	| { tag: "InvalidRate"; InvalidRate: never }
	| { tag: "MintMarketNotStarted"; MintMarketNotStarted: never }
	| { tag: "AddToken"; AddToken: never }
	| { tag: "TokenMint"; TokenMint: never }
	| { tag: "InvalidMarketType"; InvalidMarketType: never };
export const removeAgentRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Remove Agent Request",
	properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["Account"] },
						Account: { type: "array", items: { type: "string", title: "" } },
					},
				},
				{
					properties: {
						tag: { enum: ["Contract"] },
						Contract: {
							type: "array",
							items: {
								type: "object",
								title: "",
								properties: {
									index: { type: "integer", minimum: 0 },
									subindex: { type: "integer", minimum: 0 },
								},
							},
						},
					},
				},
			],
		},
	},
};
export type RemoveAgentRequestUi =
	| { tag: "Account"; Account: [string] }
	| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
export const removeMarketRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Remove Market Request",
	properties: {
		index: { type: "integer", minimum: 0 },
		subindex: { type: "integer", minimum: 0 },
	},
};
export type RemoveMarketRequestUi = { index: number; subindex: number };
export const sellRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Sell Request",
	properties: {
		contract: {
			type: "object",
			title: "Contract",
			properties: {
				index: { type: "integer", minimum: 0 },
				subindex: { type: "integer", minimum: 0 },
			},
		},
		amount: { type: "string", title: "Amount" },
		rate: {
			type: "object",
			title: "Rate",
			properties: {
				numerator: { type: "integer", minimum: 0, title: "Numerator" },
				denominator: { type: "integer", minimum: 0, title: "Denominator" },
			},
		},
	},
};
export type SellRequestUi = {
	contract: { index: number; subindex: number };
	amount: string;
	rate: { numerator: number; denominator: number };
};
export const sellErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Sell Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"ParseError",
				"Unauthorized",
				"InvalidConversion",
				"LogError",
				"AgentExists",
				"InvalidMarket",
				"TokenTransfer",
				"CurrencyTransfer",
				"InvalidRate",
				"MintMarketNotStarted",
				"AddToken",
				"TokenMint",
				"InvalidMarketType",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["Unauthorized"] },
						Unauthorized: {
							type: "object",
							title: "Unauthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidConversion"] },
						InvalidConversion: {
							type: "object",
							title: "InvalidConversion",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["AgentExists"] },
						AgentExists: {
							type: "object",
							title: "AgentExists",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidMarket"] },
						InvalidMarket: {
							type: "object",
							title: "InvalidMarket",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["TokenTransfer"] },
						TokenTransfer: {
							type: "object",
							title: "TokenTransfer",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["CurrencyTransfer"] },
						CurrencyTransfer: {
							type: "object",
							title: "CurrencyTransfer",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidRate"] },
						InvalidRate: {
							type: "object",
							title: "InvalidRate",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["MintMarketNotStarted"] },
						MintMarketNotStarted: {
							type: "object",
							title: "MintMarketNotStarted",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["AddToken"] },
						AddToken: { type: "object", title: "AddToken", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["TokenMint"] },
						TokenMint: { type: "object", title: "TokenMint", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidMarketType"] },
						InvalidMarketType: {
							type: "object",
							title: "InvalidMarketType",
							properties: {},
						},
					},
				},
			],
		},
	},
};
export type SellErrorUi =
	| { tag: "ParseError"; ParseError: never }
	| { tag: "Unauthorized"; Unauthorized: never }
	| { tag: "InvalidConversion"; InvalidConversion: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "AgentExists"; AgentExists: never }
	| { tag: "InvalidMarket"; InvalidMarket: never }
	| { tag: "TokenTransfer"; TokenTransfer: never }
	| { tag: "CurrencyTransfer"; CurrencyTransfer: never }
	| { tag: "InvalidRate"; InvalidRate: never }
	| { tag: "MintMarketNotStarted"; MintMarketNotStarted: never }
	| { tag: "AddToken"; AddToken: never }
	| { tag: "TokenMint"; TokenMint: never }
	| { tag: "InvalidMarketType"; InvalidMarketType: never };
export const init = (props: {
	onInitialize: (contract: ContractAddress.Type) => void;
	uiSchema?: UiSchema;
	uiWidgets?: RegistryWidgetsType;
}) =>
	GenericInit<types.initRequest, initRequestUi>({
		onContractInitialized: props.onInitialize,
		uiSchema: props.uiSchema,
		uiWidgets: props.uiWidgets,
		method: client.init,
		requestJsonSchema: initRequestJsonSchema,
		requestSchemaBase64: types.initRequestSchemaBase64,
	});
export const ENTRYPOINTS_UI: {
	[key: keyof typeof types.ENTRYPOINTS]: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) => React.JSX.Element;
} = {
	addAgent: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<types.AddAgentRequest, AddAgentRequestUi, never, never>({
			...props,
			method: client.addAgent,
			requestJsonSchema: addAgentRequestJsonSchema,
			requestSchemaBase64: types.addAgentRequestSchemaBase64,
		}),
	addMarket: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<types.AddMarketRequest, AddMarketRequestUi, never, never>({
			...props,
			method: client.addMarket,
			requestJsonSchema: addMarketRequestJsonSchema,
			requestSchemaBase64: types.addMarketRequestSchemaBase64,
		}),
	buy: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<types.BuyRequest, BuyRequestUi, types.BuyError, BuyErrorUi>({
			...props,
			method: client.buy,
			requestJsonSchema: buyRequestJsonSchema,
			requestSchemaBase64: types.buyRequestSchemaBase64,
			errorJsonSchema: buyErrorJsonSchema,
			errorSchemaBase64: types.buyErrorSchemaBase64,
		}),
	getMarket: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<types.GetMarketRequest, GetMarketRequestUi, never, never>({
			...props,
			method: client.getMarket,
			requestJsonSchema: getMarketRequestJsonSchema,
			requestSchemaBase64: types.getMarketRequestSchemaBase64,
		}),
	mint: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.MintRequest,
			MintRequestUi,
			types.MintError,
			MintErrorUi
		>({
			...props,
			method: client.mint,
			requestJsonSchema: mintRequestJsonSchema,
			requestSchemaBase64: types.mintRequestSchemaBase64,
			errorJsonSchema: mintErrorJsonSchema,
			errorSchemaBase64: types.mintErrorSchemaBase64,
		}),
	removeAgent: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<types.RemoveAgentRequest, RemoveAgentRequestUi, never, never>(
			{
				...props,
				method: client.removeAgent,
				requestJsonSchema: removeAgentRequestJsonSchema,
				requestSchemaBase64: types.removeAgentRequestSchemaBase64,
			},
		),
	removeMarket: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.RemoveMarketRequest,
			RemoveMarketRequestUi,
			never,
			never
		>({
			...props,
			method: client.removeMarket,
			requestJsonSchema: removeMarketRequestJsonSchema,
			requestSchemaBase64: types.removeMarketRequestSchemaBase64,
		}),
	sell: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.SellRequest,
			SellRequestUi,
			types.SellError,
			SellErrorUi
		>({
			...props,
			method: client.sell,
			requestJsonSchema: sellRequestJsonSchema,
			requestSchemaBase64: types.sellRequestSchemaBase64,
			errorJsonSchema: sellErrorJsonSchema,
			errorSchemaBase64: types.sellErrorSchemaBase64,
		}),
};
